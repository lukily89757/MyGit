// vspy generated header file
#ifndef VSPY_GENERATED_HEADER
#define VSPY_GENERATED_HEADER
#include "windows.h"
#include "string.h"
#include <stdio.h>
extern void * g_uiHandle;
typedef unsigned __int64 uint64;

//#define SpyCode_EN

#define printf Printf
int Printf(const char *szInMsg, ...);
int PrintfW(const wchar_t *szInMsg, ...);
int WriteLine(const char *szInMsg, ...);
int WriteLineW(const wchar_t *szInMsg, ...);
void DisplayLastError(LPCWSTR lpszFunction);

typedef void (* RS232OnError_fdef)(DWORD port, DWORD errorFlags);
typedef void (* RS232OnRxTx_fdef)(DWORD port, BYTE buffer[], DWORD dwSize);

DWORD ICS_RS232Open(DWORD port);
DWORD ICS_RS232Close(DWORD port);
DWORD ICS_RS232ConfigTimeout(DWORD port, DWORD baudrate, DWORD numberOfDataBits, DWORD numberOfStopBits, DWORD parity, DWORD timeout);
DWORD ICS_RS232Config(DWORD port, DWORD baudrate, DWORD numberOfDataBits, DWORD numberOfStopBits, DWORD parity);
DWORD ICS_RS232SetHandshake(DWORD port, DWORD handshake, DWORD XonLimit, DWORD XoffLimit, DWORD XonChar, DWORD XoffChar);
DWORD ICS_RS232SetSignalLine(DWORD port, DWORD line, DWORD state);
WORD ICS_RS232WriteByte(DWORD port, DWORD data);
WORD ICS_RS232WriteBlock(DWORD port, BYTE buffer[], DWORD size);
DWORD ICS_RS232Send(DWORD port, BYTE buffer[], DWORD size);
DWORD ICS_RS232Receive(DWORD port, BYTE buffer[], DWORD size);
void ICS_RS232CloseAllPorts();

typedef void	(__stdcall *lpOut32)(short, short);
typedef short	(__stdcall *lpInp32)(short);
typedef BOOL	(__stdcall *lpIsInpOutDriverOpen)(void);
void LoadInpOut();
void UnloadInpout();

#define J1939Priority(id)                   ((unsigned long)((id >> 26) & 0x7))
#define J1939PGN(id)                        ((unsigned long)((id >> 8) & 0x3FFFF))
// PGN is composed of EDP, DP, PF and PS which follow.
#define J1939ExtDataPage(id)                ((unsigned char)((id >> 25) & 0x1))
#define J1939DataPage(id)                   ((unsigned char)((id >> 24) & 0x1))
#define J1939PduFormat(id)                  ((unsigned char)((id >> 16) & 0xFF))
#define J1939PduSpecific(id)                ((unsigned char)((id >> 8) & 0xFF))
#define J1939SourceAddress(id)              ((unsigned char)(id & 0xFF))
#define J1939DestinationAddress(id)         ((unsigned char)(J1939PduFormat(id) < 240) ? ((id >> 8) & 0xFF) : 0)

#define SetJ1939Priority(id, prio)          (id = (prio << 26) | (id & 0x7FFFFFF))
#define SetJ1939PGN(id, pgn)                (id = (pgn << 8) | (id & 0xFF))
// PGN is composed of EDP, DP, PF and PS which follow.
#define SetJ1939ExtDataPage(id, edp)        (id = (edp << 25) | (id & 0x1DFFFFFF))
#define SetJ1939DataPage(id, dp)            (id = (dp << 24) | (id & 0x1EFFFFFF))
#define SetJ1939PduFormat(id, pf)           (id = (pf << 16) | (id & 0x1F00FFFF))
#define SetJ1939PduSpecific(id, ps)         (id = (ps << 8) | (id & 0x1FFF00FF))
#define SetJ1939SourceAddress(id, sa)       (id = sa | (id & 0x1FFFFF00))
#define SetJ1939DestinationAddress(id, da)  SetJ1939PduSpecific(id, da)

int Spy_TextAPI_W(wchar_t * wcCommand, wchar_t * wcResponse, int iResponseMaxLength);
int Spy_TextAPI(char * szCommand, char * szResponse, int iResponseMaxLength);

//LED control from ISM is not supported in DLL projects
#define ControlMainChipLEDColor(ledColor)      (0)

//Not supported in DLL projects
#define ControlDeviceFemaleOBDPowerOutput(outputState)      (0)

#define CM_CALLBACKTYPE_APP_SIGNAL                     0
#define CM_CALLBACKTYPE_MESSAGE                        1
#define CM_CALLBACKTYPE_TIMER                          2
#define CM_CALLBACKTYPE_MESSAGE_MG                     3
#define CM_CALLBACKTYPE_MESSAGE_TX                     4
#define CM_CALLBACKTYPE_BEFORE_MESSAGE_TX   5

#define CM_GETSET_SET_APP_SIGNAL                       0
#define CM_GETSET_GET_APP_SIGNAL                       1
#define CM_GETSET_SET_TMR_VALUE                        2
#define CM_GETSET_GET_TMR_VALUE                        3
#define CM_GETSET_SET_TMR_ENABLE                       4
#define CM_GETSET_GET_TMR_ENABLE                       5
#define CM_GETSET_FBLOCK_START                         6
#define CM_GETSET_FBLOCK_STOP                          7
#define CM_GETSET_FBLOCK_TRIGGER                       8
#define CM_GETSET_FBLOCK_SAVE                          9
#define CM_GETSET_FBLOCK_GET_ISRUNNING                10
#define CM_GETSET_FBLOCK_GET_ISTRIGGERED              11
#define CM_GETSET_FBLOCK_GET_NUMCOLLECTED             12
#define CM_GETSET_MSG_STATS_CLR                       13
#define CM_GETSET_DB_STATS_CLR                        14
#define CM_GETSET_TX_STATS_CLR                        15
#define CM_GETSET_NET_STATS_CLR                       16
#define CM_GETSET_NODE_STATS_CLR                      17
#define CM_GETSET_MSG_STATS_GET                       18
#define CM_GETSET_DB_STATS_GET                        19
#define CM_GETSET_TX_STATS_GET                        20
#define CM_GETSET_NET_STATS_GET                       21
#define CM_GETSET_NODE_STATS_GET                      22
#define CM_GETSET_SET_APP_SIGNAL_TEXT                 23
#define CM_GETSET_GET_APP_SIGNAL_TEXT                 24
#define CM_GETSET_DB_DLC_GET                          25
#define CM_GETSET_DB_NETWORK_GET                      26
#define CM_GETSET_DB_PERIOD_GET                       27
#define CM_GETSET_MSG_DLC_GET                         28
#define CM_GETSET_MSG_NETWORK_GET                     29
#define CM_GETSET_MSG_PERIOD_GET                      30
#define CM_GETSET_TX_DLC_GET                          31
#define CM_GETSET_TX_NETWORK_GET                      32
#define CM_GETSET_TX_PERIOD_GET                       33
#define CM_GETSET_SPY_LOCK                            34
#define CM_GETSET_SPY_UNLOCK                          35
#define CM_GETSET_DIAG_JOB_ISRUNNING                  36
#define CM_GETSET_DIAG_JOB_NumMessagesCollected       37
#define CM_GETSET_DIAG_JOB_Successful                 38
#define CM_GETSET_DIAG_JOB_ECUResponseCount           39
#define CM_GETSET_DIAG_JOB_TotalTimeAbs               40
#define CM_GETSET_DIAG_JOB_Last7FSubFunctionEx78      41
#define CM_GETSET_DIAG_JOB_7FCountEx78                42
#define CM_GETSET_DIAG_JOB_7FCountResponsePending     43
#define CM_GETSET_DIAGJOB_START                       44
#define CM_GETSET_DIAGJOB_STOP                        45
#define CM_GETSET_DIAGJOB_SAVE                        46
#define CM_GETSET_FBLOCK_ADD                          47
#define CM_GETSET_FBLOCK_FIND                         48
#define CM_GETSET_FBLOCK_POSTTRIGGER                  49
#define CM_GETSET_SET_TMR_PERIOD                      50
#define CM_GETSET_GET_TMR_TIME_TO_ELAPSE              51
#define CM_GETSET_GET_TIMENS                          52
#define CM_GETSET_SET_CAN_MODE                        53
#define CM_GETSET_SET_BTR                             54
#define CM_GETSET_STOP_MEASUREMENT                    55
#define CM_GETSET_CLEAR_TRACES                        56
#define CM_GETSET_FBLOCK_PAUSE                        57
#define CM_GETSET_FBLOCK_CONTINUE                     58
#define CM_GETSET_SYS_EXIT                            59
#define CM_GETSET_SYS_MINIMIZE                        60
#define CM_GETSET_GET_DB_NAME                         61
#define CM_GETSET_SET_LIN_WAKEUP_PARMS                62
#define CM_GETSET_SEND_LIN_WAKEUP                     63
#define CM_GETSET_SEND_LIN_SLEEP                      64
#define CM_GETSET_IL_ACTION                           65
#define CM_GETSET_SET_TXSIGNAL                        66
#define CM_GETSET_SET_APP_SIGNAL_AT                   67
#define CM_GETSET_GET_APP_SIGNAL_AT                   68
#define CM_GETSET_SET_APP_SIGNAL_TEXT_AT              69
#define CM_GETSET_GET_APP_SIGNAL_TEXT_AT              70
#define CM_GETSET_GET_NODE_NAME                       71
#define CM_GETSET_GET_NODE_TYPE                       72
#define CM_GETSET_GET_STATION_ADDR                    73
#define CM_GETSET_SET_APP_ACTIVE                      74
#define CM_GETSET_GET_SYS_CONF                        75
#define CM_GETSET_GET_REQ_STATE                       76
#define CM_GETSET_GET_SYS_BUS_REQ                     77
#define CM_GETSET_GET_SYS_FAIL_STATES                 78
#define CM_GETSET_GET_SYS_CURR_FAIL_STATES            79
#define CM_GETSET_GET_SYS_DLL_STATES                  80
#define CM_GETSET_GET_TARGET_CONF                     81
#define CM_GETSET_SET_TARGET_CONF                     82
#define CM_GETSET_GET_IS_WAKEUP_NODE                  83
#define CM_GETSET_GET_IND_ACTIVE_OTHER_BUS            84
#define CM_GETSET_REQ_NET_SHUTDOWN                    85
#define CM_GETSET_REQ_NET_ON_OTHER_BUS                86
#define CM_GETSET_REQ_NET_OFF_OTHER_BUS               87
#define CM_GETSET_TABLE_FBLOCK_ACTIVATE_SLOT		    88
#define CM_GETSET_TABLE_FBLOCK_DEACTIVATE_SLOT		89
#define CM_GETSET_MSG_DISSECTED_INSTANCE_VALUE		90
#define CM_GETSET_DB_DISSECTED_INSTANCE_VALUE         91

#define CM_OSEK_GET_TXID                             501
#define CM_OSEK_SET_TXID                             502
#define CM_OSEK_GET_RXID                             503
#define CM_OSEK_SET_RXID                             504
#define CM_OSEK_GET_USEFC                            505
#define CM_OSEK_SET_USEFC                            506
#define CM_OSEK_SET_0PADDING                         507
#define CM_OSEK_GET_USEEXTID                         508
#define CM_OSEK_SET_USEEXTID                         509
#define CM_OSEK_GET_BS                               510
#define CM_OSEK_SET_BS                               511
#define CM_OSEK_GET_STMIN                            512
#define CM_OSEK_SET_STMIN                            513
#define CM_OSEK_GET_EVAL1FC                          514
#define CM_OSEK_SET_EVAL1FC                          515
#define CM_OSEK_GET_TIMEOUTAR                        516
#define CM_OSEK_SET_TIMEOUTAR                        517
#define CM_OSEK_GET_TIMEOUTAS                        518
#define CM_OSEK_SET_TIMEOUTAS                        519
#define CM_OSEK_GET_TIMEOUTBR                        520
#define CM_OSEK_SET_TIMEOUTBR                        521
#define CM_OSEK_GET_TIMEOUTBS                        522
#define CM_OSEK_SET_TIMEOUTBS                        523
#define CM_OSEK_GET_TIMEOUTCR                        524
#define CM_OSEK_SET_TIMEOUTCR                        525
#define CM_OSEK_GET_1FCBS                            526
#define CM_OSEK_SET_1FCBS                            527
#define CM_OSEK_SET_FIXEDST                          528
#define CM_OSEK_GET_0PATTERN                         529
#define CM_OSEK_SET_0PATTERN                         530
#define CM_OSEK_GET_STARTSN                          531
#define CM_OSEK_SET_STARTSN                          532
#define CM_OSEK_GET_IDFROMADR                        533
#define CM_OSEK_SET_IDFROMADR                        534
#define CM_OSEK_GET_ADRFROMID                        535
#define CM_OSEK_SET_ADRFROMID                        536
#define CM_OSEK_GET_TPBASEADR                        537
#define CM_OSEK_SET_TPBASEADR                        538
#define CM_OSEK_GET_MAXMSGLEN                        539
#define CM_OSEK_SET_MAXMSGLEN                        540
#define CM_OSEK_SET_FCDELAY                          541
#define CM_OSEK_SET_WFTMAX                           542
#define CM_OSEK_GET_DATAREQ                          543
#define CM_OSEK_GET_RXDATA                           544
#define CM_OSEK_GET_SRCADR                           545
#define CM_OSEK_GET_NMSTATUS                         546
#define CM_OSEK_SET_NMSTATUS                         547
#define CM_OSEK_GET_NMCONFIG                         548
#define CM_AUTOSAR_SET_STATUS                        549
#define CM_OSEK_SET_ADDRMODE                         550
#define CM_OSEK_GET_ADDRMODE                         551
#define CM_OSEK_SET_DLCMODE                          552
#define CM_OSEK_SET_CAN                              553
#define CM_OSEK_GET_TGTADR                           554
#define CM_OSEK_SET_TGTADR                           555
#define CM_OSEK_GET_TXMODE                           556
#define CM_OSEK_SET_TXMODE                           557
#define CM_OSEK_SET_MINSTMIN                         558
#define CM_OSEK_GET_ECUNUM                           559
#define CM_OSEK_SET_ECUNUM                           560
#define CM_OSEK_GET_LOFCTADR                         561
#define CM_OSEK_SET_LOFCTADR                         562
#define CM_OSEK_GET_HIFCTADR                         563
#define CM_OSEK_SET_HIFCTADR                         564
#define CM_OSEK_GET_MSGCOUNT                         565
#define CM_OSEK_SET_MSGCOUNT                         566
#define CM_OSEK_GET_TXPRIO                           567
#define CM_OSEK_SET_TXPRIO                           568
#define CM_OSEK_GET_FFPRIO                           569
#define CM_OSEK_SET_FFPRIO                           570
#define CM_OSEK_GET_FCPRIO                           571
#define CM_OSEK_SET_FCPRIO                           572
#define CM_OSEK_GET_USEALLAE                         573
#define CM_OSEK_SET_USEALLAE                         574
#define CM_OSEK_GET_TXTOTHRESHOLD                    575
#define CM_OSEK_SET_TXTOTHRESHOLD                    576
#define CM_OSEK_GET_RECENTAE                         577
#define CM_OSEK_SET_MAXCFBURST                       578
#define CM_OSEK_GET_ADREXT                           579
#define CM_OSEK_SET_ADREXT                           580
#define CM_OSEK_CONNECTREQ                           581
#define CM_OSEK_GET_CAN                              582
#define CM_OSEK_GET_0PADDING                         583
#define CM_OSEK_GET_FIXED_DLC                        584
#define CM_GET_VIEWCOUNT						   	   600
#define CM_GET_VIEWHANDLE					   	   	   601
#define CM_GET_VIEWTYPE							   602
#define CM_GET_VIEWPROCADDRESS					   603
#define CM_SET_SHOWVIEW							   604
#define CM_SET_HIDEVIEW							   605
#define CM_GET_VIEWISVISIBLE					   	   606
#define CM_SET_SHOWVIEWBYTYPE			               607

// Send this struct to CM_GET_VIEWPROCADDRESS
typedef struct _stGetViewProcAddressArgs
{
	void* InForm;
	const char* InFunctionName;
	void* OutFunctionPtr;
} stGetViewProcAddressArgs;

// Send this struct to CM_GET_VIEWTYPE
typedef struct _stGetViewTypeArgs
{
	void* InForm;
	int OutType;
} stGetViewTypeArgs;

// Send this struct to CM_GET_VIEWISVISIBLE
typedef struct _stGetViewIsVisibleArgs
{
	void* InForm;
	int OutVisible;
} stGetViewIsVisibleArgs;

// Typedefs for function pointers returned by CM_GET_VIEWPROCADDRESS
typedef int(_stdcall* VideoFrameReview_GetMaxCamCount)(void* pForm);
typedef int(_stdcall* VideoFrameReview_CamIsVisible)(void* pForm, int camIndex);
typedef void(_stdcall* VideoFrameReview_AddRect)(void* pForm, int cam, float percentLeft, float percentTop, float percentRight, float percentBottom, int color, int thickness);
typedef void(_stdcall* VideoFrameReview_ClearRects)(void* pForm, int camIndex);
typedef int(_stdcall* VideoFrameReview_AddText)(void* pForm, int cam, const char* text, float percentLeft, float percentTop, int color, int size);
typedef void(_stdcall* VideoFrameReview_UpdateText)(void* pForm, int cam, int index, const char* text, float percentLeft, float percentTop, int color, int size);
typedef void(_stdcall* VideoFrameReview_ClearTexts)(void* pForm, int cam);
typedef int(_stdcall* VideoFrameReview_AddBitmap)(void* pForm, int cam, float percentLeft, float percentTop, float percentRight, float percentBottom, int visible, const wchar_t* imagePath);
typedef void(_stdcall* VideoFrameReview_UpdateBitmap)(void* pForm, int cam, int index, float percentLeft, float percentTop, float percentRight, float percentBottom, int visible);
typedef void(_stdcall* VideoFrameReview_ClearBitmaps)(void* pForm, int cam);

#define ATTR_LIN_TX_SENDSLAVE                       0x10
#define ATTR_LIN_TX_CLASSIC_CHECKSUM                0x20
#define ATTR_LIN_TX_SEND_BREAK_ONLY                 0x40
#define ATTR_LIN_TX_SEND_HDR_ONLY                   0x80
#define ATTR_ACTIVE_INIT                            0x10
#define ATTR_CAN_29BIT_ID_FRAME                     0x20
#define ATTR_CAN_REMOTE_FRAME                       0x40
#define ATTR_CAN_TX_HIGH_VOLTAGE                    0x80
#define ATTR_ALL_RX_TRANSMIT                           1
#define ATTR_ALL_RX_ERROR                              2
#define ATTR_LIN_RX_MASTER_TX                      0x100
#define ATTR_LIN_RX_SLAVE_TX                       0x200
#define ATTR_CANFD_FRAME                          0x1000
#define ATTR_CANFD_ESI                            0x2000
#define ATTR_CANFD_BRS                            0x4000

// Spy_ErrorState iErrorBitfield flags
#define CAN_ERROR_STATUS_ACTIVE                   0x0000
#define CAN_ERROR_STATUS_TXRX_WARNING             0x0001  // EWARN: Transmitter or Receiver in Error State Warning bit
#define CAN_ERROR_STATUS_RX_WARNING               0x0002  // RXWAR: Receiver in Error State Warning bit
#define CAN_ERROR_STATUS_TX_WARNING               0x0004  // TXWAR: Transmitter in Error State Warning bit
#define CAN_ERROR_STATUS_RX_PASSIVE               0x0008  // RXBP: Receiver in Error State Bus Passive bit
#define CAN_ERROR_STATUS_TX_PASSIVE               0x0010  // TXBP: Transmitter in Error State Bus Passive bit
#define CAN_ERROR_STATUS_TX_BUS_OFF               0x0020  // TXBO: Transmitter in Error State Bus Off bit

#define SPY_CTL_PROP_ENABLE                       1
#define SPY_CTL_PROP_SET_BACKGROUND               2
#define SPY_CTL_PROP_SET_FOREGROUND               3
#define SPY_CTL_PROP_SET_CAPTION                  4
#define SPY_CTL_PROP_SET_LEFT                     5
#define SPY_CTL_PROP_SET_TOP                      6
#define SPY_CTL_PROP_SET_WIDTH                    7
#define SPY_CTL_PROP_SET_HEIGHT                   8
#define SPY_CTL_PROP_SET_TRANSPARENT              9
#define SPY_CTL_PROP_SET_FONT_NAME               10
#define SPY_CTL_PROP_SET_FONT_SIZE               11

struct stCallBackPointers
{
    void * pRegisterCallBack;
    void * pGetSetValueCallBack;
    void * pTransmitMessageCallBack;
    void * pOutputWindowCallBack;
    void * pTextAPICallBack;
    void * pGetSignalValue;
    void * pDecodeSignalValue;
    void * pTransmitMessagesFromSignalValues;
    void * pFindIndexForObjectFromNameCallBack;
    void * pShowPanelCallBack;
    void * pMessageGenericInit;
    void * pGetEcuCount;
    void * pGetMemoryBlockCount;
    void * pGetMemoryBlockInfo;
    void * pGetMemoryBlockData;
    void * pSetMemoryBlockData;
    void * pMessageRawInit;
    void * pSignalPhysicalToRaw;
    void * pTransmitMessagesFromRawSignalValues;
    void * pGetMessageName;
    void * pSetControlProp;
    void * pUpdateMessageSignalsFromBytes;
    void * pUpdateBytesFromSignals;
    void * pUpdateBytesFromRawSignals;
};
extern void (* CM_RegisterCallback) (void * uiHandle, unsigned short iValueType, unsigned short iIndex, void * pCallBackPointer) ;
extern void (* CM_GetSetValue) (void * uiHandle, unsigned short iValueType, unsigned short iIndex, void * pValueToSet) ;
extern int  (* CM_TextAPI) (void * uiHandle, wchar_t * pCommand, wchar_t * pResponse, int iResponseMaxLength) ;
extern int  (* CM_OutputWindow) (void * uiHandle, wchar_t * p_TextToWrite, int iColor, int iLength) ;
extern int  (* CM_TransmitMessage) (void * uiHandle, int iNetwork,int iID, int iNumDataBytes,int iBitField,unsigned char * p_btData);
extern int  (* CM_GetSignalValue) (void * uiHandle, unsigned short iMessageType, unsigned short iMessageIndex,unsigned short iSignalIndex,void * pValueToSet);
extern int  (* CM_TxFromSignals) (void * uiHandle, unsigned short iMessageType,
                       unsigned short iMessageIndex, unsigned char * bt_DefaultBytes, int iByteCount,
                       int iNetworkIndex, void * pSignalValues,
                       int iNumSignalCount);
extern int  (* CM_TxFromRawSignals) (void * uiHandle, unsigned short iMessageType,
                       unsigned short iMessageIndex, unsigned char * bt_DefaultBytes, int iByteCount,
                       int iNetworkIndex, void * pSignalValues,
                       int iNumSignalCount);
extern int  (* CM_UpdateMessageSignalsFromBytes) (void * uiHandle, unsigned short iMessageType, unsigned short iMessageIndex,
                       unsigned char * p_btData, int iNumDataBytes);
extern int  (* CM_UpdateBytesFromSignals) (void * uiHandle, unsigned short iMessageType, unsigned short iMessageIndex,
                       double * p_dSignals, int dSignalMaxCount, unsigned char * p_btData, int iNumDataBytes);
extern int  (* CM_UpdateBytesFromRawSignals) (void * uiHandle, unsigned short iMessageType, unsigned short iMessageIndex,
                       uint64 * p_iSignals, int dSignalMaxCount, unsigned char * p_btData, int iNumDataBytes);
extern int  (* CM_FindIndexForObjectFromName) (void * uiHandle, int iObjectType,wchar_t * pName, int * p_iObjectIndex);
extern int  (* CM_GetMessageName) (void * uiHandle, int iMessageId, int iMessageContext, wchar_t * pName, int iBufferSize);
extern int  (* CM_ShowPanel) (void * uiHandle, wchar_t * pWindowName, wchar_t * pPanelName);
extern int  (* CM_SetControlProperty) (void * uiHandle, wchar_t * pPanelName, wchar_t * pWindowName, int prop, void *pValue);
extern int  (* CM_MessageGenericInit) (void * uiHandle, unsigned short iMessageType,
                       unsigned short iMessageIndex, void * p_MessageStats, int * p_iNetworkID,
                       int * p_iNumDataBytes, int  p_iNumDataMax, int * p_iPeriodMs, int * p_iID,
                       int * p_iBitField, unsigned char * p_btData, double * p_dSignals, int dSignalMaxCount,
                       int * p_iActualSignalMaxCount,__int64 * p_iTimeStampNanoSecondsHW,unsigned int * p_iTimeStampMillisecondsOS);
extern int  (* CM_MessageRawInit) (void * uiHandle, unsigned short iMessageType, unsigned short iMessageIndex,
                       uint64 * p_dSignals, int dSignalMaxCount, int * p_iActualSignalMaxCount);
extern uint64 (* CM_SignalPhysicalToRaw) (void * uiHandle, unsigned short iMessageType, unsigned short iMessageIndex,
                       unsigned short iSignalIndex, double dPhysicalValue);
extern int  (* CM_GetEcuCount) (void * uiHandle);
extern int  (* CM_GetMemoryBlockCount) (void * uiHandle, int ecu);
extern int  (* CM_GetMemoryBlockInfo) (void * uiHandle, int ecu, int block, unsigned int *address, unsigned int *size);
extern int  (* CM_GetMemoryBlockData) (void * uiHandle, int ecu, int block, unsigned char *buffer, unsigned int address, unsigned int size);
extern int  (* CM_SetMemoryBlockData) (void * uiHandle, int ecu, int block, unsigned char *buffer, unsigned int address, unsigned int size);

#define CAN_ID_EXTENDED_MASK   (0x1FFFF800)
#define CAN_ID_STANDARD_MASK   (0x000007FF)
#define CAN_ID_EXTENDED_BIT    (0x80000000)

#define isStdId(id) ((id & CAN_ID_EXTENDED_BIT) == 0)
#define isExtId(id) (((id & CAN_ID_EXTENDED_BIT) == CAN_ID_EXTENDED_BIT) || (id & CAN_ID_EXTENDED_MASK))
#define mkExtId(id) (id | CAN_ID_EXTENDED_BIT)
#define mkStdId(id) (id & (~CAN_ID_EXTENDED_BIT))
#define valOfId(id) ((long)id)
void SetUseExtendedIdBit();

#define GMLAN_SOURCE_MASK 0xff
#define GMLAN_PID_MASK    0xffff
#define GMLAND_PID_SHIFT  8
#define GMLAN_PRIO_MASK   0x07
#define GMLAND_PRIO_SHIFT 26
#define gmlanSetSourceId(id, source) (id |= (source & GMLAN_SOURCE_MASK))
#define gmlanSetPid(id, pid) (id |= ((pid & GMLAN_PID_MASK) << GMLAND_PID_SHIFT))
#define gmlanSetPrio(id, prio) (id |= ((prio & GMLAN_PRIO_MASK) << GMLAND_PRIO_SHIFT))
#define gmlanGetSourceId(id) (id & GMLAN_SOURCE_MASK)
#define gmlanGetPid(id) ((id >> GMLAND_PID_SHIFT) & GMLAN_PID_MASK)
#define gmlanGetPrio(id) ((id >> GMLAND_PRIO_SHIFT) & GMLAN_PRIO_MASK)
#define gmlanId(id, source) (id | (source & GMLAN_SOURCE_MASK))

int getStartDelay();
void setStartDelay(int delay);

void SpyShowPanel(char * pWindowName, char * pPanelName);
void SpyShowPanelW(wchar_t * pWindowName, wchar_t * pPanelName);
void SpySetControlProperty(char * pPanelName, char * pControlTag, int prop, void *pValue);
void SpySetControlPropertyW(wchar_t * pPanelName, wchar_t * pControlTag, int prop, void *pValue);
void Spy_Lock();
void Spy_Unlock();
int GetMessageName(int iMessageId, int iMessageContext, char * pName, int iBufferSize);
int GetMessageNameW(int iMessageId, int iMessageContext, wchar_t * pName, int iBufferSize);
double AS_Get(int index);
void AS_Set(int index, double dValue);
double AS_GetAt(int index, int element);
void AS_SetAt(int index, int element, double dValue);
int AS_GetText(int nIndex, void * szValue, int nLength);
int AS_SetText(int nIndex, void * szValue, int nLength);
int AS_GetTextW(int index, wchar_t * szValue);
void SpySetTxSignal(unsigned int iMessageIndex, unsigned int iSignalIndex, double dValue);
void SpySetTxSignalRaw(unsigned int iMessageIndex, unsigned int iSignalIndex, __int64 nValue);
void SpySetTxEvent(unsigned int iMessageIndex);
int AS_GetTextAtW(int index, int element, wchar_t * szValue);
int AS_SetTextAtW(int index, int element, wchar_t * szValue);
int GetMessageDissectedField(unsigned int index, unsigned int type, const char* field, double* value);
int SpyViewGetCount();
void* SpyViewGetHandle(int index);
int SpyViewGetType(void* pView);
void SpyViewShow(void* pView);
void SpyViewHide(void* pView);
int SpyViewIsVisible(void* pView);
void* SpyViewShowByType(int type);
void* SpyViewGetProcAddress(void* pView, const char* szProcName);

typedef struct {
    unsigned int iSignal;    /// signal to set
    unsigned int iType;      /// 0 physical, 1 raw
    union {
        double dValue;           /// value 
        __int64 nValue;
    };
} TxSetSignal;

// Network Statistics
typedef struct {
    unsigned int iCount;  /// count of messages on network
    unsigned int iRate; /// messages per second
    double dPercentUse; /// current bus utilization 
    unsigned int iMaxRate;    /// maximum messages per second
    double dMaxPercentUse;   /// maximum bus utilization
    unsigned int iErrorCount;   /// number of errors on a network
    unsigned int iTxCount;       /// number of messages transmitted on a network
    unsigned int iErrorRate; /// errors per second
    unsigned int iTxRate;        /// transmissions per second
    unsigned int iTxBufferFill;  /// current network buffer fill level
    unsigned int iCANTxErrCount;  /// transmit CAN errors
    unsigned int iCANRxErrCount;  /// receive CAN errors
} NetworkStats; 
int Spy_TranslateNetwork(int nNetworkOffset);
int Spy_UntranslateNetwork(int nNetwork);
int Spy_NetworksInUse();
int Spy_LINIndex(int iNetwork);

// network index variables - identify networks in vspy
extern int NET_HS_CAN;
void NET_HS_CAN_ClearStats();
void NET_HS_CAN_GetStats(NetworkStats * p_NetworkStats);
extern int NET_MS_CAN;
void NET_MS_CAN_ClearStats();
void NET_MS_CAN_GetStats(NetworkStats * p_NetworkStats);
extern int NET_SW_CAN;
void NET_SW_CAN_ClearStats();
void NET_SW_CAN_GetStats(NetworkStats * p_NetworkStats);
extern int NET_J1850_VPW;
void NET_J1850_VPW_ClearStats();
void NET_J1850_VPW_GetStats(NetworkStats * p_NetworkStats);
extern int NET_ISO9141_KW2K;
void NET_ISO9141_KW2K_ClearStats();
void NET_ISO9141_KW2K_GetStats(NetworkStats * p_NetworkStats);
extern int NET_LSFT_CAN;
void NET_LSFT_CAN_ClearStats();
void NET_LSFT_CAN_GetStats(NetworkStats * p_NetworkStats);
extern int NET_J1850_PWM;
void NET_J1850_PWM_ClearStats();
void NET_J1850_PWM_GetStats(NetworkStats * p_NetworkStats);
extern int NET_J1708;
void NET_J1708_ClearStats();
void NET_J1708_GetStats(NetworkStats * p_NetworkStats);
extern int NET_neoVI;
void NET_neoVI_ClearStats();
void NET_neoVI_GetStats(NetworkStats * p_NetworkStats);
extern int NET_HS_CAN2__neoVI_3G_;
void NET_HS_CAN2__neoVI_3G__ClearStats();
void NET_HS_CAN2__neoVI_3G__GetStats(NetworkStats * p_NetworkStats);
extern int NET_HS_CAN3__neoVI_3G_;
void NET_HS_CAN3__neoVI_3G__ClearStats();
void NET_HS_CAN3__neoVI_3G__GetStats(NetworkStats * p_NetworkStats);
extern int NET_LIN2__neoVI_3G_;
void NET_LIN2__neoVI_3G__ClearStats();
void NET_LIN2__neoVI_3G__GetStats(NetworkStats * p_NetworkStats);
extern int NET_LIN3__neoVI_3G_;
void NET_LIN3__neoVI_3G__ClearStats();
void NET_LIN3__neoVI_3G__GetStats(NetworkStats * p_NetworkStats);
extern int NET_LIN4__neoVI_3G_;
void NET_LIN4__neoVI_3G__ClearStats();
void NET_LIN4__neoVI_3G__GetStats(NetworkStats * p_NetworkStats);
extern int NET_CGI__neoVI_3G_;
void NET_CGI__neoVI_3G__ClearStats();
void NET_CGI__neoVI_3G__GetStats(NetworkStats * p_NetworkStats);
extern int NET_LIN;
void NET_LIN_ClearStats();
void NET_LIN_GetStats(NetworkStats * p_NetworkStats);
extern int NET_ISO9141_KW2K_2;
void NET_ISO9141_KW2K_2_ClearStats();
void NET_ISO9141_KW2K_2_GetStats(NetworkStats * p_NetworkStats);
extern int NET_ISO9141_KW2K_3;
void NET_ISO9141_KW2K_3_ClearStats();
void NET_ISO9141_KW2K_3_GetStats(NetworkStats * p_NetworkStats);
extern int NET_ISO9141_KW2K_4;
void NET_ISO9141_KW2K_4_ClearStats();
void NET_ISO9141_KW2K_4_GetStats(NetworkStats * p_NetworkStats);
extern int NET_HS_CAN4;
void NET_HS_CAN4_ClearStats();
void NET_HS_CAN4_GetStats(NetworkStats * p_NetworkStats);
extern int NET_HS_CAN5;
void NET_HS_CAN5_ClearStats();
void NET_HS_CAN5_GetStats(NetworkStats * p_NetworkStats);
extern int NET_FSA;
void NET_FSA_ClearStats();
void NET_FSA_GetStats(NetworkStats * p_NetworkStats);
extern int NET_TCP;
void NET_TCP_ClearStats();
void NET_TCP_GetStats(NetworkStats * p_NetworkStats);
extern int NET_UDP;
void NET_UDP_ClearStats();
void NET_UDP_GetStats(NetworkStats * p_NetworkStats);
extern int NET_AUTOSAR;
void NET_AUTOSAR_ClearStats();
void NET_AUTOSAR_GetStats(NetworkStats * p_NetworkStats);

void SpyAppSig_CallAllHandlers();

// Application Signals
extern int AS_MASK_Index; // sig0
#define AS_MASK_Get() AS_Get(AS_MASK_Index)
#define AS_MASK_Set(dValue) AS_Set(AS_MASK_Index, dValue)

extern int AS_Received_key_Index; // sig1
#define AS_Received_key_Get() AS_Get(AS_Received_key_Index)
#define AS_Received_key_Set(dValue) AS_Set(AS_Received_key_Index, dValue)

extern int AS_Send_key_Index; // sig2
#define AS_Send_key_Get() AS_Get(AS_Send_key_Index)
#define AS_Send_key_Set(dValue) AS_Set(AS_Send_key_Index, dValue)

extern int AS____Index; // sig3
#define AS____Get() AS_Get(AS____Index)
#define AS____Set(dValue) AS_Set(AS____Index, dValue)

extern int AS____sig4_Index; // sig4
#define AS____sig4_Get() AS_Get(AS____sig4_Index)
#define AS____sig4_Set(dValue) AS_Set(AS____sig4_Index, dValue)

extern int AS____sig5_Index; // sig5
#define AS____sig5_Get() AS_Get(AS____sig5_Index)
#define AS____sig5_Set(dValue) AS_Set(AS____sig5_Index, dValue)

extern int AS____sig6_Index; // sig6
#define AS____sig6_Get() AS_Get(AS____sig6_Index)
#define AS____sig6_Set(dValue) AS_Set(AS____sig6_Index, dValue)

extern int AS____sig7_Index; // sig7
#define AS____sig7_Get() AS_Get(AS____sig7_Index)
#define AS____sig7_Set(dValue) AS_Set(AS____sig7_Index, dValue)

extern int AS____sig8_Index; // sig8
#define AS____sig8_Get() AS_Get(AS____sig8_Index)
#define AS____sig8_Set(dValue) AS_Set(AS____sig8_Index, dValue)

extern int AS____sig9_Index; // sig9
#define AS____sig9_Get() AS_Get(AS____sig9_Index)
#define AS____sig9_Set(dValue) AS_Set(AS____sig9_Index, dValue)

extern int AS____sig10_Index; // sig10
#define AS____sig10_Get() AS_Get(AS____sig10_Index)
#define AS____sig10_Set(dValue) AS_Set(AS____sig10_Index, dValue)

extern int AS_Return_Index; // sig13
#define AS_Return_Get() AS_Get(AS_Return_Index)
#define AS_Return_Set(dValue) AS_Set(AS_Return_Index, dValue)

extern int AS_____Index; // sig47
#define AS_____Get() AS_Get(AS_____Index)
#define AS_____Set(dValue) AS_Set(AS_____Index, dValue)

extern int AS_____sig48_Index; // sig48
#define AS_____sig48_Get() AS_Get(AS_____sig48_Index)
#define AS_____sig48_Set(dValue) AS_Set(AS_____sig48_Index, dValue)

extern int AS____sig49_Index; // sig49
#define AS____sig49_Get() AS_Get(AS____sig49_Index)
#define AS____sig49_Set(dValue) AS_Set(AS____sig49_Index, dValue)

extern int AS______Index; // sig50
#define AS______Get() AS_Get(AS______Index)
#define AS______Set(dValue) AS_Set(AS______Index, dValue)

extern int AS____sig51_Index; // sig51
#define AS____sig51_Get() AS_Get(AS____sig51_Index)
#define AS____sig51_Set(dValue) AS_Set(AS____sig51_Index, dValue)

extern int AS_______Index; // sig52
#define AS_______Get() AS_Get(AS_______Index)
#define AS_______Set(dValue) AS_Set(AS_______Index, dValue)

extern int AS_PAS_Index; // sig53
#define AS_PAS_Get() AS_Get(AS_PAS_Index)
#define AS_PAS_Set(dValue) AS_Set(AS_PAS_Index, dValue)

extern int AS_____sig54_Index; // sig54
#define AS_____sig54_Get() AS_Get(AS_____sig54_Index)
#define AS_____sig54_Set(dValue) AS_Set(AS_____sig54_Index, dValue)

extern int AS_____sig55_Index; // sig55
#define AS_____sig55_Get() AS_Get(AS_____sig55_Index)
#define AS_____sig55_Set(dValue) AS_Set(AS_____sig55_Index, dValue)

extern int AS_____sig56_Index; // sig56
#define AS_____sig56_Get() AS_Get(AS_____sig56_Index)
#define AS_____sig56_Set(dValue) AS_Set(AS_____sig56_Index, dValue)

extern int AS_____sig57_Index; // sig57
#define AS_____sig57_Get() AS_Get(AS_____sig57_Index)
#define AS_____sig57_Set(dValue) AS_Set(AS_____sig57_Index, dValue)

extern int AS_____sig58_Index; // sig58
#define AS_____sig58_Get() AS_Get(AS_____sig58_Index)
#define AS_____sig58_Set(dValue) AS_Set(AS_____sig58_Index, dValue)

extern int AS_P__Index; // sig59
#define AS_P__Get() AS_Get(AS_P__Index)
#define AS_P__Set(dValue) AS_Set(AS_P__Index, dValue)

extern int AS_D__Index; // sig60
#define AS_D__Get() AS_Get(AS_D__Index)
#define AS_D__Set(dValue) AS_Set(AS_D__Index, dValue)

extern int AS_R__Index; // sig61
#define AS_R__Get() AS_Get(AS_R__Index)
#define AS_R__Set(dValue) AS_Set(AS_R__Index, dValue)

extern int AS_N__Index; // sig62
#define AS_N__Get() AS_Get(AS_N__Index)
#define AS_N__Set(dValue) AS_Set(AS_N__Index, dValue)

extern int AS_________Index; // sig63
#define AS_________Get() AS_Get(AS_________Index)
#define AS_________Set(dValue) AS_Set(AS_________Index, dValue)

extern int AS________Index; // sig64
#define AS________Get() AS_Get(AS________Index)
#define AS________Set(dValue) AS_Set(AS________Index, dValue)

extern int AS_HUT6_send_flag_Index; // sig65
#define AS_HUT6_send_flag_Get() AS_Get(AS_HUT6_send_flag_Index)
#define AS_HUT6_send_flag_Set(dValue) AS_Set(AS_HUT6_send_flag_Index, dValue)

extern int AS_pre______Index; // sig66
#define AS_pre______Get() AS_Get(AS_pre______Index)
#define AS_pre______Set(dValue) AS_Set(AS_pre______Index, dValue)

extern int AS_pre____Index; // sig67
#define AS_pre____Get() AS_Get(AS_pre____Index)
#define AS_pre____Set(dValue) AS_Set(AS_pre____Index, dValue)

extern int AS_pre_______Index; // sig68
#define AS_pre_______Get() AS_Get(AS_pre_______Index)
#define AS_pre_______Set(dValue) AS_Set(AS_pre_______Index, dValue)

extern int AS________sig70_Index; // sig70
#define AS________sig70_Get() AS_Get(AS________sig70_Index)
#define AS________sig70_Set(dValue) AS_Set(AS________sig70_Index, dValue)

extern int AS_180__Index; // sig71
#define AS_180__Get() AS_Get(AS_180__Index)
#define AS_180__Set(dValue) AS_Set(AS_180__Index, dValue)

extern int AS______sig72_Index; // sig72
#define AS______sig72_Get() AS_Get(AS______sig72_Index)
#define AS______sig72_Set(dValue) AS_Set(AS______sig72_Index, dValue)

extern int AS_________sig76_Index; // sig76
#define AS_________sig76_Get() AS_Get(AS_________sig76_Index)
#define AS_________sig76_Set(dValue) AS_Set(AS_________sig76_Index, dValue)

extern int AS________sig82_Index; // sig82
#define AS________sig82_Get() AS_Get(AS________sig82_Index)
#define AS________sig82_Set(dValue) AS_Set(AS________sig82_Index, dValue)

extern int AS________sig83_Index; // sig83
#define AS________sig83_Get() AS_Get(AS________sig83_Index)
#define AS________sig83_Set(dValue) AS_Set(AS________sig83_Index, dValue)

extern int AS______sig84_Index; // sig84
#define AS______sig84_Get() AS_Get(AS______sig84_Index)
#define AS______sig84_Set(dValue) AS_Set(AS______sig84_Index, dValue)

extern int AS______sig85_Index; // sig85
#define AS______sig85_Get() AS_Get(AS______sig85_Index)
#define AS______sig85_Set(dValue) AS_Set(AS______sig85_Index, dValue)

extern int AS_Pre______Index; // sig86
#define AS_Pre______Get() AS_Get(AS_Pre______Index)
#define AS_Pre______Set(dValue) AS_Set(AS_Pre______Index, dValue)

extern int AS_Pre______sig87_Index; // sig87
#define AS_Pre______sig87_Get() AS_Get(AS_Pre______sig87_Index)
#define AS_Pre______sig87_Set(dValue) AS_Set(AS_Pre______sig87_Index, dValue)

extern int AS_Pre_______Index; // sig90
#define AS_Pre_______Get() AS_Get(AS_Pre_______Index)
#define AS_Pre_______Set(dValue) AS_Set(AS_Pre_______Index, dValue)

extern int AS_______sig91_Index; // sig91
#define AS_______sig91_Get() AS_Get(AS_______sig91_Index)
#define AS_______sig91_Set(dValue) AS_Set(AS_______sig91_Index, dValue)

extern int AS_Pre___AVM_____Index; // sig92
#define AS_Pre___AVM_____Get() AS_Get(AS_Pre___AVM_____Index)
#define AS_Pre___AVM_____Set(dValue) AS_Set(AS_Pre___AVM_____Index, dValue)

extern int AS___AVM_____Index; // sig93
#define AS___AVM_____Get() AS_Get(AS___AVM_____Index)
#define AS___AVM_____Set(dValue) AS_Set(AS___AVM_____Index, dValue)

extern int AS_Pre_RPA_Index; // sig98
#define AS_Pre_RPA_Get() AS_Get(AS_Pre_RPA_Index)
#define AS_Pre_RPA_Set(dValue) AS_Set(AS_Pre_RPA_Index, dValue)

extern int AS_Pre_UPA_Index; // sig99
#define AS_Pre_UPA_Get() AS_Get(AS_Pre_UPA_Index)
#define AS_Pre_UPA_Set(dValue) AS_Set(AS_Pre_UPA_Index, dValue)

extern int AS_Pre_APA_Index; // sig100
#define AS_Pre_APA_Get() AS_Get(AS_Pre_APA_Index)
#define AS_Pre_APA_Set(dValue) AS_Set(AS_Pre_APA_Index, dValue)

extern int AS_RPA_Index; // sig101
#define AS_RPA_Get() AS_Get(AS_RPA_Index)
#define AS_RPA_Set(dValue) AS_Set(AS_RPA_Index, dValue)

extern int AS_UPA_Index; // sig102
#define AS_UPA_Get() AS_Get(AS_UPA_Index)
#define AS_UPA_Set(dValue) AS_Set(AS_UPA_Index, dValue)

extern int AS_APA_Index; // sig103
#define AS_APA_Get() AS_Get(AS_APA_Index)
#define AS_APA_Set(dValue) AS_Set(AS_APA_Index, dValue)

extern int AS_Pre___AVM____Index; // sig104
#define AS_Pre___AVM____Get() AS_Get(AS_Pre___AVM____Index)
#define AS_Pre___AVM____Set(dValue) AS_Set(AS_Pre___AVM____Index, dValue)

extern int AS___AVM____Index; // sig105
#define AS___AVM____Get() AS_Get(AS___AVM____Index)
#define AS___AVM____Set(dValue) AS_Set(AS___AVM____Index, dValue)

extern int AS_Pre___DTC_Index; // sig106
#define AS_Pre___DTC_Get() AS_Get(AS_Pre___DTC_Index)
#define AS_Pre___DTC_Set(dValue) AS_Set(AS_Pre___DTC_Index, dValue)

extern int AS___DTC_Index; // sig107
#define AS___DTC_Get() AS_Get(AS___DTC_Index)
#define AS___DTC_Set(dValue) AS_Set(AS___DTC_Index, dValue)

extern int AS_________sig108_Index; // sig108
#define AS_________sig108_Get() AS_Get(AS_________sig108_Index)
#define AS_________sig108_Set(dValue) AS_Set(AS_________sig108_Index, dValue)

extern int AS___________Index; // sig109
#define AS___________Get() AS_Get(AS___________Index)
#define AS___________Set(dValue) AS_Set(AS___________Index, dValue)

extern int AS___________sig110_Index; // sig110
#define AS___________sig110_Get() AS_Get(AS___________sig110_Index)
#define AS___________sig110_Set(dValue) AS_Set(AS___________sig110_Index, dValue)

extern int AS_________sig111_Index; // sig111
#define AS_________sig111_Get() AS_Get(AS_________sig111_Index)
#define AS_________sig111_Set(dValue) AS_Set(AS_________sig111_Index, dValue)

extern int AS_Pre___________Index; // sig112
#define AS_Pre___________Get() AS_Get(AS_Pre___________Index)
#define AS_Pre___________Set(dValue) AS_Set(AS_Pre___________Index, dValue)

extern int AS_Pre___________sig113_Index; // sig113
#define AS_Pre___________sig113_Get() AS_Get(AS_Pre___________sig113_Index)
#define AS_Pre___________sig113_Set(dValue) AS_Set(AS_Pre___________sig113_Index, dValue)

extern int AS_Pre_________Index; // sig114
#define AS_Pre_________Get() AS_Get(AS_Pre_________Index)
#define AS_Pre_________Set(dValue) AS_Set(AS_Pre_________Index, dValue)

extern int AS_________sig115_Index; // sig115
#define AS_________sig115_Get() AS_Get(AS_________sig115_Index)
#define AS_________sig115_Set(dValue) AS_Set(AS_________sig115_Index, dValue)

extern int AS_________sig116_Index; // sig116
#define AS_________sig116_Get() AS_Get(AS_________sig116_Index)
#define AS_________sig116_Set(dValue) AS_Set(AS_________sig116_Index, dValue)

extern int AS_________sig117_Index; // sig117
#define AS_________sig117_Get() AS_Get(AS_________sig117_Index)
#define AS_________sig117_Set(dValue) AS_Set(AS_________sig117_Index, dValue)

extern int AS_________sig118_Index; // sig118
#define AS_________sig118_Get() AS_Get(AS_________sig118_Index)
#define AS_________sig118_Set(dValue) AS_Set(AS_________sig118_Index, dValue)

extern int AS_Pre_________sig119_Index; // sig119
#define AS_Pre_________sig119_Get() AS_Get(AS_Pre_________sig119_Index)
#define AS_Pre_________sig119_Set(dValue) AS_Set(AS_Pre_________sig119_Index, dValue)

extern int AS_Pre_________sig120_Index; // sig120
#define AS_Pre_________sig120_Get() AS_Get(AS_Pre_________sig120_Index)
#define AS_Pre_________sig120_Set(dValue) AS_Set(AS_Pre_________sig120_Index, dValue)

extern int AS_Pre_________sig121_Index; // sig121
#define AS_Pre_________sig121_Get() AS_Get(AS_Pre_________sig121_Index)
#define AS_Pre_________sig121_Set(dValue) AS_Set(AS_Pre_________sig121_Index, dValue)

extern int AS_Pre_________sig122_Index; // sig122
#define AS_Pre_________sig122_Get() AS_Get(AS_Pre_________sig122_Index)
#define AS_Pre_________sig122_Set(dValue) AS_Set(AS_Pre_________sig122_Index, dValue)

extern int AS______sig123_Index; // sig123
#pragma warning(disable : 4005)
#define AS______sig123_$$_CHB037 0
#define AS______sig123_$$_CHB027 1
#define AS______sig123_$$_CHK041 2
#define AS______sig123_$$_CHB125 3
#define AS______sig123_$$_CHB041 4
#define AS______sig123_$$_P3011E 5
#define AS______sig123_$$_P3012 6
#pragma warning(default : 4005)
#define AS______sig123_Get() AS_Get(AS______sig123_Index)
#define AS______sig123_Set(dValue) AS_Set(AS______sig123_Index, dValue)

extern int AS_________sig124_Index; // sig124
#pragma warning(disable : 4005)
#define AS_________sig124_$$_RPA 0
#define AS_________sig124_$$_UPA 1
#define AS_________sig124_$$_APA 2
#pragma warning(default : 4005)
#define AS_________sig124_Get() AS_Get(AS_________sig124_Index)
#define AS_________sig124_Set(dValue) AS_Set(AS_________sig124_Index, dValue)

extern int AS_Pre______sig125_Index; // sig125
#pragma warning(disable : 4005)
#pragma warning(default : 4005)
#define AS_Pre______sig125_Get() AS_Get(AS_Pre______sig125_Index)
#define AS_Pre______sig125_Set(dValue) AS_Set(AS_Pre______sig125_Index, dValue)

extern int AS________sig126_Index; // sig126
#define AS________sig126_Get() AS_Get(AS________sig126_Index)
#define AS________sig126_Set(dValue) AS_Set(AS________sig126_Index, dValue)

extern int AS________sig127_Index; // sig127
#define AS________sig127_Get() AS_Get(AS________sig127_Index)
#define AS________sig127_Set(dValue) AS_Set(AS________sig127_Index, dValue)

extern int AS_Pre________Index; // sig128
#define AS_Pre________Get() AS_Get(AS_Pre________Index)
#define AS_Pre________Set(dValue) AS_Set(AS_Pre________Index, dValue)

extern int AS_Pre________sig129_Index; // sig129
#define AS_Pre________sig129_Get() AS_Get(AS_Pre________sig129_Index)
#define AS_Pre________sig129_Set(dValue) AS_Set(AS_Pre________sig129_Index, dValue)

extern int AS________sig130_Index; // sig130
#define AS________sig130_Get() AS_Get(AS________sig130_Index)
#define AS________sig130_Set(dValue) AS_Set(AS________sig130_Index, dValue)

extern int AS_______sig131_Index; // sig131
#define AS_______sig131_Get() AS_Get(AS_______sig131_Index)
#define AS_______sig131_Set(dValue) AS_Set(AS_______sig131_Index, dValue)

extern int AS_________sig133_Index; // sig133
#pragma warning(disable : 4005)
#define AS_________sig133_$$____ 0
#define AS_________sig133_$$___ 1
#pragma warning(default : 4005)
#define AS_________sig133_Get() AS_Get(AS_________sig133_Index)
#define AS_________sig133_Set(dValue) AS_Set(AS_________sig133_Index, dValue)

extern int AS_________sig135_Index; // sig135
#pragma warning(disable : 4005)
#define AS_________sig135_$$____ 0
#define AS_________sig135_$$_____ 1
#define AS_________sig135_$$___ 2
#define AS_________sig135_$$______ 3
#pragma warning(default : 4005)
#define AS_________sig135_Get() AS_Get(AS_________sig135_Index)
#define AS_________sig135_Set(dValue) AS_Set(AS_________sig135_Index, dValue)

extern int AS___IO____Index; // sig137
#define AS___IO____Get() AS_Get(AS___IO____Index)
#define AS___IO____Set(dValue) AS_Set(AS___IO____Index, dValue)

extern int AS_Pre___IO____Index; // sig138
#define AS_Pre___IO____Get() AS_Get(AS_Pre___IO____Index)
#define AS_Pre___IO____Set(dValue) AS_Set(AS_Pre___IO____Index, dValue)

extern int AS_IO________Index; // sig139
#define AS_IO________Get() AS_Get(AS_IO________Index)
#define AS_IO________Set(dValue) AS_Set(AS_IO________Index, dValue)

extern int AS_Pre_IO________Index; // sig140
#define AS_Pre_IO________Get() AS_Get(AS_Pre_IO________Index)
#define AS_Pre_IO________Set(dValue) AS_Set(AS_Pre_IO________Index, dValue)

extern int AS_IO________sig141_Index; // sig141
#define AS_IO________sig141_Get() AS_Get(AS_IO________sig141_Index)
#define AS_IO________sig141_Set(dValue) AS_Set(AS_IO________sig141_Index, dValue)

extern int AS_IO________sig142_Index; // sig142
#define AS_IO________sig142_Get() AS_Get(AS_IO________sig142_Index)
#define AS_IO________sig142_Set(dValue) AS_Set(AS_IO________sig142_Index, dValue)

extern int AS_IO________sig143_Index; // sig143
#define AS_IO________sig143_Get() AS_Get(AS_IO________sig143_Index)
#define AS_IO________sig143_Set(dValue) AS_Set(AS_IO________sig143_Index, dValue)

extern int AS_Pre_IO________sig144_Index; // sig144
#define AS_Pre_IO________sig144_Get() AS_Get(AS_Pre_IO________sig144_Index)
#define AS_Pre_IO________sig144_Set(dValue) AS_Set(AS_Pre_IO________sig144_Index, dValue)

extern int AS_Pre_IO________sig145_Index; // sig145
#define AS_Pre_IO________sig145_Get() AS_Get(AS_Pre_IO________sig145_Index)
#define AS_Pre_IO________sig145_Set(dValue) AS_Set(AS_Pre_IO________sig145_Index, dValue)

extern int AS_Pre_IO________sig146_Index; // sig146
#define AS_Pre_IO________sig146_Get() AS_Get(AS_Pre_IO________sig146_Index)
#define AS_Pre_IO________sig146_Set(dValue) AS_Set(AS_Pre_IO________sig146_Index, dValue)

extern int AS___DTC_sig147_Index; // sig147
#define AS___DTC_sig147_Get() AS_Get(AS___DTC_sig147_Index)
#define AS___DTC_sig147_Set(dValue) AS_Set(AS___DTC_sig147_Index, dValue)

extern int AS_VchSpd__Index; // sig148
#define AS_VchSpd__Get() AS_Get(AS_VchSpd__Index)
#define AS_VchSpd__Set(dValue) AS_Set(AS_VchSpd__Index, dValue)

extern int AS_VchSpd__sig149_Index; // sig149
#define AS_VchSpd__sig149_Get() AS_Get(AS_VchSpd__sig149_Index)
#define AS_VchSpd__sig149_Set(dValue) AS_Set(AS_VchSpd__sig149_Index, dValue)

extern int AS_____sig150_Index; // sig150
#define AS_____sig150_Get() AS_Get(AS_____sig150_Index)
#define AS_____sig150_Set(dValue) AS_Set(AS_____sig150_Index, dValue)

extern int AS_____sig151_Index; // sig151
#define AS_____sig151_Get() AS_Get(AS_____sig151_Index)
#define AS_____sig151_Set(dValue) AS_Set(AS_____sig151_Index, dValue)

extern int AS_Pre_VchSpd__Index; // sig152
#define AS_Pre_VchSpd__Get() AS_Get(AS_Pre_VchSpd__Index)
#define AS_Pre_VchSpd__Set(dValue) AS_Set(AS_Pre_VchSpd__Index, dValue)

extern int AS_Pre_VchSpd__sig153_Index; // sig153
#define AS_Pre_VchSpd__sig153_Get() AS_Get(AS_Pre_VchSpd__sig153_Index)
#define AS_Pre_VchSpd__sig153_Set(dValue) AS_Set(AS_Pre_VchSpd__sig153_Index, dValue)

extern int AS________sig154_Index; // sig154
#define AS________sig154_Get() AS_Get(AS________sig154_Index)
#define AS________sig154_Set(dValue) AS_Set(AS________sig154_Index, dValue)

extern int AS________sig155_Index; // sig155
#define AS________sig155_Get() AS_Get(AS________sig155_Index)
#define AS________sig155_Set(dValue) AS_Set(AS________sig155_Index, dValue)

extern int AS_______sig156_Index; // sig156
#define AS_______sig156_Get() AS_Get(AS_______sig156_Index)
#define AS_______sig156_Set(dValue) AS_Set(AS_______sig156_Index, dValue)

extern int AS_PAS_______Index; // sig157
#define AS_PAS_______Get() AS_Get(AS_PAS_______Index)
#define AS_PAS_______Set(dValue) AS_Set(AS_PAS_______Index, dValue)

extern int AS_________sig158_Index; // sig158
#define AS_________sig158_Get() AS_Get(AS_________sig158_Index)
#define AS_________sig158_Set(dValue) AS_Set(AS_________sig158_Index, dValue)

extern int AS_CCO_____Index; // sig160
#define AS_CCO_____Get() AS_Get(AS_CCO_____Index)
#define AS_CCO_____Set(dValue) AS_Set(AS_CCO_____Index, dValue)

extern int AS________sig161_Index; // sig161
#define AS________sig161_Get() AS_Get(AS________sig161_Index)
#define AS________sig161_Set(dValue) AS_Set(AS________sig161_Index, dValue)

extern int AS_CSA_____Index; // sig162
#define AS_CSA_____Get() AS_Get(AS_CSA_____Index)
#define AS_CSA_____Set(dValue) AS_Set(AS_CSA_____Index, dValue)

extern int AS__AD____Index; // sig163
#define AS__AD____Get() AS_Get(AS__AD____Index)
#define AS__AD____Set(dValue) AS_Set(AS__AD____Index, dValue)

extern int AS_IO_________Index; // sig164
#define AS_IO_________Get() AS_Get(AS_IO_________Index)
#define AS_IO_________Set(dValue) AS_Set(AS_IO_________Index, dValue)

extern int AS_Pre_IO_________Index; // sig165
#define AS_Pre_IO_________Get() AS_Get(AS_Pre_IO_________Index)
#define AS_Pre_IO_________Set(dValue) AS_Set(AS_Pre_IO_________Index, dValue)

extern int AS__AVM1__Index; // sig166
#define AS__AVM1__Get() AS_Get(AS__AVM1__Index)
#define AS__AVM1__Set(dValue) AS_Set(AS__AVM1__Index, dValue)

extern int AS______sig167_Index; // sig167
#pragma warning(disable : 4005)
#define AS______sig167_$$___ 0
#define AS______sig167_$$____HUT 1
#define AS______sig167_$$___ 2
#define AS______sig167_$$____HUT 3
#pragma warning(default : 4005)
#define AS______sig167_Get() AS_Get(AS______sig167_Index)
#define AS______sig167_Set(dValue) AS_Set(AS______sig167_Index, dValue)

extern int AS__________Index; // sig168
#define AS__________Get() AS_Get(AS__________Index)
#define AS__________Set(dValue) AS_Set(AS__________Index, dValue)

extern int AS________sig169_Index; // sig169
#define AS________sig169_Get() AS_Get(AS________sig169_Index)
#define AS________sig169_Set(dValue) AS_Set(AS________sig169_Index, dValue)

extern int AS________sig171_Index; // sig171
#define AS________sig171_Get() AS_Get(AS________sig171_Index)
#define AS________sig171_Set(dValue) AS_Set(AS________sig171_Index, dValue)

extern int AS________sig173_Index; // sig173
#define AS________sig173_Get() AS_Get(AS________sig173_Index)
#define AS________sig173_Set(dValue) AS_Set(AS________sig173_Index, dValue)

extern int AS________sig176_Index; // sig176
#define AS________sig176_Get() AS_Get(AS________sig176_Index)
#define AS________sig176_Set(dValue) AS_Set(AS________sig176_Index, dValue)

extern int AS_______sig177_Index; // sig177
#define AS_______sig177_Get() AS_Get(AS_______sig177_Index)
#define AS_______sig177_Set(dValue) AS_Set(AS_______sig177_Index, dValue)

extern int AS_MOD___Index; // sig178
#define AS_MOD___Get() AS_Get(AS_MOD___Index)
#define AS_MOD___Set(dValue) AS_Set(AS_MOD___Index, dValue)

extern int AS_X____Index; // sig179
#define AS_X____Get() AS_Get(AS_X____Index)
#define AS_X____Set(dValue) AS_Set(AS_X____Index, dValue)

extern int AS_X____sig180_Index; // sig180
#define AS_X____sig180_Get() AS_Get(AS_X____sig180_Index)
#define AS_X____sig180_Set(dValue) AS_Set(AS_X____sig180_Index, dValue)

extern int AS_Y____Index; // sig181
#define AS_Y____Get() AS_Get(AS_Y____Index)
#define AS_Y____Set(dValue) AS_Set(AS_Y____Index, dValue)

extern int AS_Y____sig182_Index; // sig182
#define AS_Y____sig182_Get() AS_Get(AS_Y____sig182_Index)
#define AS_Y____sig182_Set(dValue) AS_Set(AS_Y____sig182_Index, dValue)

extern int AS_X____sig187_Index; // sig187
#define AS_X____sig187_Get() AS_Get(AS_X____sig187_Index)
#define AS_X____sig187_Set(dValue) AS_Set(AS_X____sig187_Index, dValue)

extern int AS_Y____sig188_Index; // sig188
#define AS_Y____sig188_Get() AS_Get(AS_Y____sig188_Index)
#define AS_Y____sig188_Set(dValue) AS_Set(AS_Y____sig188_Index, dValue)

extern int AS_Slot1_Select_Index; // sig190
#define AS_Slot1_Select_Get() AS_Get(AS_Slot1_Select_Index)
#define AS_Slot1_Select_Set(dValue) AS_Set(AS_Slot1_Select_Index, dValue)

extern int AS_Slot2_Select_Index; // sig192
#define AS_Slot2_Select_Get() AS_Get(AS_Slot2_Select_Index)
#define AS_Slot2_Select_Set(dValue) AS_Set(AS_Slot2_Select_Index, dValue)

extern int AS_Slot3_Select_Index; // sig194
#define AS_Slot3_Select_Get() AS_Get(AS_Slot3_Select_Index)
#define AS_Slot3_Select_Set(dValue) AS_Set(AS_Slot3_Select_Index, dValue)

extern int AS_Slot4_Select_Index; // sig196
#define AS_Slot4_Select_Get() AS_Get(AS_Slot4_Select_Index)
#define AS_Slot4_Select_Set(dValue) AS_Set(AS_Slot4_Select_Index, dValue)

extern int AS_Slot5_Select_Index; // sig198
#define AS_Slot5_Select_Get() AS_Get(AS_Slot5_Select_Index)
#define AS_Slot5_Select_Set(dValue) AS_Set(AS_Slot5_Select_Index, dValue)

extern int AS_Slot6_Select_Index; // sig200
#define AS_Slot6_Select_Get() AS_Get(AS_Slot6_Select_Index)
#define AS_Slot6_Select_Set(dValue) AS_Set(AS_Slot6_Select_Index, dValue)

extern int AS______sig201_Index; // sig201
#define AS______sig201_Get() AS_Get(AS______sig201_Index)
#define AS______sig201_Set(dValue) AS_Set(AS______sig201_Index, dValue)

extern int AS________sig202_Index; // sig202
#define AS________sig202_Get() AS_Get(AS________sig202_Index)
#define AS________sig202_Set(dValue) AS_Set(AS________sig202_Index, dValue)

extern int AS_Pre_X____Index; // sig203
#define AS_Pre_X____Get() AS_Get(AS_Pre_X____Index)
#define AS_Pre_X____Set(dValue) AS_Set(AS_Pre_X____Index, dValue)

extern int AS_Pre_X____sig204_Index; // sig204
#define AS_Pre_X____sig204_Get() AS_Get(AS_Pre_X____sig204_Index)
#define AS_Pre_X____sig204_Set(dValue) AS_Set(AS_Pre_X____sig204_Index, dValue)

extern int AS_Pre_Y____Index; // sig205
#define AS_Pre_Y____Get() AS_Get(AS_Pre_Y____Index)
#define AS_Pre_Y____Set(dValue) AS_Set(AS_Pre_Y____Index, dValue)

extern int AS_Pre_Y____sig206_Index; // sig206
#define AS_Pre_Y____sig206_Get() AS_Get(AS_Pre_Y____sig206_Index)
#define AS_Pre_Y____sig206_Set(dValue) AS_Set(AS_Pre_Y____sig206_Index, dValue)

extern int AS________sig207_Index; // sig207
#define AS________sig207_Get() AS_Get(AS________sig207_Index)
#define AS________sig207_Set(dValue) AS_Set(AS________sig207_Index, dValue)

extern int AS_X______Index; // sig208
#define AS_X______Get() AS_Get(AS_X______Index)
#define AS_X______Set(dValue) AS_Set(AS_X______Index, dValue)

extern int AS_Y______Index; // sig209
#define AS_Y______Get() AS_Get(AS_Y______Index)
#define AS_Y______Set(dValue) AS_Set(AS_Y______Index, dValue)

extern int AS______sig210_Index; // sig210
#define AS______sig210_Get() AS_Get(AS______sig210_Index)
#define AS______sig210_Set(dValue) AS_Set(AS______sig210_Index, dValue)

extern int AS_HUT15_SendFlag_Index; // sig211
#define AS_HUT15_SendFlag_Get() AS_Get(AS_HUT15_SendFlag_Index)
#define AS_HUT15_SendFlag_Set(dValue) AS_Set(AS_HUT15_SendFlag_Index, dValue)

extern int AS______sig212_Index; // sig212
#define AS______sig212_Get() AS_Get(AS______sig212_Index)
#define AS______sig212_Set(dValue) AS_Set(AS______sig212_Index, dValue)

extern int AS_DVR___Index; // sig213
#define AS_DVR___Get() AS_Get(AS_DVR___Index)
#define AS_DVR___Set(dValue) AS_Set(AS_DVR___Index, dValue)

extern int AS______sig214_Index; // sig214
#pragma warning(disable : 4005)
#define AS______sig214_$$_OFF 0
#define AS______sig214_$$_ACC 1
#define AS______sig214_$$_RUN 2
#define AS______sig214_$$_CRANK 3
#pragma warning(default : 4005)
#define AS______sig214_Get() AS_Get(AS______sig214_Index)
#define AS______sig214_Set(dValue) AS_Set(AS______sig214_Index, dValue)

extern int AS_____sig215_Index; // sig215
#define AS_____sig215_Get() AS_Get(AS_____sig215_Index)
#define AS_____sig215_Set(dValue) AS_Set(AS_____sig215_Index, dValue)

extern int AS_____sig216_Index; // sig216
#define AS_____sig216_Get() AS_Get(AS_____sig216_Index)
#define AS_____sig216_Set(dValue) AS_Set(AS_____sig216_Index, dValue)

extern int AS_____sig217_Index; // sig217
#pragma warning(disable : 4005)
#define AS_____sig217_$$_TurnLamp_Off 0
#define AS_____sig217_$$_TurnLamp_LeftOn 1
#define AS_____sig217_$$_TurnLamp_RightOn 2
#define AS_____sig217_$$_TurnLamp_LeftRightOn 3
#pragma warning(default : 4005)
#define AS_____sig217_Get() AS_Get(AS_____sig217_Index)
#define AS_____sig217_Set(dValue) AS_Set(AS_____sig217_Index, dValue)

extern int AS______sig218_Index; // sig218
#define AS______sig218_Get() AS_Get(AS______sig218_Index)
#define AS______sig218_Set(dValue) AS_Set(AS______sig218_Index, dValue)

extern int AS______sig219_Index; // sig219
#define AS______sig219_Get() AS_Get(AS______sig219_Index)
#define AS______sig219_Set(dValue) AS_Set(AS______sig219_Index, dValue)

extern int AS_____sig220_Index; // sig220
#define AS_____sig220_Get() AS_Get(AS_____sig220_Index)
#define AS_____sig220_Set(dValue) AS_Set(AS_____sig220_Index, dValue)

extern int AS_______sig222_Index; // sig222
#define AS_______sig222_Get() AS_Get(AS_______sig222_Index)
#define AS_______sig222_Set(dValue) AS_Set(AS_______sig222_Index, dValue)

extern int AS_______sig223_Index; // sig223
#define AS_______sig223_Get() AS_Get(AS_______sig223_Index)
#define AS_______sig223_Set(dValue) AS_Set(AS_______sig223_Index, dValue)

extern int AS______sig224_Index; // sig224
#define AS______sig224_Get() AS_Get(AS______sig224_Index)
#define AS______sig224_Set(dValue) AS_Set(AS______sig224_Index, dValue)

extern int AS________sig225_Index; // sig225
#define AS________sig225_Get() AS_Get(AS________sig225_Index)
#define AS________sig225_Set(dValue) AS_Set(AS________sig225_Index, dValue)

extern int AS______sig226_Index; // sig226
#define AS______sig226_Get() AS_Get(AS______sig226_Index)
#define AS______sig226_Set(dValue) AS_Set(AS______sig226_Index, dValue)

extern int AS_____sig227_Index; // sig227
#define AS_____sig227_Get() AS_Get(AS_____sig227_Index)
#define AS_____sig227_Set(dValue) AS_Set(AS_____sig227_Index, dValue)

extern int AS_____sig228_Index; // sig228
#define AS_____sig228_Get() AS_Get(AS_____sig228_Index)
#define AS_____sig228_Set(dValue) AS_Set(AS_____sig228_Index, dValue)

extern int AS_____sig229_Index; // sig229
#define AS_____sig229_Get() AS_Get(AS_____sig229_Index)
#define AS_____sig229_Set(dValue) AS_Set(AS_____sig229_Index, dValue)

extern int AS_____sig230_Index; // sig230
#define AS_____sig230_Get() AS_Get(AS_____sig230_Index)
#define AS_____sig230_Set(dValue) AS_Set(AS_____sig230_Index, dValue)

extern int AS____sig231_Index; // sig231
#define AS____sig231_Get() AS_Get(AS____sig231_Index)
#define AS____sig231_Set(dValue) AS_Set(AS____sig231_Index, dValue)

extern int AS____sig232_Index; // sig232
#define AS____sig232_Get() AS_Get(AS____sig232_Index)
#define AS____sig232_Set(dValue) AS_Set(AS____sig232_Index, dValue)

extern int AS____sig233_Index; // sig233
#define AS____sig233_Get() AS_Get(AS____sig233_Index)
#define AS____sig233_Set(dValue) AS_Set(AS____sig233_Index, dValue)

extern int AS____sig234_Index; // sig234
#define AS____sig234_Get() AS_Get(AS____sig234_Index)
#define AS____sig234_Set(dValue) AS_Set(AS____sig234_Index, dValue)

extern int AS___1_Index; // sig235
#define AS___1_Get() AS_Get(AS___1_Index)
#define AS___1_Set(dValue) AS_Set(AS___1_Index, dValue)

extern int AS___2_Index; // sig236
#define AS___2_Get() AS_Get(AS___2_Index)
#define AS___2_Set(dValue) AS_Set(AS___2_Index, dValue)

extern int AS___3_Index; // sig237
#define AS___3_Get() AS_Get(AS___3_Index)
#define AS___3_Set(dValue) AS_Set(AS___3_Index, dValue)

extern int AS___4_Index; // sig238
#define AS___4_Get() AS_Get(AS___4_Index)
#define AS___4_Set(dValue) AS_Set(AS___4_Index, dValue)

extern int AS___5_Index; // sig239
#define AS___5_Get() AS_Get(AS___5_Index)
#define AS___5_Set(dValue) AS_Set(AS___5_Index, dValue)

extern int AS___6_Index; // sig240
#define AS___6_Get() AS_Get(AS___6_Index)
#define AS___6_Set(dValue) AS_Set(AS___6_Index, dValue)

extern int AS___7_Index; // sig241
#define AS___7_Get() AS_Get(AS___7_Index)
#define AS___7_Set(dValue) AS_Set(AS___7_Index, dValue)

extern int AS___8_Index; // sig242
#define AS___8_Get() AS_Get(AS___8_Index)
#define AS___8_Set(dValue) AS_Set(AS___8_Index, dValue)

extern int AS___9_Index; // sig243
#define AS___9_Get() AS_Get(AS___9_Index)
#define AS___9_Set(dValue) AS_Set(AS___9_Index, dValue)

extern int AS___10_Index; // sig244
#define AS___10_Get() AS_Get(AS___10_Index)
#define AS___10_Set(dValue) AS_Set(AS___10_Index, dValue)

extern int AS_Pre______sig245_Index; // sig245
#define AS_Pre______sig245_Get() AS_Get(AS_Pre______sig245_Index)
#define AS_Pre______sig245_Set(dValue) AS_Set(AS_Pre______sig245_Index, dValue)

extern int AS________sig247_Index; // sig247
#define AS________sig247_Get() AS_Get(AS________sig247_Index)
#define AS________sig247_Set(dValue) AS_Set(AS________sig247_Index, dValue)

extern int AS_________sig248_Index; // sig248
#define AS_________sig248_Get() AS_Get(AS_________sig248_Index)
#define AS_________sig248_Set(dValue) AS_Set(AS_________sig248_Index, dValue)

extern int AS________sig249_Index; // sig249
#define AS________sig249_Get() AS_Get(AS________sig249_Index)
#define AS________sig249_Set(dValue) AS_Set(AS________sig249_Index, dValue)

extern int AS_________sig250_Index; // sig250
#pragma warning(disable : 4005)
#define AS_________sig250_$$___ 0
#define AS_________sig250_$$_CHB027 1
#define AS_________sig250_$$_CHB037 2
#define AS_________sig250_$$_CHK041 3
#define AS_________sig250_$$_CHB071 4
#define AS_________sig250_$$_CHB031 5
#define AS_________sig250_$$_CHB022 6
#define AS_________sig250_$$_CH071 7
#define AS_________sig250_$$_CHB121 8
#define AS_________sig250_$$_CH171 9
#define AS_________sig250_$$_CH051X 10
#define AS_________sig250_$$_CH055X 11
#define AS_________sig250_$$_CHB131 12
#define AS_________sig250_$$_CHB121V 13
#define AS_________sig250_$$_CHB131B 14
#pragma warning(default : 4005)
#define AS_________sig250_Get() AS_Get(AS_________sig250_Index)
#define AS_________sig250_Set(dValue) AS_Set(AS_________sig250_Index, dValue)

extern int AS__________sig251_Index; // sig251
#pragma warning(disable : 4005)
#define AS__________sig251_$$_6MT 0
#define AS__________sig251_$$_6AT 1
#define AS__________sig251_$$_6DCT451 2
#define AS__________sig251_$$_9AT 3
#define AS__________sig251_$$_7DCT450 4
#define AS__________sig251_$$_7DCT300 5
#define AS__________sig251_$$_8AT 6
#define AS__________sig251_$$_7DCT300S 7
#pragma warning(default : 4005)
#define AS__________sig251_Get() AS_Get(AS__________sig251_Index)
#define AS__________sig251_Set(dValue) AS_Set(AS__________sig251_Index, dValue)

extern int AS_________sig252_Index; // sig252
#pragma warning(disable : 4005)
#define AS_________sig252_$$__4__ 0
#define AS_________sig252_$$__4__4__ 1
#define AS_________sig252_$$__________12__ 2
#pragma warning(default : 4005)
#define AS_________sig252_Get() AS_Get(AS_________sig252_Index)
#define AS_________sig252_Set(dValue) AS_Set(AS_________sig252_Index, dValue)

extern int AS_________sig253_Index; // sig253
#pragma warning(disable : 4005)
#define AS_________sig253_$$___ 0
#define AS_________sig253_$$___ 1
#pragma warning(default : 4005)
#define AS_________sig253_Get() AS_Get(AS_________sig253_Index)
#define AS_________sig253_Set(dValue) AS_Set(AS_________sig253_Index, dValue)

extern int AS__________sig254_Index; // sig254
#pragma warning(disable : 4005)
#define AS__________sig254_$$_______ 0
#define AS__________sig254_$$____ 1
#define AS__________sig254_$$____ 2
#define AS__________sig254_$$_______ 3
#pragma warning(default : 4005)
#define AS__________sig254_Get() AS_Get(AS__________sig254_Index)
#define AS__________sig254_Set(dValue) AS_Set(AS__________sig254_Index, dValue)

extern int AS__________sig255_Index; // sig255
#pragma warning(disable : 4005)
#define AS__________sig255_$$_____ 0
#define AS__________sig255_$$______ 1
#define AS__________sig255_$$________ 2
#pragma warning(default : 4005)
#define AS__________sig255_Get() AS_Get(AS__________sig255_Index)
#define AS__________sig255_Set(dValue) AS_Set(AS__________sig255_Index, dValue)

extern int AS_______sig257_Index; // sig257
#define AS_______sig257_Get() AS_Get(AS_______sig257_Index)
#define AS_______sig257_Set(dValue) AS_Set(AS_______sig257_Index, dValue)

extern int AS_Pre_______sig258_Index; // sig258
#define AS_Pre_______sig258_Get() AS_Get(AS_Pre_______sig258_Index)
#define AS_Pre_______sig258_Set(dValue) AS_Set(AS_Pre_______sig258_Index, dValue)

extern int AS_Pre_______sig259_Index; // sig259
#define AS_Pre_______sig259_Get() AS_Get(AS_Pre_______sig259_Index)
#define AS_Pre_______sig259_Set(dValue) AS_Set(AS_Pre_______sig259_Index, dValue)

extern int AS_______sig260_Index; // sig260
#define AS_______sig260_Get() AS_Get(AS_______sig260_Index)
#define AS_______sig260_Set(dValue) AS_Set(AS_______sig260_Index, dValue)

extern int AS________sig261_Index; // sig261
#define AS________sig261_Get() AS_Get(AS________sig261_Index)
#define AS________sig261_Set(dValue) AS_Set(AS________sig261_Index, dValue)

extern int AS_________sig262_Index; // sig262
#pragma warning(disable : 4005)
#define AS_________sig262_$$_2WD 0
#define AS_________sig262_$$_Nextrac_TOD 1
#define AS_________sig262_$$_Reserve 2
#pragma warning(default : 4005)
#define AS_________sig262_Get() AS_Get(AS_________sig262_Index)
#define AS_________sig262_Set(dValue) AS_Set(AS_________sig262_Index, dValue)

extern int AS_________sig263_Index; // sig263
#pragma warning(disable : 4005)
#define AS_________sig263_$$__ 0
#define AS_________sig263_$$______ 1
#define AS_________sig263_$$______ 2
#define AS_________sig263_$$_______ 3
#pragma warning(default : 4005)
#define AS_________sig263_Get() AS_Get(AS_________sig263_Index)
#define AS_________sig263_Set(dValue) AS_Set(AS_________sig263_Index, dValue)

extern int AS________sig264_Index; // sig264
#pragma warning(disable : 4005)
#define AS________sig264_$$___1 0
#define AS________sig264_$$___2 1
#define AS________sig264_$$___3 2
#define AS________sig264_$$___4 3
#pragma warning(default : 4005)
#define AS________sig264_Get() AS_Get(AS________sig264_Index)
#define AS________sig264_Set(dValue) AS_Set(AS________sig264_Index, dValue)

extern int AS___________sig265_Index; // sig265
#pragma warning(disable : 4005)
#define AS___________sig265_$$___ 0
#define AS___________sig265_$$_____1 1
#define AS___________sig265_$$_____2 2
#define AS___________sig265_$$_____3 3
#define AS___________sig265_$$_____4 4
#define AS___________sig265_$$_____5 5
#define AS___________sig265_$$_____6 6
#define AS___________sig265_$$_____7 7
#define AS___________sig265_$$_____8 8
#define AS___________sig265_$$_____9 9
#define AS___________sig265_$$_____10 10
#define AS___________sig265_$$_____11 11
#define AS___________sig265_$$_____12 12
#define AS___________sig265_$$_____13 13
#define AS___________sig265_$$_____14 14
#define AS___________sig265_$$_____15 15
#pragma warning(default : 4005)
#define AS___________sig265_Get() AS_Get(AS___________sig265_Index)
#define AS___________sig265_Set(dValue) AS_Set(AS___________sig265_Index, dValue)

extern int AS___________sig266_Index; // sig266
#pragma warning(disable : 4005)
#define AS___________sig266_$$________ 0
#define AS___________sig266_$$________ 1
#define AS___________sig266_$$________ 2
#define AS___________sig266_$$________ 3
#pragma warning(default : 4005)
#define AS___________sig266_Get() AS_Get(AS___________sig266_Index)
#define AS___________sig266_Set(dValue) AS_Set(AS___________sig266_Index, dValue)

extern int AS_________sig267_Index; // sig267
#pragma warning(disable : 4005)
#define AS_________sig267_$$____ 0
#define AS_________sig267_$$____ 1
#pragma warning(default : 4005)
#define AS_________sig267_Get() AS_Get(AS_________sig267_Index)
#define AS_________sig267_Set(dValue) AS_Set(AS_________sig267_Index, dValue)

extern int AS_____sig268_Index; // sig268
#define AS_____sig268_Get() AS_Get(AS_____sig268_Index)
#define AS_____sig268_Set(dValue) AS_Set(AS_____sig268_Index, dValue)

extern int AS_____sig269_Index; // sig269
#define AS_____sig269_Get() AS_Get(AS_____sig269_Index)
#define AS_____sig269_Set(dValue) AS_Set(AS_____sig269_Index, dValue)

extern int AS______sig270_Index; // sig270
#define AS______sig270_Get() AS_Get(AS______sig270_Index)
#define AS______sig270_Set(dValue) AS_Set(AS______sig270_Index, dValue)

extern int AS_______CHB027_2WD_IPAS_Index; // sig271
#define AS_______CHB027_2WD_IPAS_Get() AS_Get(AS_______CHB027_2WD_IPAS_Index)
#define AS_______CHB027_2WD_IPAS_Set(dValue) AS_Set(AS_______CHB027_2WD_IPAS_Index, dValue)

extern int AS_______CHB027_2WD_HAP_Index; // sig272
#define AS_______CHB027_2WD_HAP_Get() AS_Get(AS_______CHB027_2WD_HAP_Index)
#define AS_______CHB027_2WD_HAP_Set(dValue) AS_Set(AS_______CHB027_2WD_HAP_Index, dValue)

extern int AS_______CHB027_4WD_IPAS_Index; // sig273
#define AS_______CHB027_4WD_IPAS_Get() AS_Get(AS_______CHB027_4WD_IPAS_Index)
#define AS_______CHB027_4WD_IPAS_Set(dValue) AS_Set(AS_______CHB027_4WD_IPAS_Index, dValue)

extern int AS_______CHB027_4WD_HAP_Index; // sig274
#define AS_______CHB027_4WD_HAP_Get() AS_Get(AS_______CHB027_4WD_HAP_Index)
#define AS_______CHB027_4WD_HAP_Set(dValue) AS_Set(AS_______CHB027_4WD_HAP_Index, dValue)

extern int AS_______CHB037_2WD_IPAS_Index; // sig275
#define AS_______CHB037_2WD_IPAS_Get() AS_Get(AS_______CHB037_2WD_IPAS_Index)
#define AS_______CHB037_2WD_IPAS_Set(dValue) AS_Set(AS_______CHB037_2WD_IPAS_Index, dValue)

extern int AS_______CHB037_2WD_HAP_Index; // sig276
#define AS_______CHB037_2WD_HAP_Get() AS_Get(AS_______CHB037_2WD_HAP_Index)
#define AS_______CHB037_2WD_HAP_Set(dValue) AS_Set(AS_______CHB037_2WD_HAP_Index, dValue)

extern int AS_______CHB037_4WD_IPAS_Index; // sig277
#define AS_______CHB037_4WD_IPAS_Get() AS_Get(AS_______CHB037_4WD_IPAS_Index)
#define AS_______CHB037_4WD_IPAS_Set(dValue) AS_Set(AS_______CHB037_4WD_IPAS_Index, dValue)

extern int AS_______CHB037_4WD_HAP_Index; // sig278
#define AS_______CHB037_4WD_HAP_Get() AS_Get(AS_______CHB037_4WD_HAP_Index)
#define AS_______CHB037_4WD_HAP_Set(dValue) AS_Set(AS_______CHB037_4WD_HAP_Index, dValue)

extern int AS_App_Signal_209_Index; // sig279
#define AS_App_Signal_209_Get() AS_Get(AS_App_Signal_209_Index)
#define AS_App_Signal_209_Set(dValue) AS_Set(AS_App_Signal_209_Index, dValue)

extern int AS_MemoryReadAddr_Index; // sig280
#define AS_MemoryReadAddr_Get() AS_Get(AS_MemoryReadAddr_Index)
#define AS_MemoryReadAddr_Set(dValue) AS_Set(AS_MemoryReadAddr_Index, dValue)

extern int AS_MemoryReadAddrTemp_Index; // sig281
#define AS_MemoryReadAddrTemp_Get() AS_Get(AS_MemoryReadAddrTemp_Index)
#define AS_MemoryReadAddrTemp_Set(dValue) AS_Set(AS_MemoryReadAddrTemp_Index, dValue)

extern int AS_MemoryRead_Index; // sig282
#define AS_MemoryRead_Get() AS_Get(AS_MemoryRead_Index)
#define AS_MemoryRead_Set(dValue) AS_Set(AS_MemoryRead_Index, dValue)
#define AS_MemoryRead_GetTextW(szValue) AS_GetTextW(AS_MemoryRead_Index, szValue)
#define AS_MemoryRead_SetTextW(szValue) CM_GetSetValue(g_uiHandle, CM_GETSET_SET_APP_SIGNAL_TEXT, AS_MemoryRead_Index, szValue)
#define AS_MemoryRead_GetText(szValue) AS_GetText(AS_MemoryRead_Index, szValue, -1)
#define AS_MemoryRead_SetText(szValue) AS_SetText(AS_MemoryRead_Index, szValue, -1)
#define AS_MemoryRead_GetTextLen(szValue, len) AS_GetText(AS_MemoryRead_Index, szValue, len)
#define AS_MemoryRead_SetTextLen(szValue, len) AS_SetText(AS_MemoryRead_Index, szValue, len)

extern int AS______sig283_Index; // sig283
#define AS______sig283_Get() AS_Get(AS______sig283_Index)
#define AS______sig283_Set(dValue) AS_Set(AS______sig283_Index, dValue)

extern int AS__________sig284_Index; // sig284
#define AS__________sig284_Get() AS_Get(AS__________sig284_Index)
#define AS__________sig284_Set(dValue) AS_Set(AS__________sig284_Index, dValue)

extern int AS_____Temp_Index; // sig285
#define AS_____Temp_Get() AS_Get(AS_____Temp_Index)
#define AS_____Temp_Set(dValue) AS_Set(AS_____Temp_Index, dValue)

extern int DG_$23_Read_Memory_By_Address_Index;
void DG_$23_Read_Memory_By_Address_Start();
void DG_$23_Read_Memory_By_Address_Stop();
void DG_$23_Read_Memory_By_Address_Save();
int DG_$23_Read_Memory_By_Address_IsRunning();
int DG_$23_Read_Memory_By_Address_NumMessagesCollected();
int DG_$23_Read_Memory_By_Address_IsSuccessful();
int DG_$23_Read_Memory_By_Address_ECUResponseCount();
double DG_$23_Read_Memory_By_Address_TotalTimeAbs();
int DG_$23_Read_Memory_By_Address_Last7FSubFunctionEx78();
int DG_$23_Read_Memory_By_Address_7FCountEx78();
int DG_$23_Read_Memory_By_Address_7FCountResponsePending();
extern int DG_$23_Read_Memory_By_Address___Copy_Index;
void DG_$23_Read_Memory_By_Address___Copy_Start();
void DG_$23_Read_Memory_By_Address___Copy_Stop();
void DG_$23_Read_Memory_By_Address___Copy_Save();
int DG_$23_Read_Memory_By_Address___Copy_IsRunning();
int DG_$23_Read_Memory_By_Address___Copy_NumMessagesCollected();
int DG_$23_Read_Memory_By_Address___Copy_IsSuccessful();
int DG_$23_Read_Memory_By_Address___Copy_ECUResponseCount();
double DG_$23_Read_Memory_By_Address___Copy_TotalTimeAbs();
int DG_$23_Read_Memory_By_Address___Copy_Last7FSubFunctionEx78();
int DG_$23_Read_Memory_By_Address___Copy_7FCountEx78();
int DG_$23_Read_Memory_By_Address___Copy_7FCountResponsePending();
extern int DG_FaultMemory_ReadNumber_Index;
void DG_FaultMemory_ReadNumber_Start();
void DG_FaultMemory_ReadNumber_Stop();
void DG_FaultMemory_ReadNumber_Save();
int DG_FaultMemory_ReadNumber_IsRunning();
int DG_FaultMemory_ReadNumber_NumMessagesCollected();
int DG_FaultMemory_ReadNumber_IsSuccessful();
int DG_FaultMemory_ReadNumber_ECUResponseCount();
double DG_FaultMemory_ReadNumber_TotalTimeAbs();
int DG_FaultMemory_ReadNumber_Last7FSubFunctionEx78();
int DG_FaultMemory_ReadNumber_7FCountEx78();
int DG_FaultMemory_ReadNumber_7FCountResponsePending();
extern int DG_FaultMemory_ReadNumber_NoResponse_Index;
void DG_FaultMemory_ReadNumber_NoResponse_Start();
void DG_FaultMemory_ReadNumber_NoResponse_Stop();
void DG_FaultMemory_ReadNumber_NoResponse_Save();
int DG_FaultMemory_ReadNumber_NoResponse_IsRunning();
int DG_FaultMemory_ReadNumber_NoResponse_NumMessagesCollected();
int DG_FaultMemory_ReadNumber_NoResponse_IsSuccessful();
int DG_FaultMemory_ReadNumber_NoResponse_ECUResponseCount();
double DG_FaultMemory_ReadNumber_NoResponse_TotalTimeAbs();
int DG_FaultMemory_ReadNumber_NoResponse_Last7FSubFunctionEx78();
int DG_FaultMemory_ReadNumber_NoResponse_7FCountEx78();
int DG_FaultMemory_ReadNumber_NoResponse_7FCountResponsePending();
extern int DG_FaultMemory_ReadAllIdentified_Index;
void DG_FaultMemory_ReadAllIdentified_Start();
void DG_FaultMemory_ReadAllIdentified_Stop();
void DG_FaultMemory_ReadAllIdentified_Save();
int DG_FaultMemory_ReadAllIdentified_IsRunning();
int DG_FaultMemory_ReadAllIdentified_NumMessagesCollected();
int DG_FaultMemory_ReadAllIdentified_IsSuccessful();
int DG_FaultMemory_ReadAllIdentified_ECUResponseCount();
double DG_FaultMemory_ReadAllIdentified_TotalTimeAbs();
int DG_FaultMemory_ReadAllIdentified_Last7FSubFunctionEx78();
int DG_FaultMemory_ReadAllIdentified_7FCountEx78();
int DG_FaultMemory_ReadAllIdentified_7FCountResponsePending();
extern int DG_FaultMemory_ReadAllIdentified_NoResponse_Index;
void DG_FaultMemory_ReadAllIdentified_NoResponse_Start();
void DG_FaultMemory_ReadAllIdentified_NoResponse_Stop();
void DG_FaultMemory_ReadAllIdentified_NoResponse_Save();
int DG_FaultMemory_ReadAllIdentified_NoResponse_IsRunning();
int DG_FaultMemory_ReadAllIdentified_NoResponse_NumMessagesCollected();
int DG_FaultMemory_ReadAllIdentified_NoResponse_IsSuccessful();
int DG_FaultMemory_ReadAllIdentified_NoResponse_ECUResponseCount();
double DG_FaultMemory_ReadAllIdentified_NoResponse_TotalTimeAbs();
int DG_FaultMemory_ReadAllIdentified_NoResponse_Last7FSubFunctionEx78();
int DG_FaultMemory_ReadAllIdentified_NoResponse_7FCountEx78();
int DG_FaultMemory_ReadAllIdentified_NoResponse_7FCountResponsePending();
extern int DG_FaultMemory_Read_snapshot_ID_Index;
void DG_FaultMemory_Read_snapshot_ID_Start();
void DG_FaultMemory_Read_snapshot_ID_Stop();
void DG_FaultMemory_Read_snapshot_ID_Save();
int DG_FaultMemory_Read_snapshot_ID_IsRunning();
int DG_FaultMemory_Read_snapshot_ID_NumMessagesCollected();
int DG_FaultMemory_Read_snapshot_ID_IsSuccessful();
int DG_FaultMemory_Read_snapshot_ID_ECUResponseCount();
double DG_FaultMemory_Read_snapshot_ID_TotalTimeAbs();
int DG_FaultMemory_Read_snapshot_ID_Last7FSubFunctionEx78();
int DG_FaultMemory_Read_snapshot_ID_7FCountEx78();
int DG_FaultMemory_Read_snapshot_ID_7FCountResponsePending();
extern int DG_FaultMemory_Read_snapshot_ID_NoResponse_Index;
void DG_FaultMemory_Read_snapshot_ID_NoResponse_Start();
void DG_FaultMemory_Read_snapshot_ID_NoResponse_Stop();
void DG_FaultMemory_Read_snapshot_ID_NoResponse_Save();
int DG_FaultMemory_Read_snapshot_ID_NoResponse_IsRunning();
int DG_FaultMemory_Read_snapshot_ID_NoResponse_NumMessagesCollected();
int DG_FaultMemory_Read_snapshot_ID_NoResponse_IsSuccessful();
int DG_FaultMemory_Read_snapshot_ID_NoResponse_ECUResponseCount();
double DG_FaultMemory_Read_snapshot_ID_NoResponse_TotalTimeAbs();
int DG_FaultMemory_Read_snapshot_ID_NoResponse_Last7FSubFunctionEx78();
int DG_FaultMemory_Read_snapshot_ID_NoResponse_7FCountEx78();
int DG_FaultMemory_Read_snapshot_ID_NoResponse_7FCountResponsePending();
extern int DG_FaultMemory_Read_snapshot_Index;
void DG_FaultMemory_Read_snapshot_Start();
void DG_FaultMemory_Read_snapshot_Stop();
void DG_FaultMemory_Read_snapshot_Save();
int DG_FaultMemory_Read_snapshot_IsRunning();
int DG_FaultMemory_Read_snapshot_NumMessagesCollected();
int DG_FaultMemory_Read_snapshot_IsSuccessful();
int DG_FaultMemory_Read_snapshot_ECUResponseCount();
double DG_FaultMemory_Read_snapshot_TotalTimeAbs();
int DG_FaultMemory_Read_snapshot_Last7FSubFunctionEx78();
int DG_FaultMemory_Read_snapshot_7FCountEx78();
int DG_FaultMemory_Read_snapshot_7FCountResponsePending();
extern int DG_FaultMemory_Read_snapshot_NoResponse_Index;
void DG_FaultMemory_Read_snapshot_NoResponse_Start();
void DG_FaultMemory_Read_snapshot_NoResponse_Stop();
void DG_FaultMemory_Read_snapshot_NoResponse_Save();
int DG_FaultMemory_Read_snapshot_NoResponse_IsRunning();
int DG_FaultMemory_Read_snapshot_NoResponse_NumMessagesCollected();
int DG_FaultMemory_Read_snapshot_NoResponse_IsSuccessful();
int DG_FaultMemory_Read_snapshot_NoResponse_ECUResponseCount();
double DG_FaultMemory_Read_snapshot_NoResponse_TotalTimeAbs();
int DG_FaultMemory_Read_snapshot_NoResponse_Last7FSubFunctionEx78();
int DG_FaultMemory_Read_snapshot_NoResponse_7FCountEx78();
int DG_FaultMemory_Read_snapshot_NoResponse_7FCountResponsePending();
extern int DG_FaultMemory_Read_extended_Index;
void DG_FaultMemory_Read_extended_Start();
void DG_FaultMemory_Read_extended_Stop();
void DG_FaultMemory_Read_extended_Save();
int DG_FaultMemory_Read_extended_IsRunning();
int DG_FaultMemory_Read_extended_NumMessagesCollected();
int DG_FaultMemory_Read_extended_IsSuccessful();
int DG_FaultMemory_Read_extended_ECUResponseCount();
double DG_FaultMemory_Read_extended_TotalTimeAbs();
int DG_FaultMemory_Read_extended_Last7FSubFunctionEx78();
int DG_FaultMemory_Read_extended_7FCountEx78();
int DG_FaultMemory_Read_extended_7FCountResponsePending();
extern int DG_FaultMemory_Read_extended_NoResponse_Index;
void DG_FaultMemory_Read_extended_NoResponse_Start();
void DG_FaultMemory_Read_extended_NoResponse_Stop();
void DG_FaultMemory_Read_extended_NoResponse_Save();
int DG_FaultMemory_Read_extended_NoResponse_IsRunning();
int DG_FaultMemory_Read_extended_NoResponse_NumMessagesCollected();
int DG_FaultMemory_Read_extended_NoResponse_IsSuccessful();
int DG_FaultMemory_Read_extended_NoResponse_ECUResponseCount();
double DG_FaultMemory_Read_extended_NoResponse_TotalTimeAbs();
int DG_FaultMemory_Read_extended_NoResponse_Last7FSubFunctionEx78();
int DG_FaultMemory_Read_extended_NoResponse_7FCountEx78();
int DG_FaultMemory_Read_extended_NoResponse_7FCountResponsePending();
extern int DG_FaultMemory_ReadAllSupported_Index;
void DG_FaultMemory_ReadAllSupported_Start();
void DG_FaultMemory_ReadAllSupported_Stop();
void DG_FaultMemory_ReadAllSupported_Save();
int DG_FaultMemory_ReadAllSupported_IsRunning();
int DG_FaultMemory_ReadAllSupported_NumMessagesCollected();
int DG_FaultMemory_ReadAllSupported_IsSuccessful();
int DG_FaultMemory_ReadAllSupported_ECUResponseCount();
double DG_FaultMemory_ReadAllSupported_TotalTimeAbs();
int DG_FaultMemory_ReadAllSupported_Last7FSubFunctionEx78();
int DG_FaultMemory_ReadAllSupported_7FCountEx78();
int DG_FaultMemory_ReadAllSupported_7FCountResponsePending();
extern int DG_FaultMemory_ReadAllSupported_NoResponse_Index;
void DG_FaultMemory_ReadAllSupported_NoResponse_Start();
void DG_FaultMemory_ReadAllSupported_NoResponse_Stop();
void DG_FaultMemory_ReadAllSupported_NoResponse_Save();
int DG_FaultMemory_ReadAllSupported_NoResponse_IsRunning();
int DG_FaultMemory_ReadAllSupported_NoResponse_NumMessagesCollected();
int DG_FaultMemory_ReadAllSupported_NoResponse_IsSuccessful();
int DG_FaultMemory_ReadAllSupported_NoResponse_ECUResponseCount();
double DG_FaultMemory_ReadAllSupported_NoResponse_TotalTimeAbs();
int DG_FaultMemory_ReadAllSupported_NoResponse_Last7FSubFunctionEx78();
int DG_FaultMemory_ReadAllSupported_NoResponse_7FCountEx78();
int DG_FaultMemory_ReadAllSupported_NoResponse_7FCountResponsePending();
extern int DG_FaultMemory_Clear_Index;
void DG_FaultMemory_Clear_Start();
void DG_FaultMemory_Clear_Stop();
void DG_FaultMemory_Clear_Save();
int DG_FaultMemory_Clear_IsRunning();
int DG_FaultMemory_Clear_NumMessagesCollected();
int DG_FaultMemory_Clear_IsSuccessful();
int DG_FaultMemory_Clear_ECUResponseCount();
double DG_FaultMemory_Clear_TotalTimeAbs();
int DG_FaultMemory_Clear_Last7FSubFunctionEx78();
int DG_FaultMemory_Clear_7FCountEx78();
int DG_FaultMemory_Clear_7FCountResponsePending();
extern int DG_Memory_New_Service_2_Index;
void DG_Memory_New_Service_2_Start();
void DG_Memory_New_Service_2_Stop();
void DG_Memory_New_Service_2_Save();
int DG_Memory_New_Service_2_IsRunning();
int DG_Memory_New_Service_2_NumMessagesCollected();
int DG_Memory_New_Service_2_IsSuccessful();
int DG_Memory_New_Service_2_ECUResponseCount();
double DG_Memory_New_Service_2_TotalTimeAbs();
int DG_Memory_New_Service_2_Last7FSubFunctionEx78();
int DG_Memory_New_Service_2_7FCountEx78();
int DG_Memory_New_Service_2_7FCountResponsePending();
extern int DG_Memory_New_Service_2_NoResponse_Index;
void DG_Memory_New_Service_2_NoResponse_Start();
void DG_Memory_New_Service_2_NoResponse_Stop();
void DG_Memory_New_Service_2_NoResponse_Save();
int DG_Memory_New_Service_2_NoResponse_IsRunning();
int DG_Memory_New_Service_2_NoResponse_NumMessagesCollected();
int DG_Memory_New_Service_2_NoResponse_IsSuccessful();
int DG_Memory_New_Service_2_NoResponse_ECUResponseCount();
double DG_Memory_New_Service_2_NoResponse_TotalTimeAbs();
int DG_Memory_New_Service_2_NoResponse_Last7FSubFunctionEx78();
int DG_Memory_New_Service_2_NoResponse_7FCountEx78();
int DG_Memory_New_Service_2_NoResponse_7FCountResponsePending();
extern int DG_ControlDTCSetting_On_Index;
void DG_ControlDTCSetting_On_Start();
void DG_ControlDTCSetting_On_Stop();
void DG_ControlDTCSetting_On_Save();
int DG_ControlDTCSetting_On_IsRunning();
int DG_ControlDTCSetting_On_NumMessagesCollected();
int DG_ControlDTCSetting_On_IsSuccessful();
int DG_ControlDTCSetting_On_ECUResponseCount();
double DG_ControlDTCSetting_On_TotalTimeAbs();
int DG_ControlDTCSetting_On_Last7FSubFunctionEx78();
int DG_ControlDTCSetting_On_7FCountEx78();
int DG_ControlDTCSetting_On_7FCountResponsePending();
extern int DG_ControlDTCSetting_On_NoResponse_Index;
void DG_ControlDTCSetting_On_NoResponse_Start();
void DG_ControlDTCSetting_On_NoResponse_Stop();
void DG_ControlDTCSetting_On_NoResponse_Save();
int DG_ControlDTCSetting_On_NoResponse_IsRunning();
int DG_ControlDTCSetting_On_NoResponse_NumMessagesCollected();
int DG_ControlDTCSetting_On_NoResponse_IsSuccessful();
int DG_ControlDTCSetting_On_NoResponse_ECUResponseCount();
double DG_ControlDTCSetting_On_NoResponse_TotalTimeAbs();
int DG_ControlDTCSetting_On_NoResponse_Last7FSubFunctionEx78();
int DG_ControlDTCSetting_On_NoResponse_7FCountEx78();
int DG_ControlDTCSetting_On_NoResponse_7FCountResponsePending();
extern int DG_ControlDTCSetting_Off_Index;
void DG_ControlDTCSetting_Off_Start();
void DG_ControlDTCSetting_Off_Stop();
void DG_ControlDTCSetting_Off_Save();
int DG_ControlDTCSetting_Off_IsRunning();
int DG_ControlDTCSetting_Off_NumMessagesCollected();
int DG_ControlDTCSetting_Off_IsSuccessful();
int DG_ControlDTCSetting_Off_ECUResponseCount();
double DG_ControlDTCSetting_Off_TotalTimeAbs();
int DG_ControlDTCSetting_Off_Last7FSubFunctionEx78();
int DG_ControlDTCSetting_Off_7FCountEx78();
int DG_ControlDTCSetting_Off_7FCountResponsePending();
extern int DG_ControlDTCSetting_Off_NoResponse_Index;
void DG_ControlDTCSetting_Off_NoResponse_Start();
void DG_ControlDTCSetting_Off_NoResponse_Stop();
void DG_ControlDTCSetting_Off_NoResponse_Save();
int DG_ControlDTCSetting_Off_NoResponse_IsRunning();
int DG_ControlDTCSetting_Off_NoResponse_NumMessagesCollected();
int DG_ControlDTCSetting_Off_NoResponse_IsSuccessful();
int DG_ControlDTCSetting_Off_NoResponse_ECUResponseCount();
double DG_ControlDTCSetting_Off_NoResponse_TotalTimeAbs();
int DG_ControlDTCSetting_Off_NoResponse_Last7FSubFunctionEx78();
int DG_ControlDTCSetting_Off_NoResponse_7FCountEx78();
int DG_ControlDTCSetting_Off_NoResponse_7FCountResponsePending();
extern int DG_TesterPresent_Send_Index;
void DG_TesterPresent_Send_Start();
void DG_TesterPresent_Send_Stop();
void DG_TesterPresent_Send_Save();
int DG_TesterPresent_Send_IsRunning();
int DG_TesterPresent_Send_NumMessagesCollected();
int DG_TesterPresent_Send_IsSuccessful();
int DG_TesterPresent_Send_ECUResponseCount();
double DG_TesterPresent_Send_TotalTimeAbs();
int DG_TesterPresent_Send_Last7FSubFunctionEx78();
int DG_TesterPresent_Send_7FCountEx78();
int DG_TesterPresent_Send_7FCountResponsePending();
extern int DG_TesterPresent_Send_NoResponse_Index;
void DG_TesterPresent_Send_NoResponse_Start();
void DG_TesterPresent_Send_NoResponse_Stop();
void DG_TesterPresent_Send_NoResponse_Save();
int DG_TesterPresent_Send_NoResponse_IsRunning();
int DG_TesterPresent_Send_NoResponse_NumMessagesCollected();
int DG_TesterPresent_Send_NoResponse_IsSuccessful();
int DG_TesterPresent_Send_NoResponse_ECUResponseCount();
double DG_TesterPresent_Send_NoResponse_TotalTimeAbs();
int DG_TesterPresent_Send_NoResponse_Last7FSubFunctionEx78();
int DG_TesterPresent_Send_NoResponse_7FCountEx78();
int DG_TesterPresent_Send_NoResponse_7FCountResponsePending();
extern int DG_Download_Request_Index;
void DG_Download_Request_Start();
void DG_Download_Request_Stop();
void DG_Download_Request_Save();
int DG_Download_Request_IsRunning();
int DG_Download_Request_NumMessagesCollected();
int DG_Download_Request_IsSuccessful();
int DG_Download_Request_ECUResponseCount();
double DG_Download_Request_TotalTimeAbs();
int DG_Download_Request_Last7FSubFunctionEx78();
int DG_Download_Request_7FCountEx78();
int DG_Download_Request_7FCountResponsePending();
extern int DG_Download_Transmit_Index;
void DG_Download_Transmit_Start();
void DG_Download_Transmit_Stop();
void DG_Download_Transmit_Save();
int DG_Download_Transmit_IsRunning();
int DG_Download_Transmit_NumMessagesCollected();
int DG_Download_Transmit_IsSuccessful();
int DG_Download_Transmit_ECUResponseCount();
double DG_Download_Transmit_TotalTimeAbs();
int DG_Download_Transmit_Last7FSubFunctionEx78();
int DG_Download_Transmit_7FCountEx78();
int DG_Download_Transmit_7FCountResponsePending();
extern int DG_Download_Stop_Index;
void DG_Download_Stop_Start();
void DG_Download_Stop_Stop();
void DG_Download_Stop_Save();
int DG_Download_Stop_IsRunning();
int DG_Download_Stop_NumMessagesCollected();
int DG_Download_Stop_IsSuccessful();
int DG_Download_Stop_ECUResponseCount();
double DG_Download_Stop_TotalTimeAbs();
int DG_Download_Stop_Last7FSubFunctionEx78();
int DG_Download_Stop_7FCountEx78();
int DG_Download_Stop_7FCountResponsePending();
extern int DG_DefaultSession_Start_Index;
void DG_DefaultSession_Start_Start();
void DG_DefaultSession_Start_Stop();
void DG_DefaultSession_Start_Save();
int DG_DefaultSession_Start_IsRunning();
int DG_DefaultSession_Start_NumMessagesCollected();
int DG_DefaultSession_Start_IsSuccessful();
int DG_DefaultSession_Start_ECUResponseCount();
double DG_DefaultSession_Start_TotalTimeAbs();
int DG_DefaultSession_Start_Last7FSubFunctionEx78();
int DG_DefaultSession_Start_7FCountEx78();
int DG_DefaultSession_Start_7FCountResponsePending();
extern int DG_DefaultSession_Start_NoResponse_Index;
void DG_DefaultSession_Start_NoResponse_Start();
void DG_DefaultSession_Start_NoResponse_Stop();
void DG_DefaultSession_Start_NoResponse_Save();
int DG_DefaultSession_Start_NoResponse_IsRunning();
int DG_DefaultSession_Start_NoResponse_NumMessagesCollected();
int DG_DefaultSession_Start_NoResponse_IsSuccessful();
int DG_DefaultSession_Start_NoResponse_ECUResponseCount();
double DG_DefaultSession_Start_NoResponse_TotalTimeAbs();
int DG_DefaultSession_Start_NoResponse_Last7FSubFunctionEx78();
int DG_DefaultSession_Start_NoResponse_7FCountEx78();
int DG_DefaultSession_Start_NoResponse_7FCountResponsePending();
extern int DG_ProgrammingSession_Start_Index;
void DG_ProgrammingSession_Start_Start();
void DG_ProgrammingSession_Start_Stop();
void DG_ProgrammingSession_Start_Save();
int DG_ProgrammingSession_Start_IsRunning();
int DG_ProgrammingSession_Start_NumMessagesCollected();
int DG_ProgrammingSession_Start_IsSuccessful();
int DG_ProgrammingSession_Start_ECUResponseCount();
double DG_ProgrammingSession_Start_TotalTimeAbs();
int DG_ProgrammingSession_Start_Last7FSubFunctionEx78();
int DG_ProgrammingSession_Start_7FCountEx78();
int DG_ProgrammingSession_Start_7FCountResponsePending();
extern int DG_ProgrammingSession_Start_NoResponse_Index;
void DG_ProgrammingSession_Start_NoResponse_Start();
void DG_ProgrammingSession_Start_NoResponse_Stop();
void DG_ProgrammingSession_Start_NoResponse_Save();
int DG_ProgrammingSession_Start_NoResponse_IsRunning();
int DG_ProgrammingSession_Start_NoResponse_NumMessagesCollected();
int DG_ProgrammingSession_Start_NoResponse_IsSuccessful();
int DG_ProgrammingSession_Start_NoResponse_ECUResponseCount();
double DG_ProgrammingSession_Start_NoResponse_TotalTimeAbs();
int DG_ProgrammingSession_Start_NoResponse_Last7FSubFunctionEx78();
int DG_ProgrammingSession_Start_NoResponse_7FCountEx78();
int DG_ProgrammingSession_Start_NoResponse_7FCountResponsePending();
extern int DG_ExtendedDiagnosticSession_Start_Index;
void DG_ExtendedDiagnosticSession_Start_Start();
void DG_ExtendedDiagnosticSession_Start_Stop();
void DG_ExtendedDiagnosticSession_Start_Save();
int DG_ExtendedDiagnosticSession_Start_IsRunning();
int DG_ExtendedDiagnosticSession_Start_NumMessagesCollected();
int DG_ExtendedDiagnosticSession_Start_IsSuccessful();
int DG_ExtendedDiagnosticSession_Start_ECUResponseCount();
double DG_ExtendedDiagnosticSession_Start_TotalTimeAbs();
int DG_ExtendedDiagnosticSession_Start_Last7FSubFunctionEx78();
int DG_ExtendedDiagnosticSession_Start_7FCountEx78();
int DG_ExtendedDiagnosticSession_Start_7FCountResponsePending();
extern int DG_ExtendedDiagnosticSession_Start_NoResponse_Index;
void DG_ExtendedDiagnosticSession_Start_NoResponse_Start();
void DG_ExtendedDiagnosticSession_Start_NoResponse_Stop();
void DG_ExtendedDiagnosticSession_Start_NoResponse_Save();
int DG_ExtendedDiagnosticSession_Start_NoResponse_IsRunning();
int DG_ExtendedDiagnosticSession_Start_NoResponse_NumMessagesCollected();
int DG_ExtendedDiagnosticSession_Start_NoResponse_IsSuccessful();
int DG_ExtendedDiagnosticSession_Start_NoResponse_ECUResponseCount();
double DG_ExtendedDiagnosticSession_Start_NoResponse_TotalTimeAbs();
int DG_ExtendedDiagnosticSession_Start_NoResponse_Last7FSubFunctionEx78();
int DG_ExtendedDiagnosticSession_Start_NoResponse_7FCountEx78();
int DG_ExtendedDiagnosticSession_Start_NoResponse_7FCountResponsePending();
extern int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_Index;
void DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_Start();
void DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_Stop();
void DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_Save();
int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_IsRunning();
int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_NumMessagesCollected();
int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_IsSuccessful();
int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_ECUResponseCount();
double DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_TotalTimeAbs();
int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_7FCountEx78();
int DG_DID_0xF187_Vehicle_Manufacturer_Spare_Part_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_Index;
void DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_Start();
void DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_Stop();
void DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_Save();
int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_IsRunning();
int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xF189_Vehicle_Manufacturer_ECU_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_Index;
void DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_Start();
void DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_Stop();
void DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_Save();
int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_IsRunning();
int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_NumMessagesCollected();
int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_IsSuccessful();
int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_ECUResponseCount();
double DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_TotalTimeAbs();
int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_7FCountEx78();
int DG_DID_0xF1C0_Vehicle_Manufacturer_Calibration_Software_Version_Num_Read_7FCountResponsePending();
extern int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_Index;
void DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_Start();
void DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_Stop();
void DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_Save();
int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_IsRunning();
int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xF1C1_Vehicle_Manufacturer_SOC_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF1C5_UIN_Read_Index;
void DG_DID_0xF1C5_UIN_Read_Start();
void DG_DID_0xF1C5_UIN_Read_Stop();
void DG_DID_0xF1C5_UIN_Read_Save();
int DG_DID_0xF1C5_UIN_Read_IsRunning();
int DG_DID_0xF1C5_UIN_Read_NumMessagesCollected();
int DG_DID_0xF1C5_UIN_Read_IsSuccessful();
int DG_DID_0xF1C5_UIN_Read_ECUResponseCount();
double DG_DID_0xF1C5_UIN_Read_TotalTimeAbs();
int DG_DID_0xF1C5_UIN_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1C5_UIN_Read_7FCountEx78();
int DG_DID_0xF1C5_UIN_Read_7FCountResponsePending();
extern int DG_DID_0xF1E5_Link_Status_Read_Index;
void DG_DID_0xF1E5_Link_Status_Read_Start();
void DG_DID_0xF1E5_Link_Status_Read_Stop();
void DG_DID_0xF1E5_Link_Status_Read_Save();
int DG_DID_0xF1E5_Link_Status_Read_IsRunning();
int DG_DID_0xF1E5_Link_Status_Read_NumMessagesCollected();
int DG_DID_0xF1E5_Link_Status_Read_IsSuccessful();
int DG_DID_0xF1E5_Link_Status_Read_ECUResponseCount();
double DG_DID_0xF1E5_Link_Status_Read_TotalTimeAbs();
int DG_DID_0xF1E5_Link_Status_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1E5_Link_Status_Read_7FCountEx78();
int DG_DID_0xF1E5_Link_Status_Read_7FCountResponsePending();
extern int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_Index;
void DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_Start();
void DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_Stop();
void DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_Save();
int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_IsRunning();
int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_NumMessagesCollected();
int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_IsSuccessful();
int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_ECUResponseCount();
double DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_TotalTimeAbs();
int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_7FCountEx78();
int DG_DID_0xF1E6_100BASE_SQI_Threshold_Read_7FCountResponsePending();
extern int DG_DID_0xF1E8_SQI_Read_Index;
void DG_DID_0xF1E8_SQI_Read_Start();
void DG_DID_0xF1E8_SQI_Read_Stop();
void DG_DID_0xF1E8_SQI_Read_Save();
int DG_DID_0xF1E8_SQI_Read_IsRunning();
int DG_DID_0xF1E8_SQI_Read_NumMessagesCollected();
int DG_DID_0xF1E8_SQI_Read_IsSuccessful();
int DG_DID_0xF1E8_SQI_Read_ECUResponseCount();
double DG_DID_0xF1E8_SQI_Read_TotalTimeAbs();
int DG_DID_0xF1E8_SQI_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1E8_SQI_Read_7FCountEx78();
int DG_DID_0xF1E8_SQI_Read_7FCountResponsePending();
extern int DG_DID_0xF1EC_MAC_Address_Read_Index;
void DG_DID_0xF1EC_MAC_Address_Read_Start();
void DG_DID_0xF1EC_MAC_Address_Read_Stop();
void DG_DID_0xF1EC_MAC_Address_Read_Save();
int DG_DID_0xF1EC_MAC_Address_Read_IsRunning();
int DG_DID_0xF1EC_MAC_Address_Read_NumMessagesCollected();
int DG_DID_0xF1EC_MAC_Address_Read_IsSuccessful();
int DG_DID_0xF1EC_MAC_Address_Read_ECUResponseCount();
double DG_DID_0xF1EC_MAC_Address_Read_TotalTimeAbs();
int DG_DID_0xF1EC_MAC_Address_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1EC_MAC_Address_Read_7FCountEx78();
int DG_DID_0xF1EC_MAC_Address_Read_7FCountResponsePending();
extern int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_Index;
void DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_Start();
void DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_Stop();
void DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_Save();
int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_IsRunning();
int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_NumMessagesCollected();
int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_IsSuccessful();
int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_ECUResponseCount();
double DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_TotalTimeAbs();
int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_7FCountEx78();
int DG_DID_0xF1D3_Signal_line_short_open_circuit_number_Read_7FCountResponsePending();
extern int DG_DID_0xF1D5_Signal_line_current_status_Read_Index;
void DG_DID_0xF1D5_Signal_line_current_status_Read_Start();
void DG_DID_0xF1D5_Signal_line_current_status_Read_Stop();
void DG_DID_0xF1D5_Signal_line_current_status_Read_Save();
int DG_DID_0xF1D5_Signal_line_current_status_Read_IsRunning();
int DG_DID_0xF1D5_Signal_line_current_status_Read_NumMessagesCollected();
int DG_DID_0xF1D5_Signal_line_current_status_Read_IsSuccessful();
int DG_DID_0xF1D5_Signal_line_current_status_Read_ECUResponseCount();
double DG_DID_0xF1D5_Signal_line_current_status_Read_TotalTimeAbs();
int DG_DID_0xF1D5_Signal_line_current_status_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1D5_Signal_line_current_status_Read_7FCountEx78();
int DG_DID_0xF1D5_Signal_line_current_status_Read_7FCountResponsePending();
extern int DG_DID_0xF1D7_Master_Slave_Status_Read_Index;
void DG_DID_0xF1D7_Master_Slave_Status_Read_Start();
void DG_DID_0xF1D7_Master_Slave_Status_Read_Stop();
void DG_DID_0xF1D7_Master_Slave_Status_Read_Save();
int DG_DID_0xF1D7_Master_Slave_Status_Read_IsRunning();
int DG_DID_0xF1D7_Master_Slave_Status_Read_NumMessagesCollected();
int DG_DID_0xF1D7_Master_Slave_Status_Read_IsSuccessful();
int DG_DID_0xF1D7_Master_Slave_Status_Read_ECUResponseCount();
double DG_DID_0xF1D7_Master_Slave_Status_Read_TotalTimeAbs();
int DG_DID_0xF1D7_Master_Slave_Status_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1D7_Master_Slave_Status_Read_7FCountEx78();
int DG_DID_0xF1D7_Master_Slave_Status_Read_7FCountResponsePending();
extern int DG_DID_0xF1D7_Master_Slave_Status_Write_Index;
void DG_DID_0xF1D7_Master_Slave_Status_Write_Start();
void DG_DID_0xF1D7_Master_Slave_Status_Write_Stop();
void DG_DID_0xF1D7_Master_Slave_Status_Write_Save();
int DG_DID_0xF1D7_Master_Slave_Status_Write_IsRunning();
int DG_DID_0xF1D7_Master_Slave_Status_Write_NumMessagesCollected();
int DG_DID_0xF1D7_Master_Slave_Status_Write_IsSuccessful();
int DG_DID_0xF1D7_Master_Slave_Status_Write_ECUResponseCount();
double DG_DID_0xF1D7_Master_Slave_Status_Write_TotalTimeAbs();
int DG_DID_0xF1D7_Master_Slave_Status_Write_Last7FSubFunctionEx78();
int DG_DID_0xF1D7_Master_Slave_Status_Write_7FCountEx78();
int DG_DID_0xF1D7_Master_Slave_Status_Write_7FCountResponsePending();
extern int DG_DID_0xF1D8_Test_Mode_Status_Read_Index;
void DG_DID_0xF1D8_Test_Mode_Status_Read_Start();
void DG_DID_0xF1D8_Test_Mode_Status_Read_Stop();
void DG_DID_0xF1D8_Test_Mode_Status_Read_Save();
int DG_DID_0xF1D8_Test_Mode_Status_Read_IsRunning();
int DG_DID_0xF1D8_Test_Mode_Status_Read_NumMessagesCollected();
int DG_DID_0xF1D8_Test_Mode_Status_Read_IsSuccessful();
int DG_DID_0xF1D8_Test_Mode_Status_Read_ECUResponseCount();
double DG_DID_0xF1D8_Test_Mode_Status_Read_TotalTimeAbs();
int DG_DID_0xF1D8_Test_Mode_Status_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1D8_Test_Mode_Status_Read_7FCountEx78();
int DG_DID_0xF1D8_Test_Mode_Status_Read_7FCountResponsePending();
extern int DG_DID_0xF123_Calibration_Data_Version_Read_Index;
void DG_DID_0xF123_Calibration_Data_Version_Read_Start();
void DG_DID_0xF123_Calibration_Data_Version_Read_Stop();
void DG_DID_0xF123_Calibration_Data_Version_Read_Save();
int DG_DID_0xF123_Calibration_Data_Version_Read_IsRunning();
int DG_DID_0xF123_Calibration_Data_Version_Read_NumMessagesCollected();
int DG_DID_0xF123_Calibration_Data_Version_Read_IsSuccessful();
int DG_DID_0xF123_Calibration_Data_Version_Read_ECUResponseCount();
double DG_DID_0xF123_Calibration_Data_Version_Read_TotalTimeAbs();
int DG_DID_0xF123_Calibration_Data_Version_Read_Last7FSubFunctionEx78();
int DG_DID_0xF123_Calibration_Data_Version_Read_7FCountEx78();
int DG_DID_0xF123_Calibration_Data_Version_Read_7FCountResponsePending();
extern int DG_DID_0xFD_27_Vehicle_Speed_Read_Index;
void DG_DID_0xFD_27_Vehicle_Speed_Read_Start();
void DG_DID_0xFD_27_Vehicle_Speed_Read_Stop();
void DG_DID_0xFD_27_Vehicle_Speed_Read_Save();
int DG_DID_0xFD_27_Vehicle_Speed_Read_IsRunning();
int DG_DID_0xFD_27_Vehicle_Speed_Read_NumMessagesCollected();
int DG_DID_0xFD_27_Vehicle_Speed_Read_IsSuccessful();
int DG_DID_0xFD_27_Vehicle_Speed_Read_ECUResponseCount();
double DG_DID_0xFD_27_Vehicle_Speed_Read_TotalTimeAbs();
int DG_DID_0xFD_27_Vehicle_Speed_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_27_Vehicle_Speed_Read_7FCountEx78();
int DG_DID_0xFD_27_Vehicle_Speed_Read_7FCountResponsePending();
extern int DG_DID_0xFD_28_Transmission_Gear_Read_Index;
void DG_DID_0xFD_28_Transmission_Gear_Read_Start();
void DG_DID_0xFD_28_Transmission_Gear_Read_Stop();
void DG_DID_0xFD_28_Transmission_Gear_Read_Save();
int DG_DID_0xFD_28_Transmission_Gear_Read_IsRunning();
int DG_DID_0xFD_28_Transmission_Gear_Read_NumMessagesCollected();
int DG_DID_0xFD_28_Transmission_Gear_Read_IsSuccessful();
int DG_DID_0xFD_28_Transmission_Gear_Read_ECUResponseCount();
double DG_DID_0xFD_28_Transmission_Gear_Read_TotalTimeAbs();
int DG_DID_0xFD_28_Transmission_Gear_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_28_Transmission_Gear_Read_7FCountEx78();
int DG_DID_0xFD_28_Transmission_Gear_Read_7FCountResponsePending();
extern int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_Index;
void DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_Start();
void DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_Stop();
void DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_Save();
int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_IsRunning();
int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_IsSuccessful();
int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_7FCountEx78();
int DG_DID_0xFE_22_MCU_FBL_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF18A_system_Supplier_Identifier_Read_Index;
void DG_DID_0xF18A_system_Supplier_Identifier_Read_Start();
void DG_DID_0xF18A_system_Supplier_Identifier_Read_Stop();
void DG_DID_0xF18A_system_Supplier_Identifier_Read_Save();
int DG_DID_0xF18A_system_Supplier_Identifier_Read_IsRunning();
int DG_DID_0xF18A_system_Supplier_Identifier_Read_NumMessagesCollected();
int DG_DID_0xF18A_system_Supplier_Identifier_Read_IsSuccessful();
int DG_DID_0xF18A_system_Supplier_Identifier_Read_ECUResponseCount();
double DG_DID_0xF18A_system_Supplier_Identifier_Read_TotalTimeAbs();
int DG_DID_0xF18A_system_Supplier_Identifier_Read_Last7FSubFunctionEx78();
int DG_DID_0xF18A_system_Supplier_Identifier_Read_7FCountEx78();
int DG_DID_0xF18A_system_Supplier_Identifier_Read_7FCountResponsePending();
extern int DG_DID_0xF18C_ECU_Serial_Number_Read_Index;
void DG_DID_0xF18C_ECU_Serial_Number_Read_Start();
void DG_DID_0xF18C_ECU_Serial_Number_Read_Stop();
void DG_DID_0xF18C_ECU_Serial_Number_Read_Save();
int DG_DID_0xF18C_ECU_Serial_Number_Read_IsRunning();
int DG_DID_0xF18C_ECU_Serial_Number_Read_NumMessagesCollected();
int DG_DID_0xF18C_ECU_Serial_Number_Read_IsSuccessful();
int DG_DID_0xF18C_ECU_Serial_Number_Read_ECUResponseCount();
double DG_DID_0xF18C_ECU_Serial_Number_Read_TotalTimeAbs();
int DG_DID_0xF18C_ECU_Serial_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF18C_ECU_Serial_Number_Read_7FCountEx78();
int DG_DID_0xF18C_ECU_Serial_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF18C_ECU_Serial_Number_Write_Index;
void DG_DID_0xF18C_ECU_Serial_Number_Write_Start();
void DG_DID_0xF18C_ECU_Serial_Number_Write_Stop();
void DG_DID_0xF18C_ECU_Serial_Number_Write_Save();
int DG_DID_0xF18C_ECU_Serial_Number_Write_IsRunning();
int DG_DID_0xF18C_ECU_Serial_Number_Write_NumMessagesCollected();
int DG_DID_0xF18C_ECU_Serial_Number_Write_IsSuccessful();
int DG_DID_0xF18C_ECU_Serial_Number_Write_ECUResponseCount();
double DG_DID_0xF18C_ECU_Serial_Number_Write_TotalTimeAbs();
int DG_DID_0xF18C_ECU_Serial_Number_Write_Last7FSubFunctionEx78();
int DG_DID_0xF18C_ECU_Serial_Number_Write_7FCountEx78();
int DG_DID_0xF18C_ECU_Serial_Number_Write_7FCountResponsePending();
extern int DG_DID_0xF190_Vehicle_Identification_Number_Read_Index;
void DG_DID_0xF190_Vehicle_Identification_Number_Read_Start();
void DG_DID_0xF190_Vehicle_Identification_Number_Read_Stop();
void DG_DID_0xF190_Vehicle_Identification_Number_Read_Save();
int DG_DID_0xF190_Vehicle_Identification_Number_Read_IsRunning();
int DG_DID_0xF190_Vehicle_Identification_Number_Read_NumMessagesCollected();
int DG_DID_0xF190_Vehicle_Identification_Number_Read_IsSuccessful();
int DG_DID_0xF190_Vehicle_Identification_Number_Read_ECUResponseCount();
double DG_DID_0xF190_Vehicle_Identification_Number_Read_TotalTimeAbs();
int DG_DID_0xF190_Vehicle_Identification_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF190_Vehicle_Identification_Number_Read_7FCountEx78();
int DG_DID_0xF190_Vehicle_Identification_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF190_Vehicle_Identification_Number_Write_Index;
void DG_DID_0xF190_Vehicle_Identification_Number_Write_Start();
void DG_DID_0xF190_Vehicle_Identification_Number_Write_Stop();
void DG_DID_0xF190_Vehicle_Identification_Number_Write_Save();
int DG_DID_0xF190_Vehicle_Identification_Number_Write_IsRunning();
int DG_DID_0xF190_Vehicle_Identification_Number_Write_NumMessagesCollected();
int DG_DID_0xF190_Vehicle_Identification_Number_Write_IsSuccessful();
int DG_DID_0xF190_Vehicle_Identification_Number_Write_ECUResponseCount();
double DG_DID_0xF190_Vehicle_Identification_Number_Write_TotalTimeAbs();
int DG_DID_0xF190_Vehicle_Identification_Number_Write_Last7FSubFunctionEx78();
int DG_DID_0xF190_Vehicle_Identification_Number_Write_7FCountEx78();
int DG_DID_0xF190_Vehicle_Identification_Number_Write_7FCountResponsePending();
extern int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_Index;
void DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_Start();
void DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_Stop();
void DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_Save();
int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_IsRunning();
int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_IsSuccessful();
int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_ECUResponseCount();
double DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_7FCountEx78();
int DG_DID_0xF193_system_Supplier_ECU_Hardware_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_Index;
void DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_Start();
void DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_Stop();
void DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_Save();
int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_IsRunning();
int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xF195_system_Supplier_ECU_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_Index;
void DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_Start();
void DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_Stop();
void DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_Save();
int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_IsRunning();
int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_NumMessagesCollected();
int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_IsSuccessful();
int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_ECUResponseCount();
double DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_TotalTimeAbs();
int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_7FCountEx78();
int DG_DID_0xF1A2_C_Matrix_version_of_the_ECU_product_Read_7FCountResponsePending();
extern int DG_DID_0xF1A1_Vehicle_network_configuration_Read_Index;
void DG_DID_0xF1A1_Vehicle_network_configuration_Read_Start();
void DG_DID_0xF1A1_Vehicle_network_configuration_Read_Stop();
void DG_DID_0xF1A1_Vehicle_network_configuration_Read_Save();
int DG_DID_0xF1A1_Vehicle_network_configuration_Read_IsRunning();
int DG_DID_0xF1A1_Vehicle_network_configuration_Read_NumMessagesCollected();
int DG_DID_0xF1A1_Vehicle_network_configuration_Read_IsSuccessful();
int DG_DID_0xF1A1_Vehicle_network_configuration_Read_ECUResponseCount();
double DG_DID_0xF1A1_Vehicle_network_configuration_Read_TotalTimeAbs();
int DG_DID_0xF1A1_Vehicle_network_configuration_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1A1_Vehicle_network_configuration_Read_7FCountEx78();
int DG_DID_0xF1A1_Vehicle_network_configuration_Read_7FCountResponsePending();
extern int DG_DID_0xF1A1_Vehicle_network_configuration_Write_Index;
void DG_DID_0xF1A1_Vehicle_network_configuration_Write_Start();
void DG_DID_0xF1A1_Vehicle_network_configuration_Write_Stop();
void DG_DID_0xF1A1_Vehicle_network_configuration_Write_Save();
int DG_DID_0xF1A1_Vehicle_network_configuration_Write_IsRunning();
int DG_DID_0xF1A1_Vehicle_network_configuration_Write_NumMessagesCollected();
int DG_DID_0xF1A1_Vehicle_network_configuration_Write_IsSuccessful();
int DG_DID_0xF1A1_Vehicle_network_configuration_Write_ECUResponseCount();
double DG_DID_0xF1A1_Vehicle_network_configuration_Write_TotalTimeAbs();
int DG_DID_0xF1A1_Vehicle_network_configuration_Write_Last7FSubFunctionEx78();
int DG_DID_0xF1A1_Vehicle_network_configuration_Write_7FCountEx78();
int DG_DID_0xF1A1_Vehicle_network_configuration_Write_7FCountResponsePending();
extern int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_Index;
void DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_Start();
void DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_Stop();
void DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_Save();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_IsRunning();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_NumMessagesCollected();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_IsSuccessful();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_ECUResponseCount();
double DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_TotalTimeAbs();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_7FCountEx78();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Read_7FCountResponsePending();
extern int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_Index;
void DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_Start();
void DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_Stop();
void DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_Save();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_IsRunning();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_NumMessagesCollected();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_IsSuccessful();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_ECUResponseCount();
double DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_TotalTimeAbs();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_Last7FSubFunctionEx78();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_7FCountEx78();
int DG_DID_0xF1B0_Vehicle_Network_Configuration_Write_7FCountResponsePending();
extern int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_Index;
void DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_Start();
void DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_Stop();
void DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_Save();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_IsRunning();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_NumMessagesCollected();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_IsSuccessful();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_ECUResponseCount();
double DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_TotalTimeAbs();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_7FCountEx78();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Read_7FCountResponsePending();
extern int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_Index;
void DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_Start();
void DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_Stop();
void DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_Save();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_IsRunning();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_NumMessagesCollected();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_IsSuccessful();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_ECUResponseCount();
double DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_TotalTimeAbs();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_Last7FSubFunctionEx78();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_7FCountEx78();
int DG_DID_0xF1B1_ECU_Level_Network_Configuration_Write_7FCountResponsePending();
extern int DG_DID_0xF1B2_Identifier_Read_Index;
void DG_DID_0xF1B2_Identifier_Read_Start();
void DG_DID_0xF1B2_Identifier_Read_Stop();
void DG_DID_0xF1B2_Identifier_Read_Save();
int DG_DID_0xF1B2_Identifier_Read_IsRunning();
int DG_DID_0xF1B2_Identifier_Read_NumMessagesCollected();
int DG_DID_0xF1B2_Identifier_Read_IsSuccessful();
int DG_DID_0xF1B2_Identifier_Read_ECUResponseCount();
double DG_DID_0xF1B2_Identifier_Read_TotalTimeAbs();
int DG_DID_0xF1B2_Identifier_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B2_Identifier_Read_7FCountEx78();
int DG_DID_0xF1B2_Identifier_Read_7FCountResponsePending();
extern int DG_DID_0xF1B3_Node_Address_Read_Index;
void DG_DID_0xF1B3_Node_Address_Read_Start();
void DG_DID_0xF1B3_Node_Address_Read_Stop();
void DG_DID_0xF1B3_Node_Address_Read_Save();
int DG_DID_0xF1B3_Node_Address_Read_IsRunning();
int DG_DID_0xF1B3_Node_Address_Read_NumMessagesCollected();
int DG_DID_0xF1B3_Node_Address_Read_IsSuccessful();
int DG_DID_0xF1B3_Node_Address_Read_ECUResponseCount();
double DG_DID_0xF1B3_Node_Address_Read_TotalTimeAbs();
int DG_DID_0xF1B3_Node_Address_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B3_Node_Address_Read_7FCountEx78();
int DG_DID_0xF1B3_Node_Address_Read_7FCountResponsePending();
extern int DG_DID_0xF1B4_Compl_ID1_Read_Index;
void DG_DID_0xF1B4_Compl_ID1_Read_Start();
void DG_DID_0xF1B4_Compl_ID1_Read_Stop();
void DG_DID_0xF1B4_Compl_ID1_Read_Save();
int DG_DID_0xF1B4_Compl_ID1_Read_IsRunning();
int DG_DID_0xF1B4_Compl_ID1_Read_NumMessagesCollected();
int DG_DID_0xF1B4_Compl_ID1_Read_IsSuccessful();
int DG_DID_0xF1B4_Compl_ID1_Read_ECUResponseCount();
double DG_DID_0xF1B4_Compl_ID1_Read_TotalTimeAbs();
int DG_DID_0xF1B4_Compl_ID1_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B4_Compl_ID1_Read_7FCountEx78();
int DG_DID_0xF1B4_Compl_ID1_Read_7FCountResponsePending();
extern int DG_DID_0xF1B9_Compl_ID2_Read_Index;
void DG_DID_0xF1B9_Compl_ID2_Read_Start();
void DG_DID_0xF1B9_Compl_ID2_Read_Stop();
void DG_DID_0xF1B9_Compl_ID2_Read_Save();
int DG_DID_0xF1B9_Compl_ID2_Read_IsRunning();
int DG_DID_0xF1B9_Compl_ID2_Read_NumMessagesCollected();
int DG_DID_0xF1B9_Compl_ID2_Read_IsSuccessful();
int DG_DID_0xF1B9_Compl_ID2_Read_ECUResponseCount();
double DG_DID_0xF1B9_Compl_ID2_Read_TotalTimeAbs();
int DG_DID_0xF1B9_Compl_ID2_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B9_Compl_ID2_Read_7FCountEx78();
int DG_DID_0xF1B9_Compl_ID2_Read_7FCountResponsePending();
extern int DG_DID_0xF1B5_Name_Read_Index;
void DG_DID_0xF1B5_Name_Read_Start();
void DG_DID_0xF1B5_Name_Read_Stop();
void DG_DID_0xF1B5_Name_Read_Save();
int DG_DID_0xF1B5_Name_Read_IsRunning();
int DG_DID_0xF1B5_Name_Read_NumMessagesCollected();
int DG_DID_0xF1B5_Name_Read_IsSuccessful();
int DG_DID_0xF1B5_Name_Read_ECUResponseCount();
double DG_DID_0xF1B5_Name_Read_TotalTimeAbs();
int DG_DID_0xF1B5_Name_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B5_Name_Read_7FCountEx78();
int DG_DID_0xF1B5_Name_Read_7FCountResponsePending();
extern int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_Index;
void DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_Start();
void DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_Stop();
void DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_Save();
int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_IsRunning();
int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_NumMessagesCollected();
int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_IsSuccessful();
int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_ECUResponseCount();
double DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_TotalTimeAbs();
int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_7FCountEx78();
int DG_DID_0xF1B8_Inatallation_Result_Confirm_Read_7FCountResponsePending();
extern int DG_DID_0xF0_FF_FingerPrint_SOC_Read_Index;
void DG_DID_0xF0_FF_FingerPrint_SOC_Read_Start();
void DG_DID_0xF0_FF_FingerPrint_SOC_Read_Stop();
void DG_DID_0xF0_FF_FingerPrint_SOC_Read_Save();
int DG_DID_0xF0_FF_FingerPrint_SOC_Read_IsRunning();
int DG_DID_0xF0_FF_FingerPrint_SOC_Read_NumMessagesCollected();
int DG_DID_0xF0_FF_FingerPrint_SOC_Read_IsSuccessful();
int DG_DID_0xF0_FF_FingerPrint_SOC_Read_ECUResponseCount();
double DG_DID_0xF0_FF_FingerPrint_SOC_Read_TotalTimeAbs();
int DG_DID_0xF0_FF_FingerPrint_SOC_Read_Last7FSubFunctionEx78();
int DG_DID_0xF0_FF_FingerPrint_SOC_Read_7FCountEx78();
int DG_DID_0xF0_FF_FingerPrint_SOC_Read_7FCountResponsePending();
extern int DG_DID_0xF0_FF_FingerPrint_SOC_Write_Index;
void DG_DID_0xF0_FF_FingerPrint_SOC_Write_Start();
void DG_DID_0xF0_FF_FingerPrint_SOC_Write_Stop();
void DG_DID_0xF0_FF_FingerPrint_SOC_Write_Save();
int DG_DID_0xF0_FF_FingerPrint_SOC_Write_IsRunning();
int DG_DID_0xF0_FF_FingerPrint_SOC_Write_NumMessagesCollected();
int DG_DID_0xF0_FF_FingerPrint_SOC_Write_IsSuccessful();
int DG_DID_0xF0_FF_FingerPrint_SOC_Write_ECUResponseCount();
double DG_DID_0xF0_FF_FingerPrint_SOC_Write_TotalTimeAbs();
int DG_DID_0xF0_FF_FingerPrint_SOC_Write_Last7FSubFunctionEx78();
int DG_DID_0xF0_FF_FingerPrint_SOC_Write_7FCountEx78();
int DG_DID_0xF0_FF_FingerPrint_SOC_Write_7FCountResponsePending();
extern int DG_DID_0xF1_F0_FingerPrint_MCU_Read_Index;
void DG_DID_0xF1_F0_FingerPrint_MCU_Read_Start();
void DG_DID_0xF1_F0_FingerPrint_MCU_Read_Stop();
void DG_DID_0xF1_F0_FingerPrint_MCU_Read_Save();
int DG_DID_0xF1_F0_FingerPrint_MCU_Read_IsRunning();
int DG_DID_0xF1_F0_FingerPrint_MCU_Read_NumMessagesCollected();
int DG_DID_0xF1_F0_FingerPrint_MCU_Read_IsSuccessful();
int DG_DID_0xF1_F0_FingerPrint_MCU_Read_ECUResponseCount();
double DG_DID_0xF1_F0_FingerPrint_MCU_Read_TotalTimeAbs();
int DG_DID_0xF1_F0_FingerPrint_MCU_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1_F0_FingerPrint_MCU_Read_7FCountEx78();
int DG_DID_0xF1_F0_FingerPrint_MCU_Read_7FCountResponsePending();
extern int DG_DID_0xF1_F0_FingerPrint_MCU_Write_Index;
void DG_DID_0xF1_F0_FingerPrint_MCU_Write_Start();
void DG_DID_0xF1_F0_FingerPrint_MCU_Write_Stop();
void DG_DID_0xF1_F0_FingerPrint_MCU_Write_Save();
int DG_DID_0xF1_F0_FingerPrint_MCU_Write_IsRunning();
int DG_DID_0xF1_F0_FingerPrint_MCU_Write_NumMessagesCollected();
int DG_DID_0xF1_F0_FingerPrint_MCU_Write_IsSuccessful();
int DG_DID_0xF1_F0_FingerPrint_MCU_Write_ECUResponseCount();
double DG_DID_0xF1_F0_FingerPrint_MCU_Write_TotalTimeAbs();
int DG_DID_0xF1_F0_FingerPrint_MCU_Write_Last7FSubFunctionEx78();
int DG_DID_0xF1_F0_FingerPrint_MCU_Write_7FCountEx78();
int DG_DID_0xF1_F0_FingerPrint_MCU_Write_7FCountResponsePending();
extern int DG_DID_0xF1B6_Tool_Version_Read_Index;
void DG_DID_0xF1B6_Tool_Version_Read_Start();
void DG_DID_0xF1B6_Tool_Version_Read_Stop();
void DG_DID_0xF1B6_Tool_Version_Read_Save();
int DG_DID_0xF1B6_Tool_Version_Read_IsRunning();
int DG_DID_0xF1B6_Tool_Version_Read_NumMessagesCollected();
int DG_DID_0xF1B6_Tool_Version_Read_IsSuccessful();
int DG_DID_0xF1B6_Tool_Version_Read_ECUResponseCount();
double DG_DID_0xF1B6_Tool_Version_Read_TotalTimeAbs();
int DG_DID_0xF1B6_Tool_Version_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1B6_Tool_Version_Read_7FCountEx78();
int DG_DID_0xF1B6_Tool_Version_Read_7FCountResponsePending();
extern int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_Index;
void DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_Start();
void DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_Stop();
void DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_Save();
int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_IsRunning();
int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xF1A4_Supplier_ECU_Calibration_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_Index;
void DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_Start();
void DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_Stop();
void DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_Save();
int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_IsRunning();
int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_NumMessagesCollected();
int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_IsSuccessful();
int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_ECUResponseCount();
double DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_TotalTimeAbs();
int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_7FCountEx78();
int DG_DID_0xF1AA_Application_Software_Programming_Success_Counter_Read_7FCountResponsePending();
extern int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_Index;
void DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_Start();
void DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_Stop();
void DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_Save();
int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_IsRunning();
int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_NumMessagesCollected();
int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_IsSuccessful();
int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_ECUResponseCount();
double DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_TotalTimeAbs();
int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_7FCountEx78();
int DG_DID_0xF1A5_Application_Software_Programming_Attempt_Counter_Read_7FCountResponsePending();
extern int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_Index;
void DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_Start();
void DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_Stop();
void DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_Save();
int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_IsRunning();
int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_NumMessagesCollected();
int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_IsSuccessful();
int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_ECUResponseCount();
double DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_TotalTimeAbs();
int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_Last7FSubFunctionEx78();
int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_7FCountEx78();
int DG_DID_0xF1A9_Max_Allowed_Programming_Timer_Read_7FCountResponsePending();
extern int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_Index;
void DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_Start();
void DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_Stop();
void DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_Save();
int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_IsRunning();
int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xF184_Supplier_ECU_Application_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_Index;
void DG_DID_0xFE_05_Current_Diagnostic_Session_Read_Start();
void DG_DID_0xFE_05_Current_Diagnostic_Session_Read_Stop();
void DG_DID_0xFE_05_Current_Diagnostic_Session_Read_Save();
int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_IsRunning();
int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_NumMessagesCollected();
int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_IsSuccessful();
int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_ECUResponseCount();
double DG_DID_0xFE_05_Current_Diagnostic_Session_Read_TotalTimeAbs();
int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_7FCountEx78();
int DG_DID_0xFE_05_Current_Diagnostic_Session_Read_7FCountResponsePending();
extern int DG_DID_0xFE_06_ECU_Working_State_Read_Index;
void DG_DID_0xFE_06_ECU_Working_State_Read_Start();
void DG_DID_0xFE_06_ECU_Working_State_Read_Stop();
void DG_DID_0xFE_06_ECU_Working_State_Read_Save();
int DG_DID_0xFE_06_ECU_Working_State_Read_IsRunning();
int DG_DID_0xFE_06_ECU_Working_State_Read_NumMessagesCollected();
int DG_DID_0xFE_06_ECU_Working_State_Read_IsSuccessful();
int DG_DID_0xFE_06_ECU_Working_State_Read_ECUResponseCount();
double DG_DID_0xFE_06_ECU_Working_State_Read_TotalTimeAbs();
int DG_DID_0xFE_06_ECU_Working_State_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_06_ECU_Working_State_Read_7FCountEx78();
int DG_DID_0xFE_06_ECU_Working_State_Read_7FCountResponsePending();
extern int DG_DID_0xFE_04_TTE_ADC_Value_Read_Index;
void DG_DID_0xFE_04_TTE_ADC_Value_Read_Start();
void DG_DID_0xFE_04_TTE_ADC_Value_Read_Stop();
void DG_DID_0xFE_04_TTE_ADC_Value_Read_Save();
int DG_DID_0xFE_04_TTE_ADC_Value_Read_IsRunning();
int DG_DID_0xFE_04_TTE_ADC_Value_Read_NumMessagesCollected();
int DG_DID_0xFE_04_TTE_ADC_Value_Read_IsSuccessful();
int DG_DID_0xFE_04_TTE_ADC_Value_Read_ECUResponseCount();
double DG_DID_0xFE_04_TTE_ADC_Value_Read_TotalTimeAbs();
int DG_DID_0xFE_04_TTE_ADC_Value_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_04_TTE_ADC_Value_Read_7FCountEx78();
int DG_DID_0xFE_04_TTE_ADC_Value_Read_7FCountResponsePending();
extern int DG_DID_0xFE_10_CPU_Initial_State_Read_Index;
void DG_DID_0xFE_10_CPU_Initial_State_Read_Start();
void DG_DID_0xFE_10_CPU_Initial_State_Read_Stop();
void DG_DID_0xFE_10_CPU_Initial_State_Read_Save();
int DG_DID_0xFE_10_CPU_Initial_State_Read_IsRunning();
int DG_DID_0xFE_10_CPU_Initial_State_Read_NumMessagesCollected();
int DG_DID_0xFE_10_CPU_Initial_State_Read_IsSuccessful();
int DG_DID_0xFE_10_CPU_Initial_State_Read_ECUResponseCount();
double DG_DID_0xFE_10_CPU_Initial_State_Read_TotalTimeAbs();
int DG_DID_0xFE_10_CPU_Initial_State_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_10_CPU_Initial_State_Read_7FCountEx78();
int DG_DID_0xFE_10_CPU_Initial_State_Read_7FCountResponsePending();
extern int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_Index;
void DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_Start();
void DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_Stop();
void DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_Save();
int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_IsRunning();
int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_NumMessagesCollected();
int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_IsSuccessful();
int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_ECUResponseCount();
double DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_TotalTimeAbs();
int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_7FCountEx78();
int DG_DID_0xFE_41_Front_Camera_Input_Failed_Snapshot_Read_7FCountResponsePending();
extern int DG_DID_0xFE_51_Front_Camera_Input_State_Read_Index;
void DG_DID_0xFE_51_Front_Camera_Input_State_Read_Start();
void DG_DID_0xFE_51_Front_Camera_Input_State_Read_Stop();
void DG_DID_0xFE_51_Front_Camera_Input_State_Read_Save();
int DG_DID_0xFE_51_Front_Camera_Input_State_Read_IsRunning();
int DG_DID_0xFE_51_Front_Camera_Input_State_Read_NumMessagesCollected();
int DG_DID_0xFE_51_Front_Camera_Input_State_Read_IsSuccessful();
int DG_DID_0xFE_51_Front_Camera_Input_State_Read_ECUResponseCount();
double DG_DID_0xFE_51_Front_Camera_Input_State_Read_TotalTimeAbs();
int DG_DID_0xFE_51_Front_Camera_Input_State_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_51_Front_Camera_Input_State_Read_7FCountEx78();
int DG_DID_0xFE_51_Front_Camera_Input_State_Read_7FCountResponsePending();
extern int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_Index;
void DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_Start();
void DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_Stop();
void DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_Save();
int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_IsRunning();
int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_NumMessagesCollected();
int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_IsSuccessful();
int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_ECUResponseCount();
double DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_TotalTimeAbs();
int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_7FCountEx78();
int DG_DID_0xFE_42_Rear_Camera_Input_Failed_Snapshot_Read_7FCountResponsePending();
extern int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_Index;
void DG_DID_0xFE_52_Rear_Camera_Input_State_Read_Start();
void DG_DID_0xFE_52_Rear_Camera_Input_State_Read_Stop();
void DG_DID_0xFE_52_Rear_Camera_Input_State_Read_Save();
int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_IsRunning();
int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_NumMessagesCollected();
int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_IsSuccessful();
int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_ECUResponseCount();
double DG_DID_0xFE_52_Rear_Camera_Input_State_Read_TotalTimeAbs();
int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_7FCountEx78();
int DG_DID_0xFE_52_Rear_Camera_Input_State_Read_7FCountResponsePending();
extern int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_Index;
void DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_Start();
void DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_Stop();
void DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_Save();
int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_IsRunning();
int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_NumMessagesCollected();
int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_IsSuccessful();
int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_ECUResponseCount();
double DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_TotalTimeAbs();
int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_7FCountEx78();
int DG_DID_0xFE_43_Left_Camera_Input_Failed_Snapshot_Read_7FCountResponsePending();
extern int DG_DID_0xFE_53_Left_Camera_Input_State_Read_Index;
void DG_DID_0xFE_53_Left_Camera_Input_State_Read_Start();
void DG_DID_0xFE_53_Left_Camera_Input_State_Read_Stop();
void DG_DID_0xFE_53_Left_Camera_Input_State_Read_Save();
int DG_DID_0xFE_53_Left_Camera_Input_State_Read_IsRunning();
int DG_DID_0xFE_53_Left_Camera_Input_State_Read_NumMessagesCollected();
int DG_DID_0xFE_53_Left_Camera_Input_State_Read_IsSuccessful();
int DG_DID_0xFE_53_Left_Camera_Input_State_Read_ECUResponseCount();
double DG_DID_0xFE_53_Left_Camera_Input_State_Read_TotalTimeAbs();
int DG_DID_0xFE_53_Left_Camera_Input_State_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_53_Left_Camera_Input_State_Read_7FCountEx78();
int DG_DID_0xFE_53_Left_Camera_Input_State_Read_7FCountResponsePending();
extern int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_Index;
void DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_Start();
void DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_Stop();
void DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_Save();
int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_IsRunning();
int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_NumMessagesCollected();
int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_IsSuccessful();
int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_ECUResponseCount();
double DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_TotalTimeAbs();
int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_7FCountEx78();
int DG_DID_0xFE_44_Right_Camera_Input_Failed_Snapshot_Read_7FCountResponsePending();
extern int DG_DID_0xFE_54_Right_Camera_Input_State_Read_Index;
void DG_DID_0xFE_54_Right_Camera_Input_State_Read_Start();
void DG_DID_0xFE_54_Right_Camera_Input_State_Read_Stop();
void DG_DID_0xFE_54_Right_Camera_Input_State_Read_Save();
int DG_DID_0xFE_54_Right_Camera_Input_State_Read_IsRunning();
int DG_DID_0xFE_54_Right_Camera_Input_State_Read_NumMessagesCollected();
int DG_DID_0xFE_54_Right_Camera_Input_State_Read_IsSuccessful();
int DG_DID_0xFE_54_Right_Camera_Input_State_Read_ECUResponseCount();
double DG_DID_0xFE_54_Right_Camera_Input_State_Read_TotalTimeAbs();
int DG_DID_0xFE_54_Right_Camera_Input_State_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_54_Right_Camera_Input_State_Read_7FCountEx78();
int DG_DID_0xFE_54_Right_Camera_Input_State_Read_7FCountResponsePending();
extern int DG_DID_0xFD_20_FPAS_Current_Detection_Read_Index;
void DG_DID_0xFD_20_FPAS_Current_Detection_Read_Start();
void DG_DID_0xFD_20_FPAS_Current_Detection_Read_Stop();
void DG_DID_0xFD_20_FPAS_Current_Detection_Read_Save();
int DG_DID_0xFD_20_FPAS_Current_Detection_Read_IsRunning();
int DG_DID_0xFD_20_FPAS_Current_Detection_Read_NumMessagesCollected();
int DG_DID_0xFD_20_FPAS_Current_Detection_Read_IsSuccessful();
int DG_DID_0xFD_20_FPAS_Current_Detection_Read_ECUResponseCount();
double DG_DID_0xFD_20_FPAS_Current_Detection_Read_TotalTimeAbs();
int DG_DID_0xFD_20_FPAS_Current_Detection_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_20_FPAS_Current_Detection_Read_7FCountEx78();
int DG_DID_0xFD_20_FPAS_Current_Detection_Read_7FCountResponsePending();
extern int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_Index;
void DG_DID_0xFD_22_FPAS_Current_RingTime_Read_Start();
void DG_DID_0xFD_22_FPAS_Current_RingTime_Read_Stop();
void DG_DID_0xFD_22_FPAS_Current_RingTime_Read_Save();
int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_IsRunning();
int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_NumMessagesCollected();
int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_IsSuccessful();
int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_ECUResponseCount();
double DG_DID_0xFD_22_FPAS_Current_RingTime_Read_TotalTimeAbs();
int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_7FCountEx78();
int DG_DID_0xFD_22_FPAS_Current_RingTime_Read_7FCountResponsePending();
extern int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_Index;
void DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_Start();
void DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_Stop();
void DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_Save();
int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_IsRunning();
int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_NumMessagesCollected();
int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_IsSuccessful();
int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_ECUResponseCount();
double DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_TotalTimeAbs();
int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_7FCountEx78();
int DG_DID_0xFD_24_FPAS_Normal_RingTime_Read_7FCountResponsePending();
extern int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_Index;
void DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_Start();
void DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_Stop();
void DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_Save();
int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_IsRunning();
int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_NumMessagesCollected();
int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_IsSuccessful();
int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_ECUResponseCount();
double DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_TotalTimeAbs();
int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_7FCountEx78();
int DG_DID_0xFD_25_RPAS_Normal_RingTime_Read_7FCountResponsePending();
extern int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_Index;
void DG_DID_0xFD_23_RPAS_Current_RingTime_Read_Start();
void DG_DID_0xFD_23_RPAS_Current_RingTime_Read_Stop();
void DG_DID_0xFD_23_RPAS_Current_RingTime_Read_Save();
int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_IsRunning();
int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_NumMessagesCollected();
int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_IsSuccessful();
int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_ECUResponseCount();
double DG_DID_0xFD_23_RPAS_Current_RingTime_Read_TotalTimeAbs();
int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_7FCountEx78();
int DG_DID_0xFD_23_RPAS_Current_RingTime_Read_7FCountResponsePending();
extern int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_Index;
void DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_Start();
void DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_Stop();
void DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_Save();
int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_IsRunning();
int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_NumMessagesCollected();
int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_IsSuccessful();
int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_ECUResponseCount();
double DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_TotalTimeAbs();
int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_7FCountEx78();
int DG_DID_0xFD_31_PAS_Status_and_Disable_Cause_Read_7FCountResponsePending();
extern int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_Index;
void DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_Start();
void DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_Stop();
void DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_Save();
int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_IsRunning();
int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_NumMessagesCollected();
int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_IsSuccessful();
int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_ECUResponseCount();
double DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_TotalTimeAbs();
int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_7FCountEx78();
int DG_DID_0xFD_32_HAP_Status_and_Disable_Cause_Read_7FCountResponsePending();
extern int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_Index;
void DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_Start();
void DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_Stop();
void DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_Save();
int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_IsRunning();
int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_NumMessagesCollected();
int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_IsSuccessful();
int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_ECUResponseCount();
double DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_TotalTimeAbs();
int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_7FCountEx78();
int DG_DID_0xFD_33_SDG_Status_and_Disable_Cause_Read_7FCountResponsePending();
extern int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_Index;
void DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_Start();
void DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_Stop();
void DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_Save();
int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_IsRunning();
int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_NumMessagesCollected();
int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_IsSuccessful();
int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_ECUResponseCount();
double DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_TotalTimeAbs();
int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_7FCountEx78();
int DG_DID_0xFD_34_MEB_Status_and_Disable_Cause_Read_7FCountResponsePending();
extern int DG_DID_0xFD_30_HAP_Failed_Cause_Read_Index;
void DG_DID_0xFD_30_HAP_Failed_Cause_Read_Start();
void DG_DID_0xFD_30_HAP_Failed_Cause_Read_Stop();
void DG_DID_0xFD_30_HAP_Failed_Cause_Read_Save();
int DG_DID_0xFD_30_HAP_Failed_Cause_Read_IsRunning();
int DG_DID_0xFD_30_HAP_Failed_Cause_Read_NumMessagesCollected();
int DG_DID_0xFD_30_HAP_Failed_Cause_Read_IsSuccessful();
int DG_DID_0xFD_30_HAP_Failed_Cause_Read_ECUResponseCount();
double DG_DID_0xFD_30_HAP_Failed_Cause_Read_TotalTimeAbs();
int DG_DID_0xFD_30_HAP_Failed_Cause_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_30_HAP_Failed_Cause_Read_7FCountEx78();
int DG_DID_0xFD_30_HAP_Failed_Cause_Read_7FCountResponsePending();
extern int DG_DID_0xFD_21_RPAS_Current_Detection_Read_Index;
void DG_DID_0xFD_21_RPAS_Current_Detection_Read_Start();
void DG_DID_0xFD_21_RPAS_Current_Detection_Read_Stop();
void DG_DID_0xFD_21_RPAS_Current_Detection_Read_Save();
int DG_DID_0xFD_21_RPAS_Current_Detection_Read_IsRunning();
int DG_DID_0xFD_21_RPAS_Current_Detection_Read_NumMessagesCollected();
int DG_DID_0xFD_21_RPAS_Current_Detection_Read_IsSuccessful();
int DG_DID_0xFD_21_RPAS_Current_Detection_Read_ECUResponseCount();
double DG_DID_0xFD_21_RPAS_Current_Detection_Read_TotalTimeAbs();
int DG_DID_0xFD_21_RPAS_Current_Detection_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_21_RPAS_Current_Detection_Read_7FCountEx78();
int DG_DID_0xFD_21_RPAS_Current_Detection_Read_7FCountResponsePending();
extern int DG_DID_0xFE_12_CPU_Work_State_Read_Index;
void DG_DID_0xFE_12_CPU_Work_State_Read_Start();
void DG_DID_0xFE_12_CPU_Work_State_Read_Stop();
void DG_DID_0xFE_12_CPU_Work_State_Read_Save();
int DG_DID_0xFE_12_CPU_Work_State_Read_IsRunning();
int DG_DID_0xFE_12_CPU_Work_State_Read_NumMessagesCollected();
int DG_DID_0xFE_12_CPU_Work_State_Read_IsSuccessful();
int DG_DID_0xFE_12_CPU_Work_State_Read_ECUResponseCount();
double DG_DID_0xFE_12_CPU_Work_State_Read_TotalTimeAbs();
int DG_DID_0xFE_12_CPU_Work_State_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_12_CPU_Work_State_Read_7FCountEx78();
int DG_DID_0xFE_12_CPU_Work_State_Read_7FCountResponsePending();
extern int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_Index;
void DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_Start();
void DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_Stop();
void DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_Save();
int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_IsRunning();
int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_NumMessagesCollected();
int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_IsSuccessful();
int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_ECUResponseCount();
double DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_TotalTimeAbs();
int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_7FCountEx78();
int DG_DID_0xFE_03_ECU_Power_Supply_Voltage_Read_7FCountResponsePending();
extern int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_Index;
void DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_Start();
void DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_Stop();
void DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_Save();
int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_IsRunning();
int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_NumMessagesCollected();
int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_IsSuccessful();
int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_ECUResponseCount();
double DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_TotalTimeAbs();
int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_7FCountEx78();
int DG_DID_0xFD_29_HAP_Park_Slot_Information_Read_7FCountResponsePending();
extern int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_Index;
void DG_DID_0xFE_20_DSP_Software_Version_Number_Read_Start();
void DG_DID_0xFE_20_DSP_Software_Version_Number_Read_Stop();
void DG_DID_0xFE_20_DSP_Software_Version_Number_Read_Save();
int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_IsRunning();
int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFE_20_DSP_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xFE_20_DSP_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_Index;
void DG_DID_0xFE_24_MCU_Software_Version_Number_Read_Start();
void DG_DID_0xFE_24_MCU_Software_Version_Number_Read_Stop();
void DG_DID_0xFE_24_MCU_Software_Version_Number_Read_Save();
int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_IsRunning();
int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFE_24_MCU_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xFE_24_MCU_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_Index;
void DG_DID_0xFF_08_MPU_Software_Version_Number_Read_Start();
void DG_DID_0xFF_08_MPU_Software_Version_Number_Read_Stop();
void DG_DID_0xFF_08_MPU_Software_Version_Number_Read_Save();
int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_IsRunning();
int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFF_08_MPU_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xFF_08_MPU_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_Index;
void DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_Start();
void DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_Stop();
void DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_Save();
int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_IsRunning();
int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xFF_0A_IPU_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_Index;
void DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_Start();
void DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_Stop();
void DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_Save();
int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_IsRunning();
int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_NumMessagesCollected();
int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_IsSuccessful();
int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_ECUResponseCount();
double DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_TotalTimeAbs();
int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_7FCountEx78();
int DG_DID_0xFE_21_DSP_Software_Compile_Date_Read_7FCountResponsePending();
extern int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_Index;
void DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_Start();
void DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_Stop();
void DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_Save();
int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_IsRunning();
int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_NumMessagesCollected();
int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_IsSuccessful();
int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_ECUResponseCount();
double DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_TotalTimeAbs();
int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_7FCountEx78();
int DG_DID_0xFE_23_MCU_FBL_Compile_Date_Read_7FCountResponsePending();
extern int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_Index;
void DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_Start();
void DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_Stop();
void DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_Save();
int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_IsRunning();
int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_NumMessagesCollected();
int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_IsSuccessful();
int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_ECUResponseCount();
double DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_TotalTimeAbs();
int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_7FCountEx78();
int DG_DID_0xFE_25_MCU_Software_Compile_Date_Read_7FCountResponsePending();
extern int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_Index;
void DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_Start();
void DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_Stop();
void DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_Save();
int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_IsRunning();
int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_NumMessagesCollected();
int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_IsSuccessful();
int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_ECUResponseCount();
double DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_TotalTimeAbs();
int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_Last7FSubFunctionEx78();
int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_7FCountEx78();
int DG_DID_0xFF_09_MPU_Software_Compile_Date_Read_7FCountResponsePending();
extern int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_Index;
void DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_Start();
void DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_Stop();
void DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_Save();
int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_IsRunning();
int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_NumMessagesCollected();
int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_IsSuccessful();
int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_ECUResponseCount();
double DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_TotalTimeAbs();
int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_Last7FSubFunctionEx78();
int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_7FCountEx78();
int DG_DID_0xFF_0B_IPU_Software_Compile_Date_Read_7FCountResponsePending();
extern int DG_DID_0xFE_26_Calibration_Data_Version_Read_Index;
void DG_DID_0xFE_26_Calibration_Data_Version_Read_Start();
void DG_DID_0xFE_26_Calibration_Data_Version_Read_Stop();
void DG_DID_0xFE_26_Calibration_Data_Version_Read_Save();
int DG_DID_0xFE_26_Calibration_Data_Version_Read_IsRunning();
int DG_DID_0xFE_26_Calibration_Data_Version_Read_NumMessagesCollected();
int DG_DID_0xFE_26_Calibration_Data_Version_Read_IsSuccessful();
int DG_DID_0xFE_26_Calibration_Data_Version_Read_ECUResponseCount();
double DG_DID_0xFE_26_Calibration_Data_Version_Read_TotalTimeAbs();
int DG_DID_0xFE_26_Calibration_Data_Version_Read_Last7FSubFunctionEx78();
int DG_DID_0xFE_26_Calibration_Data_Version_Read_7FCountEx78();
int DG_DID_0xFE_26_Calibration_Data_Version_Read_7FCountResponsePending();
extern int DG_DVTRequestSeed_Request_Index;
void DG_DVTRequestSeed_Request_Start();
void DG_DVTRequestSeed_Request_Stop();
void DG_DVTRequestSeed_Request_Save();
int DG_DVTRequestSeed_Request_IsRunning();
int DG_DVTRequestSeed_Request_NumMessagesCollected();
int DG_DVTRequestSeed_Request_IsSuccessful();
int DG_DVTRequestSeed_Request_ECUResponseCount();
double DG_DVTRequestSeed_Request_TotalTimeAbs();
int DG_DVTRequestSeed_Request_Last7FSubFunctionEx78();
int DG_DVTRequestSeed_Request_7FCountEx78();
int DG_DVTRequestSeed_Request_7FCountResponsePending();
extern int DG_DVTRequestSeed_Request_NoResponse_Index;
void DG_DVTRequestSeed_Request_NoResponse_Start();
void DG_DVTRequestSeed_Request_NoResponse_Stop();
void DG_DVTRequestSeed_Request_NoResponse_Save();
int DG_DVTRequestSeed_Request_NoResponse_IsRunning();
int DG_DVTRequestSeed_Request_NoResponse_NumMessagesCollected();
int DG_DVTRequestSeed_Request_NoResponse_IsSuccessful();
int DG_DVTRequestSeed_Request_NoResponse_ECUResponseCount();
double DG_DVTRequestSeed_Request_NoResponse_TotalTimeAbs();
int DG_DVTRequestSeed_Request_NoResponse_Last7FSubFunctionEx78();
int DG_DVTRequestSeed_Request_NoResponse_7FCountEx78();
int DG_DVTRequestSeed_Request_NoResponse_7FCountResponsePending();
extern int DG_DVTSendKey_Send_Index;
void DG_DVTSendKey_Send_Start();
void DG_DVTSendKey_Send_Stop();
void DG_DVTSendKey_Send_Save();
int DG_DVTSendKey_Send_IsRunning();
int DG_DVTSendKey_Send_NumMessagesCollected();
int DG_DVTSendKey_Send_IsSuccessful();
int DG_DVTSendKey_Send_ECUResponseCount();
double DG_DVTSendKey_Send_TotalTimeAbs();
int DG_DVTSendKey_Send_Last7FSubFunctionEx78();
int DG_DVTSendKey_Send_7FCountEx78();
int DG_DVTSendKey_Send_7FCountResponsePending();
extern int DG_DVTSendKey_Send_NoResponse_Index;
void DG_DVTSendKey_Send_NoResponse_Start();
void DG_DVTSendKey_Send_NoResponse_Stop();
void DG_DVTSendKey_Send_NoResponse_Save();
int DG_DVTSendKey_Send_NoResponse_IsRunning();
int DG_DVTSendKey_Send_NoResponse_NumMessagesCollected();
int DG_DVTSendKey_Send_NoResponse_IsSuccessful();
int DG_DVTSendKey_Send_NoResponse_ECUResponseCount();
double DG_DVTSendKey_Send_NoResponse_TotalTimeAbs();
int DG_DVTSendKey_Send_NoResponse_Last7FSubFunctionEx78();
int DG_DVTSendKey_Send_NoResponse_7FCountEx78();
int DG_DVTSendKey_Send_NoResponse_7FCountResponsePending();
extern int DG_SeedLevel1_Request_Index;
void DG_SeedLevel1_Request_Start();
void DG_SeedLevel1_Request_Stop();
void DG_SeedLevel1_Request_Save();
int DG_SeedLevel1_Request_IsRunning();
int DG_SeedLevel1_Request_NumMessagesCollected();
int DG_SeedLevel1_Request_IsSuccessful();
int DG_SeedLevel1_Request_ECUResponseCount();
double DG_SeedLevel1_Request_TotalTimeAbs();
int DG_SeedLevel1_Request_Last7FSubFunctionEx78();
int DG_SeedLevel1_Request_7FCountEx78();
int DG_SeedLevel1_Request_7FCountResponsePending();
extern int DG_SeedLevel1_Request_NoResponse_Index;
void DG_SeedLevel1_Request_NoResponse_Start();
void DG_SeedLevel1_Request_NoResponse_Stop();
void DG_SeedLevel1_Request_NoResponse_Save();
int DG_SeedLevel1_Request_NoResponse_IsRunning();
int DG_SeedLevel1_Request_NoResponse_NumMessagesCollected();
int DG_SeedLevel1_Request_NoResponse_IsSuccessful();
int DG_SeedLevel1_Request_NoResponse_ECUResponseCount();
double DG_SeedLevel1_Request_NoResponse_TotalTimeAbs();
int DG_SeedLevel1_Request_NoResponse_Last7FSubFunctionEx78();
int DG_SeedLevel1_Request_NoResponse_7FCountEx78();
int DG_SeedLevel1_Request_NoResponse_7FCountResponsePending();
extern int DG_KeyLevel1_Send_Index;
void DG_KeyLevel1_Send_Start();
void DG_KeyLevel1_Send_Stop();
void DG_KeyLevel1_Send_Save();
int DG_KeyLevel1_Send_IsRunning();
int DG_KeyLevel1_Send_NumMessagesCollected();
int DG_KeyLevel1_Send_IsSuccessful();
int DG_KeyLevel1_Send_ECUResponseCount();
double DG_KeyLevel1_Send_TotalTimeAbs();
int DG_KeyLevel1_Send_Last7FSubFunctionEx78();
int DG_KeyLevel1_Send_7FCountEx78();
int DG_KeyLevel1_Send_7FCountResponsePending();
extern int DG_KeyLevel1_Send_NoResponse_Index;
void DG_KeyLevel1_Send_NoResponse_Start();
void DG_KeyLevel1_Send_NoResponse_Stop();
void DG_KeyLevel1_Send_NoResponse_Save();
int DG_KeyLevel1_Send_NoResponse_IsRunning();
int DG_KeyLevel1_Send_NoResponse_NumMessagesCollected();
int DG_KeyLevel1_Send_NoResponse_IsSuccessful();
int DG_KeyLevel1_Send_NoResponse_ECUResponseCount();
double DG_KeyLevel1_Send_NoResponse_TotalTimeAbs();
int DG_KeyLevel1_Send_NoResponse_Last7FSubFunctionEx78();
int DG_KeyLevel1_Send_NoResponse_7FCountEx78();
int DG_KeyLevel1_Send_NoResponse_7FCountResponsePending();
extern int DG_Hard_Reset_Reset_Index;
void DG_Hard_Reset_Reset_Start();
void DG_Hard_Reset_Reset_Stop();
void DG_Hard_Reset_Reset_Save();
int DG_Hard_Reset_Reset_IsRunning();
int DG_Hard_Reset_Reset_NumMessagesCollected();
int DG_Hard_Reset_Reset_IsSuccessful();
int DG_Hard_Reset_Reset_ECUResponseCount();
double DG_Hard_Reset_Reset_TotalTimeAbs();
int DG_Hard_Reset_Reset_Last7FSubFunctionEx78();
int DG_Hard_Reset_Reset_7FCountEx78();
int DG_Hard_Reset_Reset_7FCountResponsePending();
extern int DG_Hard_Reset_Reset_NoResponse_Index;
void DG_Hard_Reset_Reset_NoResponse_Start();
void DG_Hard_Reset_Reset_NoResponse_Stop();
void DG_Hard_Reset_Reset_NoResponse_Save();
int DG_Hard_Reset_Reset_NoResponse_IsRunning();
int DG_Hard_Reset_Reset_NoResponse_NumMessagesCollected();
int DG_Hard_Reset_Reset_NoResponse_IsSuccessful();
int DG_Hard_Reset_Reset_NoResponse_ECUResponseCount();
double DG_Hard_Reset_Reset_NoResponse_TotalTimeAbs();
int DG_Hard_Reset_Reset_NoResponse_Last7FSubFunctionEx78();
int DG_Hard_Reset_Reset_NoResponse_7FCountEx78();
int DG_Hard_Reset_Reset_NoResponse_7FCountResponsePending();
extern int DG_Soft_Reset_Reset_Index;
void DG_Soft_Reset_Reset_Start();
void DG_Soft_Reset_Reset_Stop();
void DG_Soft_Reset_Reset_Save();
int DG_Soft_Reset_Reset_IsRunning();
int DG_Soft_Reset_Reset_NumMessagesCollected();
int DG_Soft_Reset_Reset_IsSuccessful();
int DG_Soft_Reset_Reset_ECUResponseCount();
double DG_Soft_Reset_Reset_TotalTimeAbs();
int DG_Soft_Reset_Reset_Last7FSubFunctionEx78();
int DG_Soft_Reset_Reset_7FCountEx78();
int DG_Soft_Reset_Reset_7FCountResponsePending();
extern int DG_Soft_Reset_Reset_NoResponse_Index;
void DG_Soft_Reset_Reset_NoResponse_Start();
void DG_Soft_Reset_Reset_NoResponse_Stop();
void DG_Soft_Reset_Reset_NoResponse_Save();
int DG_Soft_Reset_Reset_NoResponse_IsRunning();
int DG_Soft_Reset_Reset_NoResponse_NumMessagesCollected();
int DG_Soft_Reset_Reset_NoResponse_IsSuccessful();
int DG_Soft_Reset_Reset_NoResponse_ECUResponseCount();
double DG_Soft_Reset_Reset_NoResponse_TotalTimeAbs();
int DG_Soft_Reset_Reset_NoResponse_Last7FSubFunctionEx78();
int DG_Soft_Reset_Reset_NoResponse_7FCountEx78();
int DG_Soft_Reset_Reset_NoResponse_7FCountResponsePending();
extern int DG_EnableRxAndTx_Control_Index;
void DG_EnableRxAndTx_Control_Start();
void DG_EnableRxAndTx_Control_Stop();
void DG_EnableRxAndTx_Control_Save();
int DG_EnableRxAndTx_Control_IsRunning();
int DG_EnableRxAndTx_Control_NumMessagesCollected();
int DG_EnableRxAndTx_Control_IsSuccessful();
int DG_EnableRxAndTx_Control_ECUResponseCount();
double DG_EnableRxAndTx_Control_TotalTimeAbs();
int DG_EnableRxAndTx_Control_Last7FSubFunctionEx78();
int DG_EnableRxAndTx_Control_7FCountEx78();
int DG_EnableRxAndTx_Control_7FCountResponsePending();
extern int DG_EnableRxAndTx_Control_NoResponse_Index;
void DG_EnableRxAndTx_Control_NoResponse_Start();
void DG_EnableRxAndTx_Control_NoResponse_Stop();
void DG_EnableRxAndTx_Control_NoResponse_Save();
int DG_EnableRxAndTx_Control_NoResponse_IsRunning();
int DG_EnableRxAndTx_Control_NoResponse_NumMessagesCollected();
int DG_EnableRxAndTx_Control_NoResponse_IsSuccessful();
int DG_EnableRxAndTx_Control_NoResponse_ECUResponseCount();
double DG_EnableRxAndTx_Control_NoResponse_TotalTimeAbs();
int DG_EnableRxAndTx_Control_NoResponse_Last7FSubFunctionEx78();
int DG_EnableRxAndTx_Control_NoResponse_7FCountEx78();
int DG_EnableRxAndTx_Control_NoResponse_7FCountResponsePending();
extern int DG_EnableRxAndDisableTx_Control_Index;
void DG_EnableRxAndDisableTx_Control_Start();
void DG_EnableRxAndDisableTx_Control_Stop();
void DG_EnableRxAndDisableTx_Control_Save();
int DG_EnableRxAndDisableTx_Control_IsRunning();
int DG_EnableRxAndDisableTx_Control_NumMessagesCollected();
int DG_EnableRxAndDisableTx_Control_IsSuccessful();
int DG_EnableRxAndDisableTx_Control_ECUResponseCount();
double DG_EnableRxAndDisableTx_Control_TotalTimeAbs();
int DG_EnableRxAndDisableTx_Control_Last7FSubFunctionEx78();
int DG_EnableRxAndDisableTx_Control_7FCountEx78();
int DG_EnableRxAndDisableTx_Control_7FCountResponsePending();
extern int DG_EnableRxAndDisableTx_Control_NoResponse_Index;
void DG_EnableRxAndDisableTx_Control_NoResponse_Start();
void DG_EnableRxAndDisableTx_Control_NoResponse_Stop();
void DG_EnableRxAndDisableTx_Control_NoResponse_Save();
int DG_EnableRxAndDisableTx_Control_NoResponse_IsRunning();
int DG_EnableRxAndDisableTx_Control_NoResponse_NumMessagesCollected();
int DG_EnableRxAndDisableTx_Control_NoResponse_IsSuccessful();
int DG_EnableRxAndDisableTx_Control_NoResponse_ECUResponseCount();
double DG_EnableRxAndDisableTx_Control_NoResponse_TotalTimeAbs();
int DG_EnableRxAndDisableTx_Control_NoResponse_Last7FSubFunctionEx78();
int DG_EnableRxAndDisableTx_Control_NoResponse_7FCountEx78();
int DG_EnableRxAndDisableTx_Control_NoResponse_7FCountResponsePending();
extern int DG_DisableRxAndTx_Control_Index;
void DG_DisableRxAndTx_Control_Start();
void DG_DisableRxAndTx_Control_Stop();
void DG_DisableRxAndTx_Control_Save();
int DG_DisableRxAndTx_Control_IsRunning();
int DG_DisableRxAndTx_Control_NumMessagesCollected();
int DG_DisableRxAndTx_Control_IsSuccessful();
int DG_DisableRxAndTx_Control_ECUResponseCount();
double DG_DisableRxAndTx_Control_TotalTimeAbs();
int DG_DisableRxAndTx_Control_Last7FSubFunctionEx78();
int DG_DisableRxAndTx_Control_7FCountEx78();
int DG_DisableRxAndTx_Control_7FCountResponsePending();
extern int DG_DisableRxAndTx_Control_NoResponse_Index;
void DG_DisableRxAndTx_Control_NoResponse_Start();
void DG_DisableRxAndTx_Control_NoResponse_Stop();
void DG_DisableRxAndTx_Control_NoResponse_Save();
int DG_DisableRxAndTx_Control_NoResponse_IsRunning();
int DG_DisableRxAndTx_Control_NoResponse_NumMessagesCollected();
int DG_DisableRxAndTx_Control_NoResponse_IsSuccessful();
int DG_DisableRxAndTx_Control_NoResponse_ECUResponseCount();
double DG_DisableRxAndTx_Control_NoResponse_TotalTimeAbs();
int DG_DisableRxAndTx_Control_NoResponse_Last7FSubFunctionEx78();
int DG_DisableRxAndTx_Control_NoResponse_7FCountEx78();
int DG_DisableRxAndTx_Control_NoResponse_7FCountResponsePending();
extern int DG_DID_0xFD40___SOC_Reset_Information_Read_Index;
void DG_DID_0xFD40___SOC_Reset_Information_Read_Start();
void DG_DID_0xFD40___SOC_Reset_Information_Read_Stop();
void DG_DID_0xFD40___SOC_Reset_Information_Read_Save();
int DG_DID_0xFD40___SOC_Reset_Information_Read_IsRunning();
int DG_DID_0xFD40___SOC_Reset_Information_Read_NumMessagesCollected();
int DG_DID_0xFD40___SOC_Reset_Information_Read_IsSuccessful();
int DG_DID_0xFD40___SOC_Reset_Information_Read_ECUResponseCount();
double DG_DID_0xFD40___SOC_Reset_Information_Read_TotalTimeAbs();
int DG_DID_0xFD40___SOC_Reset_Information_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD40___SOC_Reset_Information_Read_7FCountEx78();
int DG_DID_0xFD40___SOC_Reset_Information_Read_7FCountResponsePending();
extern int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_Index;
void DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_Start();
void DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_Stop();
void DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_Save();
int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_IsRunning();
int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_NumMessagesCollected();
int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_IsSuccessful();
int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_ECUResponseCount();
double DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_TotalTimeAbs();
int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_7FCountEx78();
int DG_DID_0xFD41___SOC_Algorithm_Run_Count_Read_7FCountResponsePending();
extern int DG_DID_0xFD42___DSP_Software_Version_Number_Read_Index;
void DG_DID_0xFD42___DSP_Software_Version_Number_Read_Start();
void DG_DID_0xFD42___DSP_Software_Version_Number_Read_Stop();
void DG_DID_0xFD42___DSP_Software_Version_Number_Read_Save();
int DG_DID_0xFD42___DSP_Software_Version_Number_Read_IsRunning();
int DG_DID_0xFD42___DSP_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFD42___DSP_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xFD42___DSP_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFD42___DSP_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFD42___DSP_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD42___DSP_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xFD42___DSP_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_Index;
void DG_DID_0xFD43___DSP_Software_Compile_Date_Read_Start();
void DG_DID_0xFD43___DSP_Software_Compile_Date_Read_Stop();
void DG_DID_0xFD43___DSP_Software_Compile_Date_Read_Save();
int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_IsRunning();
int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_NumMessagesCollected();
int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_IsSuccessful();
int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_ECUResponseCount();
double DG_DID_0xFD43___DSP_Software_Compile_Date_Read_TotalTimeAbs();
int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_7FCountEx78();
int DG_DID_0xFD43___DSP_Software_Compile_Date_Read_7FCountResponsePending();
extern int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_Index;
void DG_DID_0xFD70___MCU_FBL_Version_Number_Read_Start();
void DG_DID_0xFD70___MCU_FBL_Version_Number_Read_Stop();
void DG_DID_0xFD70___MCU_FBL_Version_Number_Read_Save();
int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_IsRunning();
int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_IsSuccessful();
int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFD70___MCU_FBL_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_7FCountEx78();
int DG_DID_0xFD70___MCU_FBL_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFD81___MCU_Software_Version_Number_Read_Index;
void DG_DID_0xFD81___MCU_Software_Version_Number_Read_Start();
void DG_DID_0xFD81___MCU_Software_Version_Number_Read_Stop();
void DG_DID_0xFD81___MCU_Software_Version_Number_Read_Save();
int DG_DID_0xFD81___MCU_Software_Version_Number_Read_IsRunning();
int DG_DID_0xFD81___MCU_Software_Version_Number_Read_NumMessagesCollected();
int DG_DID_0xFD81___MCU_Software_Version_Number_Read_IsSuccessful();
int DG_DID_0xFD81___MCU_Software_Version_Number_Read_ECUResponseCount();
double DG_DID_0xFD81___MCU_Software_Version_Number_Read_TotalTimeAbs();
int DG_DID_0xFD81___MCU_Software_Version_Number_Read_Last7FSubFunctionEx78();
int DG_DID_0xFD81___MCU_Software_Version_Number_Read_7FCountEx78();
int DG_DID_0xFD81___MCU_Software_Version_Number_Read_7FCountResponsePending();
extern int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_Index;
void DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_Start();
void DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_Stop();
void DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_Save();
int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_IsRunning();
int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_NumMessagesCollected();
int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_IsSuccessful();
int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_ECUResponseCount();
double DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_TotalTimeAbs();
int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_Last7FSubFunctionEx78();
int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_7FCountEx78();
int DG_DID_0xFF0D___MCU_Software_Compile_Date_Read_7FCountResponsePending();
extern int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_Index;
void DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_Start();
void DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_Stop();
void DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_Save();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_IsRunning();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_NumMessagesCollected();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_IsSuccessful();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_ECUResponseCount();
double DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_TotalTimeAbs();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_Last7FSubFunctionEx78();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_7FCountEx78();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Adjust_7FCountResponsePending();
extern int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_Index;
void DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_Start();
void DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_Stop();
void DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_Save();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_IsRunning();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_NumMessagesCollected();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_IsSuccessful();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_ECUResponseCount();
double DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_TotalTimeAbs();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_Last7FSubFunctionEx78();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_7FCountEx78();
int DG_$2F_CPID_0xFD03_AVM_Sub_Function_Control_Return_7FCountResponsePending();
extern int FB_____1_Index;
void FB_____1_Start();
void FB_____1_Stop();
void FB_____1_Trigger();
void FB_____1_Save();
double FB_____1_IsRunning();
double FB_____1_IsTriggered();
double FB_____1_NumCollected();
extern int FB_____2_Index;
void FB_____2_Start();
void FB_____2_Stop();
void FB_____2_Trigger();
void FB_____2_Save();
double FB_____2_IsRunning();
double FB_____2_IsTriggered();
double FB_____2_NumCollected();
extern int FB___DSP___Index;
void FB___DSP___Start();
void FB___DSP___Stop();
void FB___DSP___Trigger();
void FB___DSP___Save();
double FB___DSP___IsRunning();
double FB___DSP___IsTriggered();
double FB___DSP___NumCollected();
extern int FB__________Index;
void FB__________Start();
void FB__________Stop();
void FB__________Trigger();
void FB__________Save();
double FB__________IsRunning();
double FB__________IsTriggered();
double FB__________NumCollected();
extern int FB______Index;
void FB______Start();
void FB______Stop();
void FB______Trigger();
void FB______Save();
double FB______IsRunning();
double FB______IsTriggered();
double FB______NumCollected();
extern int FB________Index;
void FB________Start();
void FB________Stop();
void FB________Trigger();
void FB________Save();
double FB________IsRunning();
double FB________IsTriggered();
double FB________NumCollected();
extern int FB___CPU_Index;
void FB___CPU_Start();
void FB___CPU_Stop();
void FB___CPU_Trigger();
void FB___CPU_Save();
double FB___CPU_IsRunning();
double FB___CPU_IsTriggered();
double FB___CPU_NumCollected();
extern int FB________tst15_Index;
void FB________tst15_Start();
void FB________tst15_Stop();
void FB________tst15_Trigger();
void FB________tst15_Save();
double FB________tst15_IsRunning();
double FB________tst15_IsTriggered();
double FB________tst15_NumCollected();
extern int FB_________Index;
void FB_________Start();
void FB_________Stop();
void FB_________Trigger();
void FB_________Save();
double FB_________IsRunning();
double FB_________IsTriggered();
double FB_________NumCollected();
extern int FB________tst21_Index;
void FB________tst21_Start();
void FB________tst21_Stop();
void FB________tst21_Trigger();
void FB________tst21_Save();
double FB________tst21_IsRunning();
double FB________tst21_IsTriggered();
double FB________tst21_NumCollected();
extern int FB__________tst16_Index;
void FB__________tst16_Start();
void FB__________tst16_Stop();
void FB__________tst16_Trigger();
void FB__________tst16_Save();
double FB__________tst16_IsRunning();
double FB__________tst16_IsTriggered();
double FB__________tst16_NumCollected();
extern int FB_______Index;
void FB_______Start();
void FB_______Stop();
void FB_______Trigger();
void FB_______Save();
double FB_______IsRunning();
double FB_______IsTriggered();
double FB_______NumCollected();
extern int FB___AVM___Index;
void FB___AVM___Start();
void FB___AVM___Stop();
void FB___AVM___Trigger();
void FB___AVM___Save();
double FB___AVM___IsRunning();
double FB___AVM___IsTriggered();
double FB___AVM___NumCollected();
extern int FB_______tst26_Index;
void FB_______tst26_Start();
void FB_______tst26_Stop();
void FB_______tst26_Trigger();
void FB_______tst26_Save();
double FB_______tst26_IsRunning();
double FB_______tst26_IsTriggered();
double FB_______tst26_NumCollected();
extern int FB___AVM_Index;
void FB___AVM_Start();
void FB___AVM_Stop();
void FB___AVM_Trigger();
void FB___AVM_Save();
double FB___AVM_IsRunning();
double FB___AVM_IsTriggered();
double FB___AVM_NumCollected();
extern int FB__________tst27_Index;
void FB__________tst27_Start();
void FB__________tst27_Stop();
void FB__________tst27_Trigger();
void FB__________tst27_Save();
double FB__________tst27_IsRunning();
double FB__________tst27_IsTriggered();
double FB__________tst27_NumCollected();
extern int FB______tst28_Index;
void FB______tst28_Start();
void FB______tst28_Stop();
void FB______tst28_Trigger();
void FB______tst28_Save();
double FB______tst28_IsRunning();
double FB______tst28_IsTriggered();
double FB______tst28_NumCollected();
extern int FB___________Index;
void FB___________Start();
void FB___________Stop();
void FB___________Trigger();
void FB___________Save();
double FB___________IsRunning();
double FB___________IsTriggered();
double FB___________NumCollected();
extern int FB__AD____Index;
void FB__AD____Start();
void FB__AD____Stop();
void FB__AD____Trigger();
void FB__AD____Save();
double FB__AD____IsRunning();
double FB__AD____IsTriggered();
double FB__AD____NumCollected();
extern int FB_DVD________Index;
void FB_DVD________Start();
void FB_DVD________Stop();
void FB_DVD________Trigger();
void FB_DVD________Save();
double FB_DVD________IsRunning();
double FB_DVD________IsTriggered();
double FB_DVD________NumCollected();
extern int FB_______tst24_Index;
void FB_______tst24_Start();
void FB_______tst24_Stop();
void FB_______tst24_Trigger();
void FB_______tst24_Save();
double FB_______tst24_IsRunning();
double FB_______tst24_IsTriggered();
double FB_______tst24_NumCollected();
extern int FB______tst31_Index;
void FB______tst31_Start();
void FB______tst31_Stop();
void FB______tst31_Trigger();
void FB______tst31_Save();
double FB______tst31_IsRunning();
double FB______tst31_IsTriggered();
double FB______tst31_NumCollected();
extern int FB__________tst32_Index;
void FB__________tst32_Start();
void FB__________tst32_Stop();
void FB__________tst32_Trigger();
void FB__________tst32_Save();
double FB__________tst32_IsRunning();
double FB__________tst32_IsTriggered();
double FB__________tst32_NumCollected();
extern int FB___________tst33_Index;
void FB___________tst33_Start();
void FB___________tst33_Stop();
void FB___________tst33_Trigger();
void FB___________tst33_Save();
double FB___________tst33_IsRunning();
double FB___________tst33_IsTriggered();
double FB___________tst33_NumCollected();
extern int FB_10ms_______Index;
void FB_10ms_______Start();
void FB_10ms_______Stop();
void FB_10ms_______Trigger();
void FB_10ms_______Save();
double FB_10ms_______IsRunning();
double FB_10ms_______IsTriggered();
double FB_10ms_______NumCollected();
extern int FB_20ms_______Index;
void FB_20ms_______Start();
void FB_20ms_______Stop();
void FB_20ms_______Trigger();
void FB_20ms_______Save();
double FB_20ms_______IsRunning();
double FB_20ms_______IsTriggered();
double FB_20ms_______NumCollected();
extern int FB_50ms_______Index;
void FB_50ms_______Start();
void FB_50ms_______Stop();
void FB_50ms_______Trigger();
void FB_50ms_______Save();
double FB_50ms_______IsRunning();
double FB_50ms_______IsTriggered();
double FB_50ms_______NumCollected();
extern int FB_100ms_______Index;
void FB_100ms_______Start();
void FB_100ms_______Stop();
void FB_100ms_______Trigger();
void FB_100ms_______Save();
double FB_100ms_______IsRunning();
double FB_100ms_______IsTriggered();
double FB_100ms_______NumCollected();
extern int FB_500ms_______Index;
void FB_500ms_______Start();
void FB_500ms_______Stop();
void FB_500ms_______Trigger();
void FB_500ms_______Save();
double FB_500ms_______IsRunning();
double FB_500ms_______IsTriggered();
double FB_500ms_______NumCollected();
extern int FB_2F_FD03_____Index;
void FB_2F_FD03_____Start();
void FB_2F_FD03_____Stop();
void FB_2F_FD03_____Trigger();
void FB_2F_FD03_____Save();
double FB_2F_FD03_____IsRunning();
double FB_2F_FD03_____IsTriggered();
double FB_2F_FD03_____NumCollected();
extern int FB__________tst40_Index;
void FB__________tst40_Start();
void FB__________tst40_Stop();
void FB__________tst40_Trigger();
void FB__________tst40_Save();
double FB__________tst40_IsRunning();
double FB__________tst40_IsTriggered();
double FB__________tst40_NumCollected();

// Messages

typedef struct {
    unsigned char btPresent;  /// indicates message rxed at least once
    unsigned char  btPresentToggle; /// toggle every message rx
    unsigned char         btMultiFrameComplete; /// indicates frame is complete 
    double dUpdateRateRel;    /// periodic update rate
    double dUpdateRateAbs ;   /// absolute update rate
    int iPerSecond;   /// number of messages per second
    int iCount;       /// number of messages rxed
    int iChangeCount; /// count of everytime the message changes
    double dStartTime;        /// time between two first messages
    double dMsgMinTime;       /// min time between two messages
    double dMaxTime;          /// max time between two messages
    double dMeanTime;         /// average time between two messages
} MessageStats; 

typedef struct {
    int iNetwork; /// Network in Vehicle Spy
    int iID; /// Message ID
    __int64 iTimeStampNanoSecondsHW; /// TimeStamp By Hardware (3G Hardware Only)
    unsigned int iTimeStampMillisecondsOS; /// TimeStamp By OS (timeGetTime API)
    int iNumDataBytes; /// Number Of Data Bytes (CAN DLC)
    int iBitField;
    unsigned char btData[16]; /// Message data bytes
    unsigned char btInitialData[16]; /// Data bytes after initialization
} GenericMessage;

typedef struct {
    int iNetwork; /// Network in Vehicle Spy
    int iID; /// Message ID
    __int64 iTimeStampNanoSecondsHW; /// TimeStamp By Hardware (3G Hardware Only)
    unsigned int iTimeStampMillisecondsOS; /// TimeStamp By OS (timeGetTime API)
    int iNumDataBytes; /// Number Of Data Bytes (CAN DLC)
    int iBitField;
    unsigned char btData[4096]; /// Message data bytes
    unsigned char btInitialData[4096]; /// Data bytes after initialization
} GenericLongMessage;

void Spy_EveryMessage(GenericMessage * p_Msg);
void Spy_EveryLongMessage(GenericLongMessage * p_Msg);
int GenericMessageTransmit(GenericMessage * p_Msg);
int GenericLongMessageTransmit(GenericLongMessage * p_Msg);
int CANFDMessageTransmit(GenericLongMessage * p_Msg, BOOL bBRS);
extern int TX_F190_HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_F190_HS_CAN;


void TX_F190_HS_CAN_Init(TX_F190_HS_CAN * pMsg);
int TX_F190_HS_CAN_Transmit(TX_F190_HS_CAN * pMsg);
int TX_F190_HS_CAN_Transmit_raw(TX_F190_HS_CAN * pMsg);
int TX_F190_HS_CAN_TransmitFast();
#define TX_F190_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_F190_HS_CAN_Index, 0)
#define TX_F190_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_F190_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Clear_DTC_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Clear_DTC_HS_CAN;


void TX_0_Clear_DTC_HS_CAN_Init(TX_0_Clear_DTC_HS_CAN * pMsg);
int TX_0_Clear_DTC_HS_CAN_Transmit(TX_0_Clear_DTC_HS_CAN * pMsg);
int TX_0_Clear_DTC_HS_CAN_Transmit_raw(TX_0_Clear_DTC_HS_CAN * pMsg);
int TX_0_Clear_DTC_HS_CAN_TransmitFast();
#define TX_0_Clear_DTC_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Clear_DTC_HS_CAN_Index, 0)
#define TX_0_Clear_DTC_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Clear_DTC_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Read_DTC_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Read_DTC_HS_CAN;


void TX_0_Read_DTC_HS_CAN_Init(TX_0_Read_DTC_HS_CAN * pMsg);
int TX_0_Read_DTC_HS_CAN_Transmit(TX_0_Read_DTC_HS_CAN * pMsg);
int TX_0_Read_DTC_HS_CAN_Transmit_raw(TX_0_Read_DTC_HS_CAN * pMsg);
int TX_0_Read_DTC_HS_CAN_TransmitFast();
#define TX_0_Read_DTC_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Read_DTC_HS_CAN_Index, 0)
#define TX_0_Read_DTC_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Read_DTC_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_2________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2________HS_CAN;


void TX_2________HS_CAN_Init(TX_2________HS_CAN * pMsg);
int TX_2________HS_CAN_Transmit(TX_2________HS_CAN * pMsg);
int TX_2________HS_CAN_Transmit_raw(TX_2________HS_CAN * pMsg);
int TX_2________HS_CAN_TransmitFast();
#define TX_2________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2________HS_CAN_Index, 0)
#define TX_2________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_2____________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2____________HS_CAN;


void TX_2____________HS_CAN_Init(TX_2____________HS_CAN * pMsg);
int TX_2____________HS_CAN_Transmit(TX_2____________HS_CAN * pMsg);
int TX_2____________HS_CAN_Transmit_raw(TX_2____________HS_CAN * pMsg);
int TX_2____________HS_CAN_TransmitFast();
#define TX_2____________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2____________HS_CAN_Index, 0)
#define TX_2____________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2____________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_2______HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2______HS_CAN;


void TX_2______HS_CAN_Init(TX_2______HS_CAN * pMsg);
int TX_2______HS_CAN_Transmit(TX_2______HS_CAN * pMsg);
int TX_2______HS_CAN_Transmit_raw(TX_2______HS_CAN * pMsg);
int TX_2______HS_CAN_TransmitFast();
#define TX_2______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2______HS_CAN_Index, 0)
#define TX_2______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_2__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2__________HS_CAN;


void TX_2__________HS_CAN_Init(TX_2__________HS_CAN * pMsg);
int TX_2__________HS_CAN_Transmit(TX_2__________HS_CAN * pMsg);
int TX_2__________HS_CAN_Transmit_raw(TX_2__________HS_CAN * pMsg);
int TX_2__________HS_CAN_TransmitFast();
#define TX_2__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2__________HS_CAN_Index, 0)
#define TX_2__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_2__________HS_CAN_out27_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2__________HS_CAN_out27;


void TX_2__________HS_CAN_out27_Init(TX_2__________HS_CAN_out27 * pMsg);
int TX_2__________HS_CAN_out27_Transmit(TX_2__________HS_CAN_out27 * pMsg);
int TX_2__________HS_CAN_out27_Transmit_raw(TX_2__________HS_CAN_out27 * pMsg);
int TX_2__________HS_CAN_out27_TransmitFast();
#define TX_2__________HS_CAN_out27_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2__________HS_CAN_out27_Index, 0)
#define TX_2__________HS_CAN_out27_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2__________HS_CAN_out27_Index, 0, name, outDoubleValuePtr)
extern int TX_2____________HS_CAN_out28_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2____________HS_CAN_out28;


void TX_2____________HS_CAN_out28_Init(TX_2____________HS_CAN_out28 * pMsg);
int TX_2____________HS_CAN_out28_Transmit(TX_2____________HS_CAN_out28 * pMsg);
int TX_2____________HS_CAN_out28_Transmit_raw(TX_2____________HS_CAN_out28 * pMsg);
int TX_2____________HS_CAN_out28_TransmitFast();
#define TX_2____________HS_CAN_out28_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2____________HS_CAN_out28_Index, 0)
#define TX_2____________HS_CAN_out28_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2____________HS_CAN_out28_Index, 0, name, outDoubleValuePtr)
extern int TX_2__________HS_CAN_out29_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2__________HS_CAN_out29;


void TX_2__________HS_CAN_out29_Init(TX_2__________HS_CAN_out29 * pMsg);
int TX_2__________HS_CAN_out29_Transmit(TX_2__________HS_CAN_out29 * pMsg);
int TX_2__________HS_CAN_out29_Transmit_raw(TX_2__________HS_CAN_out29 * pMsg);
int TX_2__________HS_CAN_out29_TransmitFast();
#define TX_2__________HS_CAN_out29_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2__________HS_CAN_out29_Index, 0)
#define TX_2__________HS_CAN_out29_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2__________HS_CAN_out29_Index, 0, name, outDoubleValuePtr)
extern int TX_2____________HS_CAN_out30_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2____________HS_CAN_out30;


void TX_2____________HS_CAN_out30_Init(TX_2____________HS_CAN_out30 * pMsg);
int TX_2____________HS_CAN_out30_Transmit(TX_2____________HS_CAN_out30 * pMsg);
int TX_2____________HS_CAN_out30_Transmit_raw(TX_2____________HS_CAN_out30 * pMsg);
int TX_2____________HS_CAN_out30_TransmitFast();
#define TX_2____________HS_CAN_out30_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2____________HS_CAN_out30_Index, 0)
#define TX_2____________HS_CAN_out30_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2____________HS_CAN_out30_Index, 0, name, outDoubleValuePtr)
extern int TX_2__________HS_CAN_out32_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2__________HS_CAN_out32;


void TX_2__________HS_CAN_out32_Init(TX_2__________HS_CAN_out32 * pMsg);
int TX_2__________HS_CAN_out32_Transmit(TX_2__________HS_CAN_out32 * pMsg);
int TX_2__________HS_CAN_out32_Transmit_raw(TX_2__________HS_CAN_out32 * pMsg);
int TX_2__________HS_CAN_out32_TransmitFast();
#define TX_2__________HS_CAN_out32_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2__________HS_CAN_out32_Index, 0)
#define TX_2__________HS_CAN_out32_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2__________HS_CAN_out32_Index, 0, name, outDoubleValuePtr)
extern int TX_2____________HS_CAN_out34_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2____________HS_CAN_out34;


void TX_2____________HS_CAN_out34_Init(TX_2____________HS_CAN_out34 * pMsg);
int TX_2____________HS_CAN_out34_Transmit(TX_2____________HS_CAN_out34 * pMsg);
int TX_2____________HS_CAN_out34_Transmit_raw(TX_2____________HS_CAN_out34 * pMsg);
int TX_2____________HS_CAN_out34_TransmitFast();
#define TX_2____________HS_CAN_out34_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2____________HS_CAN_out34_Index, 0)
#define TX_2____________HS_CAN_out34_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2____________HS_CAN_out34_Index, 0, name, outDoubleValuePtr)
extern int TX_2__________HS_CAN_out36_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2__________HS_CAN_out36;


void TX_2__________HS_CAN_out36_Init(TX_2__________HS_CAN_out36 * pMsg);
int TX_2__________HS_CAN_out36_Transmit(TX_2__________HS_CAN_out36 * pMsg);
int TX_2__________HS_CAN_out36_Transmit_raw(TX_2__________HS_CAN_out36 * pMsg);
int TX_2__________HS_CAN_out36_TransmitFast();
#define TX_2__________HS_CAN_out36_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2__________HS_CAN_out36_Index, 0)
#define TX_2__________HS_CAN_out36_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2__________HS_CAN_out36_Index, 0, name, outDoubleValuePtr)
extern int TX_2____________HS_CAN_out38_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2____________HS_CAN_out38;


void TX_2____________HS_CAN_out38_Init(TX_2____________HS_CAN_out38 * pMsg);
int TX_2____________HS_CAN_out38_Transmit(TX_2____________HS_CAN_out38 * pMsg);
int TX_2____________HS_CAN_out38_Transmit_raw(TX_2____________HS_CAN_out38 * pMsg);
int TX_2____________HS_CAN_out38_TransmitFast();
#define TX_2____________HS_CAN_out38_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2____________HS_CAN_out38_Index, 0)
#define TX_2____________HS_CAN_out38_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2____________HS_CAN_out38_Index, 0, name, outDoubleValuePtr)
extern int TX_5_1_____DSP___HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_5_1_____DSP___HS_CAN;


void TX_5_1_____DSP___HS_CAN_Init(TX_5_1_____DSP___HS_CAN * pMsg);
int TX_5_1_____DSP___HS_CAN_Transmit(TX_5_1_____DSP___HS_CAN * pMsg);
int TX_5_1_____DSP___HS_CAN_Transmit_raw(TX_5_1_____DSP___HS_CAN * pMsg);
int TX_5_1_____DSP___HS_CAN_TransmitFast();
#define TX_5_1_____DSP___HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_5_1_____DSP___HS_CAN_Index, 0)
#define TX_5_1_____DSP___HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_5_1_____DSP___HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Test_Present_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Test_Present_HS_CAN;


void TX_0_Test_Present_HS_CAN_Init(TX_0_Test_Present_HS_CAN * pMsg);
int TX_0_Test_Present_HS_CAN_Transmit(TX_0_Test_Present_HS_CAN * pMsg);
int TX_0_Test_Present_HS_CAN_Transmit_raw(TX_0_Test_Present_HS_CAN * pMsg);
int TX_0_Test_Present_HS_CAN_TransmitFast();
#define TX_0_Test_Present_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Test_Present_HS_CAN_Index, 0)
#define TX_0_Test_Present_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Test_Present_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_1_______HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_1_______HS_CAN;


void TX_3_1_______HS_CAN_Init(TX_3_1_______HS_CAN * pMsg);
int TX_3_1_______HS_CAN_Transmit(TX_3_1_______HS_CAN * pMsg);
int TX_3_1_______HS_CAN_Transmit_raw(TX_3_1_______HS_CAN * pMsg);
int TX_3_1_______HS_CAN_TransmitFast();
#define TX_3_1_______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_1_______HS_CAN_Index, 0)
#define TX_3_1_______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_1_______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_1___________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_1___________HS_CAN;


void TX_3_1___________HS_CAN_Init(TX_3_1___________HS_CAN * pMsg);
int TX_3_1___________HS_CAN_Transmit(TX_3_1___________HS_CAN * pMsg);
int TX_3_1___________HS_CAN_Transmit_raw(TX_3_1___________HS_CAN * pMsg);
int TX_3_1___________HS_CAN_TransmitFast();
#define TX_3_1___________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_1___________HS_CAN_Index, 0)
#define TX_3_1___________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_1___________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_1_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_1_________HS_CAN;


void TX_3_1_________HS_CAN_Init(TX_3_1_________HS_CAN * pMsg);
int TX_3_1_________HS_CAN_Transmit(TX_3_1_________HS_CAN * pMsg);
int TX_3_1_________HS_CAN_Transmit_raw(TX_3_1_________HS_CAN * pMsg);
int TX_3_1_________HS_CAN_TransmitFast();
#define TX_3_1_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_1_________HS_CAN_Index, 0)
#define TX_3_1_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_1_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_2_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ____; /// Min: 0 Max: 255 Units: 
    BYTE _____raw;
} TX_3_2_________HS_CAN;


void TX_3_2_________HS_CAN_Init(TX_3_2_________HS_CAN * pMsg);
int TX_3_2_________HS_CAN_Transmit(TX_3_2_________HS_CAN * pMsg);
int TX_3_2_________HS_CAN_Transmit_raw(TX_3_2_________HS_CAN * pMsg);
int TX_3_2_________HS_CAN_UpdateBytesFromSignals(TX_3_2_________HS_CAN * pMsg);
int TX_3_2_________HS_CAN_UpdateBytesFromRawSignals(TX_3_2_________HS_CAN * pMsg);
#define TX_3_2_________HS_CAN______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_3_2_________HS_CAN_Index, 0, dPhysicalValue);
#define TX_3_2_________HS_CAN_SetSignal______Physical(dval) SpySetTxSignal(TX_3_2_________HS_CAN_Index, 0, dval)
#define TX_3_2_________HS_CAN_SetSignal______Raw(nval) SpySetTxSignalRaw(TX_3_2_________HS_CAN_Index, 0, nval)
int TX_3_2_________HS_CAN_TransmitFast();
#define TX_3_2_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_2_________HS_CAN_Index, 0)
#define TX_3_2_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_2_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_2_____________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_2_____________HS_CAN;


void TX_3_2_____________HS_CAN_Init(TX_3_2_____________HS_CAN * pMsg);
int TX_3_2_____________HS_CAN_Transmit(TX_3_2_____________HS_CAN * pMsg);
int TX_3_2_____________HS_CAN_Transmit_raw(TX_3_2_____________HS_CAN * pMsg);
int TX_3_2_____________HS_CAN_TransmitFast();
#define TX_3_2_____________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_2_____________HS_CAN_Index, 0)
#define TX_3_2_____________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_2_____________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_3_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ____; /// Min: 0 Max: 255 Units: 
    BYTE _____raw;
} TX_3_3_________HS_CAN;


void TX_3_3_________HS_CAN_Init(TX_3_3_________HS_CAN * pMsg);
int TX_3_3_________HS_CAN_Transmit(TX_3_3_________HS_CAN * pMsg);
int TX_3_3_________HS_CAN_Transmit_raw(TX_3_3_________HS_CAN * pMsg);
int TX_3_3_________HS_CAN_UpdateBytesFromSignals(TX_3_3_________HS_CAN * pMsg);
int TX_3_3_________HS_CAN_UpdateBytesFromRawSignals(TX_3_3_________HS_CAN * pMsg);
#define TX_3_3_________HS_CAN______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_3_3_________HS_CAN_Index, 0, dPhysicalValue);
#define TX_3_3_________HS_CAN_SetSignal______Physical(dval) SpySetTxSignal(TX_3_3_________HS_CAN_Index, 0, dval)
#define TX_3_3_________HS_CAN_SetSignal______Raw(nval) SpySetTxSignalRaw(TX_3_3_________HS_CAN_Index, 0, nval)
int TX_3_3_________HS_CAN_TransmitFast();
#define TX_3_3_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_3_________HS_CAN_Index, 0)
#define TX_3_3_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_3_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_3_____________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_3_____________HS_CAN;


void TX_3_3_____________HS_CAN_Init(TX_3_3_____________HS_CAN * pMsg);
int TX_3_3_____________HS_CAN_Transmit(TX_3_3_____________HS_CAN * pMsg);
int TX_3_3_____________HS_CAN_Transmit_raw(TX_3_3_____________HS_CAN * pMsg);
int TX_3_3_____________HS_CAN_TransmitFast();
#define TX_3_3_____________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_3_____________HS_CAN_Index, 0)
#define TX_3_3_____________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_3_____________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_4_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_4_________HS_CAN;


void TX_3_4_________HS_CAN_Init(TX_3_4_________HS_CAN * pMsg);
int TX_3_4_________HS_CAN_Transmit(TX_3_4_________HS_CAN * pMsg);
int TX_3_4_________HS_CAN_Transmit_raw(TX_3_4_________HS_CAN * pMsg);
int TX_3_4_________HS_CAN_TransmitFast();
#define TX_3_4_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_4_________HS_CAN_Index, 0)
#define TX_3_4_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_4_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_4_________HS_CAN_out57_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_4_________HS_CAN_out57;


void TX_3_4_________HS_CAN_out57_Init(TX_3_4_________HS_CAN_out57 * pMsg);
int TX_3_4_________HS_CAN_out57_Transmit(TX_3_4_________HS_CAN_out57 * pMsg);
int TX_3_4_________HS_CAN_out57_Transmit_raw(TX_3_4_________HS_CAN_out57 * pMsg);
int TX_3_4_________HS_CAN_out57_TransmitFast();
#define TX_3_4_________HS_CAN_out57_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_4_________HS_CAN_out57_Index, 0)
#define TX_3_4_________HS_CAN_out57_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_4_________HS_CAN_out57_Index, 0, name, outDoubleValuePtr)
extern int TX_3_4_________HS_CAN_out59_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_4_________HS_CAN_out59;


void TX_3_4_________HS_CAN_out59_Init(TX_3_4_________HS_CAN_out59 * pMsg);
int TX_3_4_________HS_CAN_out59_Transmit(TX_3_4_________HS_CAN_out59 * pMsg);
int TX_3_4_________HS_CAN_out59_Transmit_raw(TX_3_4_________HS_CAN_out59 * pMsg);
int TX_3_4_________HS_CAN_out59_TransmitFast();
#define TX_3_4_________HS_CAN_out59_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_4_________HS_CAN_out59_Index, 0)
#define TX_3_4_________HS_CAN_out59_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_4_________HS_CAN_out59_Index, 0, name, outDoubleValuePtr)
extern int TX_3_4_________HS_CAN_out61_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_4_________HS_CAN_out61;


void TX_3_4_________HS_CAN_out61_Init(TX_3_4_________HS_CAN_out61 * pMsg);
int TX_3_4_________HS_CAN_out61_Transmit(TX_3_4_________HS_CAN_out61 * pMsg);
int TX_3_4_________HS_CAN_out61_Transmit_raw(TX_3_4_________HS_CAN_out61 * pMsg);
int TX_3_4_________HS_CAN_out61_TransmitFast();
#define TX_3_4_________HS_CAN_out61_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_4_________HS_CAN_out61_Index, 0)
#define TX_3_4_________HS_CAN_out61_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_4_________HS_CAN_out61_Index, 0, name, outDoubleValuePtr)
extern int TX_3_4________NRC31_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_4________NRC31_HS_CAN;


void TX_3_4________NRC31_HS_CAN_Init(TX_3_4________NRC31_HS_CAN * pMsg);
int TX_3_4________NRC31_HS_CAN_Transmit(TX_3_4________NRC31_HS_CAN * pMsg);
int TX_3_4________NRC31_HS_CAN_Transmit_raw(TX_3_4________NRC31_HS_CAN * pMsg);
int TX_3_4________NRC31_HS_CAN_TransmitFast();
#define TX_3_4________NRC31_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_4________NRC31_HS_CAN_Index, 0)
#define TX_3_4________NRC31_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_4________NRC31_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_4_____________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_4_____________HS_CAN;


void TX_3_4_____________HS_CAN_Init(TX_3_4_____________HS_CAN * pMsg);
int TX_3_4_____________HS_CAN_Transmit(TX_3_4_____________HS_CAN * pMsg);
int TX_3_4_____________HS_CAN_Transmit_raw(TX_3_4_____________HS_CAN * pMsg);
int TX_3_4_____________HS_CAN_TransmitFast();
#define TX_3_4_____________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_4_____________HS_CAN_Index, 0)
#define TX_3_4_____________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_4_____________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_5___________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_5___________HS_CAN;


void TX_3_5___________HS_CAN_Init(TX_3_5___________HS_CAN * pMsg);
int TX_3_5___________HS_CAN_Transmit(TX_3_5___________HS_CAN * pMsg);
int TX_3_5___________HS_CAN_Transmit_raw(TX_3_5___________HS_CAN * pMsg);
int TX_3_5___________HS_CAN_TransmitFast();
#define TX_3_5___________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_5___________HS_CAN_Index, 0)
#define TX_3_5___________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_5___________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_3_5___________HS_CAN_out69_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_3_5___________HS_CAN_out69;


void TX_3_5___________HS_CAN_out69_Init(TX_3_5___________HS_CAN_out69 * pMsg);
int TX_3_5___________HS_CAN_out69_Transmit(TX_3_5___________HS_CAN_out69 * pMsg);
int TX_3_5___________HS_CAN_out69_Transmit_raw(TX_3_5___________HS_CAN_out69 * pMsg);
int TX_3_5___________HS_CAN_out69_TransmitFast();
#define TX_3_5___________HS_CAN_out69_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_3_5___________HS_CAN_out69_Index, 0)
#define TX_3_5___________HS_CAN_out69_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_3_5___________HS_CAN_out69_Index, 0, name, outDoubleValuePtr)
extern int TX_1______HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_1______HS_CAN;


void TX_1______HS_CAN_Init(TX_1______HS_CAN * pMsg);
int TX_1______HS_CAN_Transmit(TX_1______HS_CAN * pMsg);
int TX_1______HS_CAN_Transmit_raw(TX_1______HS_CAN * pMsg);
int TX_1______HS_CAN_TransmitFast();
#define TX_1______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_1______HS_CAN_Index, 0)
#define TX_1______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_1______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_1___MCU____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_1___MCU____HS_CAN;


void TX_4_1___MCU____HS_CAN_Init(TX_4_1___MCU____HS_CAN * pMsg);
int TX_4_1___MCU____HS_CAN_Transmit(TX_4_1___MCU____HS_CAN * pMsg);
int TX_4_1___MCU____HS_CAN_Transmit_raw(TX_4_1___MCU____HS_CAN * pMsg);
int TX_4_1___MCU____HS_CAN_TransmitFast();
#define TX_4_1___MCU____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_1___MCU____HS_CAN_Index, 0)
#define TX_4_1___MCU____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_1___MCU____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_1_2___MCU___HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_1_2___MCU___HS_CAN;


void TX_4_1_2___MCU___HS_CAN_Init(TX_4_1_2___MCU___HS_CAN * pMsg);
int TX_4_1_2___MCU___HS_CAN_Transmit(TX_4_1_2___MCU___HS_CAN * pMsg);
int TX_4_1_2___MCU___HS_CAN_Transmit_raw(TX_4_1_2___MCU___HS_CAN * pMsg);
int TX_4_1_2___MCU___HS_CAN_TransmitFast();
#define TX_4_1_2___MCU___HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_1_2___MCU___HS_CAN_Index, 0)
#define TX_4_1_2___MCU___HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_1_2___MCU___HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_2___FBL____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_2___FBL____HS_CAN;


void TX_4_2___FBL____HS_CAN_Init(TX_4_2___FBL____HS_CAN * pMsg);
int TX_4_2___FBL____HS_CAN_Transmit(TX_4_2___FBL____HS_CAN * pMsg);
int TX_4_2___FBL____HS_CAN_Transmit_raw(TX_4_2___FBL____HS_CAN * pMsg);
int TX_4_2___FBL____HS_CAN_TransmitFast();
#define TX_4_2___FBL____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_2___FBL____HS_CAN_Index, 0)
#define TX_4_2___FBL____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_2___FBL____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_3___DSP____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_3___DSP____HS_CAN;


void TX_4_3___DSP____HS_CAN_Init(TX_4_3___DSP____HS_CAN * pMsg);
int TX_4_3___DSP____HS_CAN_Transmit(TX_4_3___DSP____HS_CAN * pMsg);
int TX_4_3___DSP____HS_CAN_Transmit_raw(TX_4_3___DSP____HS_CAN * pMsg);
int TX_4_3___DSP____HS_CAN_TransmitFast();
#define TX_4_3___DSP____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_3___DSP____HS_CAN_Index, 0)
#define TX_4_3___DSP____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_3___DSP____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_3_2___DSP___HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_3_2___DSP___HS_CAN;


void TX_4_3_2___DSP___HS_CAN_Init(TX_4_3_2___DSP___HS_CAN * pMsg);
int TX_4_3_2___DSP___HS_CAN_Transmit(TX_4_3_2___DSP___HS_CAN * pMsg);
int TX_4_3_2___DSP___HS_CAN_Transmit_raw(TX_4_3_2___DSP___HS_CAN * pMsg);
int TX_4_3_2___DSP___HS_CAN_TransmitFast();
#define TX_4_3_2___DSP___HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_3_2___DSP___HS_CAN_Index, 0)
#define TX_4_3_2___DSP___HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_3_2___DSP___HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_5_0___AVM___HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_5_0___AVM___HS_CAN;


void TX_5_0___AVM___HS_CAN_Init(TX_5_0___AVM___HS_CAN * pMsg);
int TX_5_0___AVM___HS_CAN_Transmit(TX_5_0___AVM___HS_CAN * pMsg);
int TX_5_0___AVM___HS_CAN_Transmit_raw(TX_5_0___AVM___HS_CAN * pMsg);
int TX_5_0___AVM___HS_CAN_TransmitFast();
#define TX_5_0___AVM___HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_5_0___AVM___HS_CAN_Index, 0)
#define TX_5_0___AVM___HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_5_0___AVM___HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_2________HS_CAN_out66_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_2________HS_CAN_out66;


void TX_2________HS_CAN_out66_Init(TX_2________HS_CAN_out66 * pMsg);
int TX_2________HS_CAN_out66_Transmit(TX_2________HS_CAN_out66 * pMsg);
int TX_2________HS_CAN_out66_Transmit_raw(TX_2________HS_CAN_out66 * pMsg);
int TX_2________HS_CAN_out66_TransmitFast();
#define TX_2________HS_CAN_out66_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_2________HS_CAN_out66_Index, 0)
#define TX_2________HS_CAN_out66_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_2________HS_CAN_out66_Index, 0, name, outDoubleValuePtr)
extern int TX_6_1__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_1__________HS_CAN;


void TX_6_1__________HS_CAN_Init(TX_6_1__________HS_CAN * pMsg);
int TX_6_1__________HS_CAN_Transmit(TX_6_1__________HS_CAN * pMsg);
int TX_6_1__________HS_CAN_Transmit_raw(TX_6_1__________HS_CAN * pMsg);
int TX_6_1__________HS_CAN_TransmitFast();
#define TX_6_1__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_1__________HS_CAN_Index, 0)
#define TX_6_1__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_1__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_2__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_2__________HS_CAN;


void TX_6_2__________HS_CAN_Init(TX_6_2__________HS_CAN * pMsg);
int TX_6_2__________HS_CAN_Transmit(TX_6_2__________HS_CAN * pMsg);
int TX_6_2__________HS_CAN_Transmit_raw(TX_6_2__________HS_CAN * pMsg);
int TX_6_2__________HS_CAN_TransmitFast();
#define TX_6_2__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_2__________HS_CAN_Index, 0)
#define TX_6_2__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_2__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_3__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_3__________HS_CAN;


void TX_6_3__________HS_CAN_Init(TX_6_3__________HS_CAN * pMsg);
int TX_6_3__________HS_CAN_Transmit(TX_6_3__________HS_CAN * pMsg);
int TX_6_3__________HS_CAN_Transmit_raw(TX_6_3__________HS_CAN * pMsg);
int TX_6_3__________HS_CAN_TransmitFast();
#define TX_6_3__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_3__________HS_CAN_Index, 0)
#define TX_6_3__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_3__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_4__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_4__________HS_CAN;


void TX_6_4__________HS_CAN_Init(TX_6_4__________HS_CAN * pMsg);
int TX_6_4__________HS_CAN_Transmit(TX_6_4__________HS_CAN * pMsg);
int TX_6_4__________HS_CAN_Transmit_raw(TX_6_4__________HS_CAN * pMsg);
int TX_6_4__________HS_CAN_TransmitFast();
#define TX_6_4__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_4__________HS_CAN_Index, 0)
#define TX_6_4__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_4__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_0__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_0__________HS_CAN;


void TX_6_0__________HS_CAN_Init(TX_6_0__________HS_CAN * pMsg);
int TX_6_0__________HS_CAN_Transmit(TX_6_0__________HS_CAN * pMsg);
int TX_6_0__________HS_CAN_Transmit_raw(TX_6_0__________HS_CAN * pMsg);
int TX_6_0__________HS_CAN_TransmitFast();
#define TX_6_0__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_0__________HS_CAN_Index, 0)
#define TX_6_0__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_0__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_5_0___AVM_______HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_5_0___AVM_______HS_CAN;


void TX_5_0___AVM_______HS_CAN_Init(TX_5_0___AVM_______HS_CAN * pMsg);
int TX_5_0___AVM_______HS_CAN_Transmit(TX_5_0___AVM_______HS_CAN * pMsg);
int TX_5_0___AVM_______HS_CAN_Transmit_raw(TX_5_0___AVM_______HS_CAN * pMsg);
int TX_5_0___AVM_______HS_CAN_TransmitFast();
#define TX_5_0___AVM_______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_5_0___AVM_______HS_CAN_Index, 0)
#define TX_5_0___AVM_______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_5_0___AVM_______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Read_DTC_ExtandData_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Read_DTC_ExtandData_HS_CAN;


void TX_0_Read_DTC_ExtandData_HS_CAN_Init(TX_0_Read_DTC_ExtandData_HS_CAN * pMsg);
int TX_0_Read_DTC_ExtandData_HS_CAN_Transmit(TX_0_Read_DTC_ExtandData_HS_CAN * pMsg);
int TX_0_Read_DTC_ExtandData_HS_CAN_Transmit_raw(TX_0_Read_DTC_ExtandData_HS_CAN * pMsg);
int TX_0_Read_DTC_ExtandData_HS_CAN_TransmitFast();
#define TX_0_Read_DTC_ExtandData_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Read_DTC_ExtandData_HS_CAN_Index, 0)
#define TX_0_Read_DTC_ExtandData_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Read_DTC_ExtandData_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Read_Support_DTC_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Read_Support_DTC_HS_CAN;


void TX_0_Read_Support_DTC_HS_CAN_Init(TX_0_Read_Support_DTC_HS_CAN * pMsg);
int TX_0_Read_Support_DTC_HS_CAN_Transmit(TX_0_Read_Support_DTC_HS_CAN * pMsg);
int TX_0_Read_Support_DTC_HS_CAN_Transmit_raw(TX_0_Read_Support_DTC_HS_CAN * pMsg);
int TX_0_Read_Support_DTC_HS_CAN_TransmitFast();
#define TX_0_Read_Support_DTC_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Read_Support_DTC_HS_CAN_Index, 0)
#define TX_0_Read_Support_DTC_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Read_Support_DTC_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Read_DTCSnapshotIdentification_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Read_DTCSnapshotIdentification_HS_CAN;


void TX_0_Read_DTCSnapshotIdentification_HS_CAN_Init(TX_0_Read_DTCSnapshotIdentification_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotIdentification_HS_CAN_Transmit(TX_0_Read_DTCSnapshotIdentification_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotIdentification_HS_CAN_Transmit_raw(TX_0_Read_DTCSnapshotIdentification_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotIdentification_HS_CAN_TransmitFast();
#define TX_0_Read_DTCSnapshotIdentification_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Read_DTCSnapshotIdentification_HS_CAN_Index, 0)
#define TX_0_Read_DTCSnapshotIdentification_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Read_DTCSnapshotIdentification_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN;


void TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_Init(TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_Transmit(TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_Transmit_raw(TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_TransmitFast();
#define TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_Index, 0)
#define TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Read_DTCSnapshotByDTCNumber_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_0_Read_DTCSnapshotByRecNumber_HS_CAN;


void TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_Init(TX_0_Read_DTCSnapshotByRecNumber_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_Transmit(TX_0_Read_DTCSnapshotByRecNumber_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_Transmit_raw(TX_0_Read_DTCSnapshotByRecNumber_HS_CAN * pMsg);
int TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_TransmitFast();
#define TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_Index, 0)
#define TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_0_Read_DTCSnapshotByRecNumber_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_7_0___CPU___HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_7_0___CPU___HS_CAN;


void TX_7_0___CPU___HS_CAN_Init(TX_7_0___CPU___HS_CAN * pMsg);
int TX_7_0___CPU___HS_CAN_Transmit(TX_7_0___CPU___HS_CAN * pMsg);
int TX_7_0___CPU___HS_CAN_Transmit_raw(TX_7_0___CPU___HS_CAN * pMsg);
int TX_7_0___CPU___HS_CAN_TransmitFast();
#define TX_7_0___CPU___HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_7_0___CPU___HS_CAN_Index, 0)
#define TX_7_0___CPU___HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_7_0___CPU___HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_1___________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double key_data; /// Min: 0 Max: 4294967295 Units: 
    DWORD key_data_raw;
} TX_1___________HS_CAN;


void TX_1___________HS_CAN_Init(TX_1___________HS_CAN * pMsg);
int TX_1___________HS_CAN_Transmit(TX_1___________HS_CAN * pMsg);
int TX_1___________HS_CAN_Transmit_raw(TX_1___________HS_CAN * pMsg);
int TX_1___________HS_CAN_UpdateBytesFromSignals(TX_1___________HS_CAN * pMsg);
int TX_1___________HS_CAN_UpdateBytesFromRawSignals(TX_1___________HS_CAN * pMsg);
#define TX_1___________HS_CAN_key_data_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_1___________HS_CAN_Index, 0, dPhysicalValue);
#define TX_1___________HS_CAN_SetSignal_key_data_Physical(dval) SpySetTxSignal(TX_1___________HS_CAN_Index, 0, dval)
#define TX_1___________HS_CAN_SetSignal_key_data_Raw(nval) SpySetTxSignalRaw(TX_1___________HS_CAN_Index, 0, nval)
int TX_1___________HS_CAN_TransmitFast();
#define TX_1___________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_1___________HS_CAN_Index, 0)
#define TX_1___________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_1___________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_4___________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_4___________HS_CAN;


void TX_4_4___________HS_CAN_Init(TX_4_4___________HS_CAN * pMsg);
int TX_4_4___________HS_CAN_Transmit(TX_4_4___________HS_CAN * pMsg);
int TX_4_4___________HS_CAN_Transmit_raw(TX_4_4___________HS_CAN * pMsg);
int TX_4_4___________HS_CAN_TransmitFast();
#define TX_4_4___________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_4___________HS_CAN_Index, 0)
#define TX_4_4___________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_4___________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_5_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_5_________HS_CAN;


void TX_4_5_________HS_CAN_Init(TX_4_5_________HS_CAN * pMsg);
int TX_4_5_________HS_CAN_Transmit(TX_4_5_________HS_CAN * pMsg);
int TX_4_5_________HS_CAN_Transmit_raw(TX_4_5_________HS_CAN * pMsg);
int TX_4_5_________HS_CAN_TransmitFast();
#define TX_4_5_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_5_________HS_CAN_Index, 0)
#define TX_4_5_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_5_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_6_______HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_6_______HS_CAN;


void TX_4_6_______HS_CAN_Init(TX_4_6_______HS_CAN * pMsg);
int TX_4_6_______HS_CAN_Transmit(TX_4_6_______HS_CAN * pMsg);
int TX_4_6_______HS_CAN_Transmit_raw(TX_4_6_______HS_CAN * pMsg);
int TX_4_6_______HS_CAN_TransmitFast();
#define TX_4_6_______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_6_______HS_CAN_Index, 0)
#define TX_4_6_______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_6_______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_7_______HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_7_______HS_CAN;


void TX_4_7_______HS_CAN_Init(TX_4_7_______HS_CAN * pMsg);
int TX_4_7_______HS_CAN_Transmit(TX_4_7_______HS_CAN * pMsg);
int TX_4_7_______HS_CAN_Transmit_raw(TX_4_7_______HS_CAN * pMsg);
int TX_4_7_______HS_CAN_TransmitFast();
#define TX_4_7_______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_7_______HS_CAN_Index, 0)
#define TX_4_7_______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_7_______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_5__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_5__________HS_CAN;


void TX_6_5__________HS_CAN_Init(TX_6_5__________HS_CAN * pMsg);
int TX_6_5__________HS_CAN_Transmit(TX_6_5__________HS_CAN * pMsg);
int TX_6_5__________HS_CAN_Transmit_raw(TX_6_5__________HS_CAN * pMsg);
int TX_6_5__________HS_CAN_TransmitFast();
#define TX_6_5__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_5__________HS_CAN_Index, 0)
#define TX_6_5__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_5__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_6__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_6__________HS_CAN;


void TX_6_6__________HS_CAN_Init(TX_6_6__________HS_CAN * pMsg);
int TX_6_6__________HS_CAN_Transmit(TX_6_6__________HS_CAN * pMsg);
int TX_6_6__________HS_CAN_Transmit_raw(TX_6_6__________HS_CAN * pMsg);
int TX_6_6__________HS_CAN_TransmitFast();
#define TX_6_6__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_6__________HS_CAN_Index, 0)
#define TX_6_6__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_6__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_7__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_7__________HS_CAN;


void TX_6_7__________HS_CAN_Init(TX_6_7__________HS_CAN * pMsg);
int TX_6_7__________HS_CAN_Transmit(TX_6_7__________HS_CAN * pMsg);
int TX_6_7__________HS_CAN_Transmit_raw(TX_6_7__________HS_CAN * pMsg);
int TX_6_7__________HS_CAN_TransmitFast();
#define TX_6_7__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_7__________HS_CAN_Index, 0)
#define TX_6_7__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_7__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_8__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_8__________HS_CAN;


void TX_6_8__________HS_CAN_Init(TX_6_8__________HS_CAN * pMsg);
int TX_6_8__________HS_CAN_Transmit(TX_6_8__________HS_CAN * pMsg);
int TX_6_8__________HS_CAN_Transmit_raw(TX_6_8__________HS_CAN * pMsg);
int TX_6_8__________HS_CAN_TransmitFast();
#define TX_6_8__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_8__________HS_CAN_Index, 0)
#define TX_6_8__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_8__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_9__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_9__________HS_CAN;


void TX_6_9__________HS_CAN_Init(TX_6_9__________HS_CAN * pMsg);
int TX_6_9__________HS_CAN_Transmit(TX_6_9__________HS_CAN * pMsg);
int TX_6_9__________HS_CAN_Transmit_raw(TX_6_9__________HS_CAN * pMsg);
int TX_6_9__________HS_CAN_TransmitFast();
#define TX_6_9__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_9__________HS_CAN_Index, 0)
#define TX_6_9__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_9__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_F1B0_Write_HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Tire_size; /// Min: 0 Max: 3 Units: 
    BYTE Tire_size_raw;
    double Transmission_type; /// Min: 0 Max: 3 Units: 
    BYTE Transmission_type_raw;
    double DriveType; /// Min: 0 Max: 3 Units: 
    BYTE DriveType_raw;
    double DriveHandle_Config; /// Min: 0 Max: 1 Units: 
    BYTE DriveHandle_Config_raw;
    double Vehicle_information; /// Min: 0 Max: 15 Units: 
    BYTE Vehicle_information_raw;
    double Trailer; /// Min: 0 Max: 1 Units: 
    BYTE Trailer_raw;
    double Mirror_mode; /// Min: 0 Max: 3 Units: 
    BYTE Mirror_mode_raw;
    double Surface_modelling; /// Min: 0 Max: 3 Units: 
    BYTE Surface_modelling_raw;
    double RadarType; /// Min: 0 Max: 3 Units: 
    BYTE RadarType_raw;
    double type__of_power; /// Min: 0 Max: 1 Units: 
    BYTE type__of_power_raw;
    double Restyle_Vehicle_information; /// Min: 0 Max: 15 Units: 
    BYTE Restyle_Vehicle_information_raw;
    double Parking_Type; /// Min: 0 Max: 15 Units: 
    BYTE Parking_Type_raw;
} TX_F1B0_Write_HS_CAN;


void TX_F1B0_Write_HS_CAN_Init(TX_F1B0_Write_HS_CAN * pMsg);
int TX_F1B0_Write_HS_CAN_Transmit(TX_F1B0_Write_HS_CAN * pMsg);
int TX_F1B0_Write_HS_CAN_Transmit_raw(TX_F1B0_Write_HS_CAN * pMsg);
int TX_F1B0_Write_HS_CAN_UpdateBytesFromSignals(TX_F1B0_Write_HS_CAN * pMsg);
int TX_F1B0_Write_HS_CAN_UpdateBytesFromRawSignals(TX_F1B0_Write_HS_CAN * pMsg);
#define TX_F1B0_Write_HS_CAN_Tire_size_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 0, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Tire_size_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 0, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Tire_size_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 0, nval)
#define TX_F1B0_Write_HS_CAN_Transmission_type_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 1, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Transmission_type_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 1, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Transmission_type_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 1, nval)
#define TX_F1B0_Write_HS_CAN_DriveType_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 2, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_DriveType_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 2, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_DriveType_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 2, nval)
#define TX_F1B0_Write_HS_CAN_DriveHandle_Config_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 3, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_DriveHandle_Config_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 3, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_DriveHandle_Config_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 3, nval)
#define TX_F1B0_Write_HS_CAN_Vehicle_information_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 4, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Vehicle_information_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 4, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Vehicle_information_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 4, nval)
#define TX_F1B0_Write_HS_CAN_Trailer_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 5, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Trailer_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 5, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Trailer_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 5, nval)
#define TX_F1B0_Write_HS_CAN_Mirror_mode_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 6, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Mirror_mode_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 6, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Mirror_mode_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 6, nval)
#define TX_F1B0_Write_HS_CAN_Surface_modelling_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 7, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Surface_modelling_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 7, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Surface_modelling_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 7, nval)
#define TX_F1B0_Write_HS_CAN_RadarType_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 8, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_RadarType_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 8, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_RadarType_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 8, nval)
#define TX_F1B0_Write_HS_CAN_type__of_power_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 9, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_type__of_power_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 9, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_type__of_power_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 9, nval)
#define TX_F1B0_Write_HS_CAN_Restyle_Vehicle_information_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 10, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Restyle_Vehicle_information_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 10, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Restyle_Vehicle_information_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 10, nval)
#define TX_F1B0_Write_HS_CAN_Parking_Type_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_F1B0_Write_HS_CAN_Index, 11, dPhysicalValue);
#define TX_F1B0_Write_HS_CAN_SetSignal_Parking_Type_Physical(dval) SpySetTxSignal(TX_F1B0_Write_HS_CAN_Index, 11, dval)
#define TX_F1B0_Write_HS_CAN_SetSignal_Parking_Type_Raw(nval) SpySetTxSignalRaw(TX_F1B0_Write_HS_CAN_Index, 11, nval)
int TX_F1B0_Write_HS_CAN_TransmitFast();
#define TX_F1B0_Write_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_F1B0_Write_HS_CAN_Index, 0)
#define TX_F1B0_Write_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_F1B0_Write_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_9_______HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_9_______HS_CAN;


void TX_4_9_______HS_CAN_Init(TX_4_9_______HS_CAN * pMsg);
int TX_4_9_______HS_CAN_Transmit(TX_4_9_______HS_CAN * pMsg);
int TX_4_9_______HS_CAN_Transmit_raw(TX_4_9_______HS_CAN * pMsg);
int TX_4_9_______HS_CAN_TransmitFast();
#define TX_4_9_______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_9_______HS_CAN_Index, 0)
#define TX_4_9_______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_9_______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_7_0_36_01____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_7_0_36_01____HS_CAN;


void TX_7_0_36_01____HS_CAN_Init(TX_7_0_36_01____HS_CAN * pMsg);
int TX_7_0_36_01____HS_CAN_Transmit(TX_7_0_36_01____HS_CAN * pMsg);
int TX_7_0_36_01____HS_CAN_Transmit_raw(TX_7_0_36_01____HS_CAN * pMsg);
int TX_7_0_36_01____HS_CAN_TransmitFast();
#define TX_7_0_36_01____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_7_0_36_01____HS_CAN_Index, 0)
#define TX_7_0_36_01____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_7_0_36_01____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_1______HS_CAN_out121_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_1______HS_CAN_out121;


void TX_1______HS_CAN_out121_Init(TX_1______HS_CAN_out121 * pMsg);
int TX_1______HS_CAN_out121_Transmit(TX_1______HS_CAN_out121 * pMsg);
int TX_1______HS_CAN_out121_Transmit_raw(TX_1______HS_CAN_out121 * pMsg);
int TX_1______HS_CAN_out121_TransmitFast();
#define TX_1______HS_CAN_out121_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_1______HS_CAN_out121_Index, 0)
#define TX_1______HS_CAN_out121_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_1______HS_CAN_out121_Index, 0, name, outDoubleValuePtr)
extern int TX_1______HS_CAN_out123_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_1______HS_CAN_out123;


void TX_1______HS_CAN_out123_Init(TX_1______HS_CAN_out123 * pMsg);
int TX_1______HS_CAN_out123_Transmit(TX_1______HS_CAN_out123 * pMsg);
int TX_1______HS_CAN_out123_Transmit_raw(TX_1______HS_CAN_out123 * pMsg);
int TX_1______HS_CAN_out123_TransmitFast();
#define TX_1______HS_CAN_out123_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_1______HS_CAN_out123_Index, 0)
#define TX_1______HS_CAN_out123_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_1______HS_CAN_out123_Index, 0, name, outDoubleValuePtr)
extern int TX_8_0____________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ______; /// Min: 0 Max: 1 Units: 
    uint64 _______raw;
    double _______sig3; /// Min: 0 Max: 1 Units: 
    BYTE _______sig3_raw;
    double _______sig4; /// Min: 0 Max: 1 Units: 
    BYTE _______sig4_raw;
    double _______sig5; /// Min: 0 Max: 1 Units: 
    BYTE _______sig5_raw;
} TX_8_0____________HS_CAN;


void TX_8_0____________HS_CAN_Init(TX_8_0____________HS_CAN * pMsg);
int TX_8_0____________HS_CAN_Transmit(TX_8_0____________HS_CAN * pMsg);
int TX_8_0____________HS_CAN_Transmit_raw(TX_8_0____________HS_CAN * pMsg);
int TX_8_0____________HS_CAN_UpdateBytesFromSignals(TX_8_0____________HS_CAN * pMsg);
int TX_8_0____________HS_CAN_UpdateBytesFromRawSignals(TX_8_0____________HS_CAN * pMsg);
#define TX_8_0____________HS_CAN________PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_8_0____________HS_CAN_Index, 0, dPhysicalValue);
#define TX_8_0____________HS_CAN_SetSignal________Physical(dval) SpySetTxSignal(TX_8_0____________HS_CAN_Index, 0, dval)
#define TX_8_0____________HS_CAN_SetSignal________Raw(nval) SpySetTxSignalRaw(TX_8_0____________HS_CAN_Index, 0, nval)
#define TX_8_0____________HS_CAN________sig3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_8_0____________HS_CAN_Index, 1, dPhysicalValue);
#define TX_8_0____________HS_CAN_SetSignal________sig3_Physical(dval) SpySetTxSignal(TX_8_0____________HS_CAN_Index, 1, dval)
#define TX_8_0____________HS_CAN_SetSignal________sig3_Raw(nval) SpySetTxSignalRaw(TX_8_0____________HS_CAN_Index, 1, nval)
#define TX_8_0____________HS_CAN________sig4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_8_0____________HS_CAN_Index, 2, dPhysicalValue);
#define TX_8_0____________HS_CAN_SetSignal________sig4_Physical(dval) SpySetTxSignal(TX_8_0____________HS_CAN_Index, 2, dval)
#define TX_8_0____________HS_CAN_SetSignal________sig4_Raw(nval) SpySetTxSignalRaw(TX_8_0____________HS_CAN_Index, 2, nval)
#define TX_8_0____________HS_CAN________sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_8_0____________HS_CAN_Index, 3, dPhysicalValue);
#define TX_8_0____________HS_CAN_SetSignal________sig5_Physical(dval) SpySetTxSignal(TX_8_0____________HS_CAN_Index, 3, dval)
#define TX_8_0____________HS_CAN_SetSignal________sig5_Raw(nval) SpySetTxSignalRaw(TX_8_0____________HS_CAN_Index, 3, nval)
int TX_8_0____________HS_CAN_TransmitFast();
#define TX_8_0____________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_8_0____________HS_CAN_Index, 0)
#define TX_8_0____________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_8_0____________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_8_1______________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_8_1______________HS_CAN;


void TX_8_1______________HS_CAN_Init(TX_8_1______________HS_CAN * pMsg);
int TX_8_1______________HS_CAN_Transmit(TX_8_1______________HS_CAN * pMsg);
int TX_8_1______________HS_CAN_Transmit_raw(TX_8_1______________HS_CAN * pMsg);
int TX_8_1______________HS_CAN_TransmitFast();
#define TX_8_1______________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_8_1______________HS_CAN_Index, 0)
#define TX_8_1______________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_8_1______________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_8_2__AD________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_8_2__AD________HS_CAN;


void TX_8_2__AD________HS_CAN_Init(TX_8_2__AD________HS_CAN * pMsg);
int TX_8_2__AD________HS_CAN_Transmit(TX_8_2__AD________HS_CAN * pMsg);
int TX_8_2__AD________HS_CAN_Transmit_raw(TX_8_2__AD________HS_CAN * pMsg);
int TX_8_2__AD________HS_CAN_TransmitFast();
#define TX_8_2__AD________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_8_2__AD________HS_CAN_Index, 0)
#define TX_8_2__AD________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_8_2__AD________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_6_10__AVM1___HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_6_10__AVM1___HS_CAN;


void TX_6_10__AVM1___HS_CAN_Init(TX_6_10__AVM1___HS_CAN * pMsg);
int TX_6_10__AVM1___HS_CAN_Transmit(TX_6_10__AVM1___HS_CAN * pMsg);
int TX_6_10__AVM1___HS_CAN_Transmit_raw(TX_6_10__AVM1___HS_CAN * pMsg);
int TX_6_10__AVM1___HS_CAN_TransmitFast();
#define TX_6_10__AVM1___HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_6_10__AVM1___HS_CAN_Index, 0)
#define TX_6_10__AVM1___HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_6_10__AVM1___HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_EPS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_EPS1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_EPS1_raw;
    double EPS_InterferDetd; /// Min: 0 Max: 1 Units: 
    BYTE EPS_InterferDetd_raw;
    double EPS_InterferDetdValid; /// Min: 0 Max: 1 Units: 
    BYTE EPS_InterferDetdValid_raw;
    double EPS_AvailSts; /// Min: 0 Max: 3 Units: 
    BYTE EPS_AvailSts_raw;
    double RollingCounter_EPS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_EPS1_raw;
    double EPS_ConsumedCurrValue; /// Min: 0 Max: 127 Units: A
    BYTE EPS_ConsumedCurrValue_raw;
    double EPS_PowerSplyVolt; /// Min: 6 Max: 18.7 Units: Volts
    BYTE EPS_PowerSplyVolt_raw;
    double EPS_TrqSnsrSts; /// Min: 0 Max: 1 Units: 
    BYTE EPS_TrqSnsrSts_raw;
    double EPS_DrvInputTrqValue; /// Min: -22.78 Max: 22.96 Units: Nm
    BYTE EPS_DrvInputTrqValue_raw;
    double EPS_FailSts; /// Min: 0 Max: 1 Units: 
    BYTE EPS_FailSts_raw;
    double EPS_SteerMod; /// Min: 0 Max: 7 Units: 
    BYTE EPS_SteerMod_raw;
} TX_EPS1_HS_CAN;

#define TX_EPS1_HS_CAN_SendType 0
#define TX_EPS1_HS_CAN_SendRate 20
#define TX_EPS1_HS_CAN_SendRateFast 0
#define TX_EPS1_HS_CAN_NumRepetitions 0
#define TX_EPS1_HS_CAN_$_CheckSum_EPS1_SendType 0
#pragma warning(disable : 4005)
#define TX_EPS1_HS_CAN_$_EPS_InterferDetd_$$__False_ 0
#define TX_EPS1_HS_CAN_$_EPS_InterferDetd_$$__True_ 1
#define TX_EPS1_HS_CAN_$_EPS_InterferDetd_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_InterferDetdValid_$$__Invalid_ 0
#define TX_EPS1_HS_CAN_$_EPS_InterferDetdValid_$$__Valid_ 1
#define TX_EPS1_HS_CAN_$_EPS_InterferDetdValid_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_AvailSts_$$__Temporary_inhibit_ 0
#define TX_EPS1_HS_CAN_$_EPS_AvailSts_$$__Available_for_control_ 1
#define TX_EPS1_HS_CAN_$_EPS_AvailSts_$$__Active_ 2
#define TX_EPS1_HS_CAN_$_EPS_AvailSts_$$__Permanently_failed_ 3
#define TX_EPS1_HS_CAN_$_EPS_AvailSts_SendType 0
#define TX_EPS1_HS_CAN_$_RollingCounter_EPS1_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_ConsumedCurrValue_$$__Valid_ 0
#define TX_EPS1_HS_CAN_$_EPS_ConsumedCurrValue_$$__Invalid_ 255
#define TX_EPS1_HS_CAN_$_EPS_ConsumedCurrValue_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_PowerSplyVolt_$$__valid_ 0
#define TX_EPS1_HS_CAN_$_EPS_PowerSplyVolt_$$__Invalid_ 255
#define TX_EPS1_HS_CAN_$_EPS_PowerSplyVolt_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_TrqSnsrSts_$$__Normal_ 0
#define TX_EPS1_HS_CAN_$_EPS_TrqSnsrSts_$$__Abnormal_ 1
#define TX_EPS1_HS_CAN_$_EPS_TrqSnsrSts_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_DrvInputTrqValue_$$__Valid_Clockwise_rotation_is_____and_anti_Clockwise_rotation_is______ 0
#define TX_EPS1_HS_CAN_$_EPS_DrvInputTrqValue_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_FailSts_$$__No_fault_ 0
#define TX_EPS1_HS_CAN_$_EPS_FailSts_$$__Fault_ 1
#define TX_EPS1_HS_CAN_$_EPS_FailSts_SendType 0
#define TX_EPS1_HS_CAN_$_EPS_SteerMod_$$__Comfort_Mode_ 0
#define TX_EPS1_HS_CAN_$_EPS_SteerMod_$$__sport_mode__ 1
#define TX_EPS1_HS_CAN_$_EPS_SteerMod_$$__Handiness_Mode_ 2
#define TX_EPS1_HS_CAN_$_EPS_SteerMod_$$__Reserved_ 3
#define TX_EPS1_HS_CAN_$_EPS_SteerMod_SendType 0
#pragma warning(default : 4005)

void TX_EPS1_HS_CAN_Init(TX_EPS1_HS_CAN * pMsg);
int TX_EPS1_HS_CAN_Transmit(TX_EPS1_HS_CAN * pMsg);
int TX_EPS1_HS_CAN_Transmit_raw(TX_EPS1_HS_CAN * pMsg);
int TX_EPS1_HS_CAN_UpdateBytesFromSignals(TX_EPS1_HS_CAN * pMsg);
int TX_EPS1_HS_CAN_UpdateBytesFromRawSignals(TX_EPS1_HS_CAN * pMsg);
#define TX_EPS1_HS_CAN_CheckSum_EPS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_CheckSum_EPS1_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 0, dval)
#define TX_EPS1_HS_CAN_SetSignal_CheckSum_EPS1_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 0, nval)
#define TX_EPS1_HS_CAN_EPS_InterferDetd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_InterferDetd_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 1, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_InterferDetd_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 1, nval)
#define TX_EPS1_HS_CAN_EPS_InterferDetdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_InterferDetdValid_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 2, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_InterferDetdValid_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 2, nval)
#define TX_EPS1_HS_CAN_EPS_AvailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_AvailSts_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 3, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_AvailSts_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 3, nval)
#define TX_EPS1_HS_CAN_RollingCounter_EPS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_RollingCounter_EPS1_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 4, dval)
#define TX_EPS1_HS_CAN_SetSignal_RollingCounter_EPS1_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 4, nval)
#define TX_EPS1_HS_CAN_EPS_ConsumedCurrValue_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_ConsumedCurrValue_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 5, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_ConsumedCurrValue_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 5, nval)
#define TX_EPS1_HS_CAN_EPS_PowerSplyVolt_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_PowerSplyVolt_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 6, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_PowerSplyVolt_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 6, nval)
#define TX_EPS1_HS_CAN_EPS_TrqSnsrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_TrqSnsrSts_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 7, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_TrqSnsrSts_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 7, nval)
#define TX_EPS1_HS_CAN_EPS_DrvInputTrqValue_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 8, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_DrvInputTrqValue_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 8, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_DrvInputTrqValue_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 8, nval)
#define TX_EPS1_HS_CAN_EPS_FailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 9, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_FailSts_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 9, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_FailSts_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 9, nval)
#define TX_EPS1_HS_CAN_EPS_SteerMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPS1_HS_CAN_Index, 10, dPhysicalValue);
#define TX_EPS1_HS_CAN_SetSignal_EPS_SteerMod_Physical(dval) SpySetTxSignal(TX_EPS1_HS_CAN_Index, 10, dval)
#define TX_EPS1_HS_CAN_SetSignal_EPS_SteerMod_Raw(nval) SpySetTxSignalRaw(TX_EPS1_HS_CAN_Index, 10, nval)
int TX_EPS1_HS_CAN_TransmitFast();
#define TX_EPS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_EPS1_HS_CAN_Index, 0)
#define TX_EPS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_EPS1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ABM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABM1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABM1_raw;
    double RollingCounter_ABM1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABM1_raw;
    double SecLeftSBR; /// Min: 0 Max: 1 Units: 
    BYTE SecLeftSBR_raw;
    double AirBagFailCmd; /// Min: 0 Max: 1 Units: 
    BYTE AirBagFailCmd_raw;
    double SecMiddleSBR; /// Min: 0 Max: 1 Units: 
    BYTE SecMiddleSBR_raw;
    double DriverSBR; /// Min: 0 Max: 1 Units: 
    BYTE DriverSBR_raw;
    double SecRightSBR; /// Min: 0 Max: 1 Units: 
    BYTE SecRightSBR_raw;
    double PassSBR; /// Min: 0 Max: 1 Units: 
    BYTE PassSBR_raw;
    double PassSBR_Visual; /// Min: 0 Max: 3 Units: 
    BYTE PassSBR_Visual_raw;
    double DrvSBR_Visual; /// Min: 0 Max: 3 Units: 
    BYTE DrvSBR_Visual_raw;
} TX_ABM1_HS_CAN;

#define TX_ABM1_HS_CAN_SendType 1
#define TX_ABM1_HS_CAN_SendRate 500
#define TX_ABM1_HS_CAN_SendRateFast 0
#define TX_ABM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ABM1_HS_CAN_$_CheckSum_ABM1_$$__Nmin_ 0
#define TX_ABM1_HS_CAN_$_CheckSum_ABM1_$$__Nmax_ 255
#define TX_ABM1_HS_CAN_$_CheckSum_ABM1_SendType 0
#define TX_ABM1_HS_CAN_$_RollingCounter_ABM1_$$__Nmin_ 0
#define TX_ABM1_HS_CAN_$_RollingCounter_ABM1_$$__Nmax_ 15
#define TX_ABM1_HS_CAN_$_RollingCounter_ABM1_SendType 0
#define TX_ABM1_HS_CAN_$_SecLeftSBR_$$__No_reminder_ 0
#define TX_ABM1_HS_CAN_$_SecLeftSBR_$$__Reminder_ 1
#define TX_ABM1_HS_CAN_$_SecLeftSBR_SendType 0
#define TX_ABM1_HS_CAN_$_AirBagFailCmd_$$__Lamp_off_ 0
#define TX_ABM1_HS_CAN_$_AirBagFailCmd_$$__Lamp_on_ 1
#define TX_ABM1_HS_CAN_$_AirBagFailCmd_SendType 0
#define TX_ABM1_HS_CAN_$_SecMiddleSBR_$$__No_reminder_ 0
#define TX_ABM1_HS_CAN_$_SecMiddleSBR_$$__Reminder_ 1
#define TX_ABM1_HS_CAN_$_SecMiddleSBR_SendType 0
#define TX_ABM1_HS_CAN_$_DriverSBR_$$__No_reminder_ 0
#define TX_ABM1_HS_CAN_$_DriverSBR_$$__Reminder_ 1
#define TX_ABM1_HS_CAN_$_DriverSBR_SendType 0
#define TX_ABM1_HS_CAN_$_SecRightSBR_$$__No_reminder_ 0
#define TX_ABM1_HS_CAN_$_SecRightSBR_$$__Reminder_ 1
#define TX_ABM1_HS_CAN_$_SecRightSBR_SendType 0
#define TX_ABM1_HS_CAN_$_PassSBR_$$__No_reminder_ 0
#define TX_ABM1_HS_CAN_$_PassSBR_$$__Reminder_ 1
#define TX_ABM1_HS_CAN_$_PassSBR_SendType 0
#define TX_ABM1_HS_CAN_$_PassSBR_Visual_$$__Lamp_off_ 0
#define TX_ABM1_HS_CAN_$_PassSBR_Visual_$$__Lamp_on_ 1
#define TX_ABM1_HS_CAN_$_PassSBR_Visual_$$__Reserved_ 2
#define TX_ABM1_HS_CAN_$_PassSBR_Visual_$$__Lamp__blink_ 3
#define TX_ABM1_HS_CAN_$_PassSBR_Visual_SendType 0
#define TX_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Lamp_off_ 0
#define TX_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Lamp_on_ 1
#define TX_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Reserved_ 2
#define TX_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Lamp__blink_ 3
#define TX_ABM1_HS_CAN_$_DrvSBR_Visual_SendType 0
#pragma warning(default : 4005)

void TX_ABM1_HS_CAN_Init(TX_ABM1_HS_CAN * pMsg);
int TX_ABM1_HS_CAN_Transmit(TX_ABM1_HS_CAN * pMsg);
int TX_ABM1_HS_CAN_Transmit_raw(TX_ABM1_HS_CAN * pMsg);
int TX_ABM1_HS_CAN_UpdateBytesFromSignals(TX_ABM1_HS_CAN * pMsg);
int TX_ABM1_HS_CAN_UpdateBytesFromRawSignals(TX_ABM1_HS_CAN * pMsg);
#define TX_ABM1_HS_CAN_CheckSum_ABM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_CheckSum_ABM1_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 0, dval)
#define TX_ABM1_HS_CAN_SetSignal_CheckSum_ABM1_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 0, nval)
#define TX_ABM1_HS_CAN_RollingCounter_ABM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_RollingCounter_ABM1_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 1, dval)
#define TX_ABM1_HS_CAN_SetSignal_RollingCounter_ABM1_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 1, nval)
#define TX_ABM1_HS_CAN_SecLeftSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_SecLeftSBR_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 2, dval)
#define TX_ABM1_HS_CAN_SetSignal_SecLeftSBR_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 2, nval)
#define TX_ABM1_HS_CAN_AirBagFailCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_AirBagFailCmd_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 3, dval)
#define TX_ABM1_HS_CAN_SetSignal_AirBagFailCmd_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 3, nval)
#define TX_ABM1_HS_CAN_SecMiddleSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_SecMiddleSBR_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 4, dval)
#define TX_ABM1_HS_CAN_SetSignal_SecMiddleSBR_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 4, nval)
#define TX_ABM1_HS_CAN_DriverSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_DriverSBR_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 5, dval)
#define TX_ABM1_HS_CAN_SetSignal_DriverSBR_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 5, nval)
#define TX_ABM1_HS_CAN_SecRightSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_SecRightSBR_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 6, dval)
#define TX_ABM1_HS_CAN_SetSignal_SecRightSBR_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 6, nval)
#define TX_ABM1_HS_CAN_PassSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_PassSBR_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 7, dval)
#define TX_ABM1_HS_CAN_SetSignal_PassSBR_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 7, nval)
#define TX_ABM1_HS_CAN_PassSBR_Visual_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 8, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_PassSBR_Visual_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 8, dval)
#define TX_ABM1_HS_CAN_SetSignal_PassSBR_Visual_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 8, nval)
#define TX_ABM1_HS_CAN_DrvSBR_Visual_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM1_HS_CAN_Index, 9, dPhysicalValue);
#define TX_ABM1_HS_CAN_SetSignal_DrvSBR_Visual_Physical(dval) SpySetTxSignal(TX_ABM1_HS_CAN_Index, 9, dval)
#define TX_ABM1_HS_CAN_SetSignal_DrvSBR_Visual_Raw(nval) SpySetTxSignalRaw(TX_ABM1_HS_CAN_Index, 9, nval)
int TX_ABM1_HS_CAN_TransmitFast();
#define TX_ABM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ABM1_HS_CAN_Index, 0)
#define TX_ABM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ABM1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ABM2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABM2; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABM2_raw;
    double LongitudeAcc; /// Min: -21.592 Max: 21.592 Units: m/s^2
    WORD LongitudeAcc_raw;
    double LateralAcce; /// Min: -21.592 Max: 21.592 Units: m/s^2
    WORD LateralAcce_raw;
    double VehDynYawRate; /// Min: -2.093 Max: 2.093 Units: rad/s
    WORD VehDynYawRate_raw;
    double LongitudeAccValid; /// Min: 0 Max: 1 Units: 
    BYTE LongitudeAccValid_raw;
    double LateralAcceValid; /// Min: 0 Max: 1 Units: 
    BYTE LateralAcceValid_raw;
    double VehDynYawRateValid; /// Min: 0 Max: 1 Units: 
    BYTE VehDynYawRateValid_raw;
    double RollingCounter_ABM2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABM2_raw;
} TX_ABM2_HS_CAN;

#define TX_ABM2_HS_CAN_SendType 0
#define TX_ABM2_HS_CAN_SendRate 20
#define TX_ABM2_HS_CAN_SendRateFast 0
#define TX_ABM2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ABM2_HS_CAN_$_CheckSum_ABM2_$$__Nmin_ 0
#define TX_ABM2_HS_CAN_$_CheckSum_ABM2_$$__Nmax_ 255
#define TX_ABM2_HS_CAN_$_CheckSum_ABM2_SendType 0
#define TX_ABM2_HS_CAN_$_LongitudeAcc_$$__Valid_Value_ 0
#define TX_ABM2_HS_CAN_$_LongitudeAcc_$$__Reserved_ 44067
#define TX_ABM2_HS_CAN_$_LongitudeAcc_SendType 0
#define TX_ABM2_HS_CAN_$_LateralAcce_$$__Valid_Value_ 0
#define TX_ABM2_HS_CAN_$_LateralAcce_$$__Reserved_ 44067
#define TX_ABM2_HS_CAN_$_LateralAcce_SendType 0
#define TX_ABM2_HS_CAN_$_VehDynYawRate_$$__Valid_Value_ 0
#define TX_ABM2_HS_CAN_$_VehDynYawRate_$$__Reserved_ 17442
#define TX_ABM2_HS_CAN_$_VehDynYawRate_SendType 0
#define TX_ABM2_HS_CAN_$_LongitudeAccValid_$$__Invalid_ 0
#define TX_ABM2_HS_CAN_$_LongitudeAccValid_$$__Valid_ 1
#define TX_ABM2_HS_CAN_$_LongitudeAccValid_SendType 0
#define TX_ABM2_HS_CAN_$_LateralAcceValid_$$__Invalid_ 0
#define TX_ABM2_HS_CAN_$_LateralAcceValid_$$__Valid_ 1
#define TX_ABM2_HS_CAN_$_LateralAcceValid_SendType 0
#define TX_ABM2_HS_CAN_$_VehDynYawRateValid_$$__Invalid_ 0
#define TX_ABM2_HS_CAN_$_VehDynYawRateValid_$$__Valid_ 1
#define TX_ABM2_HS_CAN_$_VehDynYawRateValid_SendType 0
#define TX_ABM2_HS_CAN_$_RollingCounter_ABM2_$$__Nmin_ 0
#define TX_ABM2_HS_CAN_$_RollingCounter_ABM2_$$__Nmax_ 15
#define TX_ABM2_HS_CAN_$_RollingCounter_ABM2_SendType 0
#pragma warning(default : 4005)

void TX_ABM2_HS_CAN_Init(TX_ABM2_HS_CAN * pMsg);
int TX_ABM2_HS_CAN_Transmit(TX_ABM2_HS_CAN * pMsg);
int TX_ABM2_HS_CAN_Transmit_raw(TX_ABM2_HS_CAN * pMsg);
int TX_ABM2_HS_CAN_UpdateBytesFromSignals(TX_ABM2_HS_CAN * pMsg);
int TX_ABM2_HS_CAN_UpdateBytesFromRawSignals(TX_ABM2_HS_CAN * pMsg);
#define TX_ABM2_HS_CAN_CheckSum_ABM2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_CheckSum_ABM2_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 0, dval)
#define TX_ABM2_HS_CAN_SetSignal_CheckSum_ABM2_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 0, nval)
#define TX_ABM2_HS_CAN_LongitudeAcc_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_LongitudeAcc_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 1, dval)
#define TX_ABM2_HS_CAN_SetSignal_LongitudeAcc_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 1, nval)
#define TX_ABM2_HS_CAN_LateralAcce_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_LateralAcce_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 2, dval)
#define TX_ABM2_HS_CAN_SetSignal_LateralAcce_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 2, nval)
#define TX_ABM2_HS_CAN_VehDynYawRate_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_VehDynYawRate_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 3, dval)
#define TX_ABM2_HS_CAN_SetSignal_VehDynYawRate_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 3, nval)
#define TX_ABM2_HS_CAN_LongitudeAccValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_LongitudeAccValid_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 4, dval)
#define TX_ABM2_HS_CAN_SetSignal_LongitudeAccValid_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 4, nval)
#define TX_ABM2_HS_CAN_LateralAcceValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_LateralAcceValid_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 5, dval)
#define TX_ABM2_HS_CAN_SetSignal_LateralAcceValid_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 5, nval)
#define TX_ABM2_HS_CAN_VehDynYawRateValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_VehDynYawRateValid_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 6, dval)
#define TX_ABM2_HS_CAN_SetSignal_VehDynYawRateValid_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 6, nval)
#define TX_ABM2_HS_CAN_RollingCounter_ABM2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABM2_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ABM2_HS_CAN_SetSignal_RollingCounter_ABM2_Physical(dval) SpySetTxSignal(TX_ABM2_HS_CAN_Index, 7, dval)
#define TX_ABM2_HS_CAN_SetSignal_RollingCounter_ABM2_Raw(nval) SpySetTxSignalRaw(TX_ABM2_HS_CAN_Index, 7, nval)
int TX_ABM2_HS_CAN_TransmitFast();
#define TX_ABM2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ABM2_HS_CAN_Index, 0)
#define TX_ABM2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ABM2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ABS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS1_raw;
    double FLWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE FLWheelDriveDirection_raw;
    double FLWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE FLWheelSpdValid_raw;
    double FLWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD FLWheelSpd_raw;
    double FRWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE FRWheelDriveDirection_raw;
    double FRWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE FRWheelSpdValid_raw;
    double FRWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD FRWheelSpd_raw;
    double RollingCounter_ABS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS1_raw;
} TX_ABS1_HS_CAN;

#define TX_ABS1_HS_CAN_SendType 0
#define TX_ABS1_HS_CAN_SendRate 20
#define TX_ABS1_HS_CAN_SendRateFast 0
#define TX_ABS1_HS_CAN_NumRepetitions 0
#define TX_ABS1_HS_CAN_$_CheckSum_ABS1_SendType 0
#pragma warning(disable : 4005)
#define TX_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Invalid_ 0
#define TX_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Forward_ 1
#define TX_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Backward_ 2
#define TX_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Stop_ 3
#define TX_ABS1_HS_CAN_$_FLWheelDriveDirection_SendType 0
#define TX_ABS1_HS_CAN_$_FLWheelSpdValid_$$__Invalid_ 0
#define TX_ABS1_HS_CAN_$_FLWheelSpdValid_$$__Valid_ 1
#define TX_ABS1_HS_CAN_$_FLWheelSpdValid_SendType 0
#define TX_ABS1_HS_CAN_$_FLWheelSpd_$$__Valid_ 0
#define TX_ABS1_HS_CAN_$_FLWheelSpd_$$__Reserved_ 5334
#define TX_ABS1_HS_CAN_$_FLWheelSpd_SendType 0
#define TX_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Invalid_ 0
#define TX_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Forward_ 1
#define TX_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Backward_ 2
#define TX_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Stop_ 3
#define TX_ABS1_HS_CAN_$_FRWheelDriveDirection_SendType 0
#define TX_ABS1_HS_CAN_$_FRWheelSpdValid_$$__Invalid_ 0
#define TX_ABS1_HS_CAN_$_FRWheelSpdValid_$$__Valid_ 1
#define TX_ABS1_HS_CAN_$_FRWheelSpdValid_SendType 0
#define TX_ABS1_HS_CAN_$_FRWheelSpd_$$__Valid_ 0
#define TX_ABS1_HS_CAN_$_FRWheelSpd_$$__Reserved_ 5334
#define TX_ABS1_HS_CAN_$_FRWheelSpd_SendType 0
#define TX_ABS1_HS_CAN_$_RollingCounter_ABS1_SendType 0
#pragma warning(default : 4005)

void TX_ABS1_HS_CAN_Init(TX_ABS1_HS_CAN * pMsg);
int TX_ABS1_HS_CAN_Transmit(TX_ABS1_HS_CAN * pMsg);
int TX_ABS1_HS_CAN_Transmit_raw(TX_ABS1_HS_CAN * pMsg);
int TX_ABS1_HS_CAN_UpdateBytesFromSignals(TX_ABS1_HS_CAN * pMsg);
int TX_ABS1_HS_CAN_UpdateBytesFromRawSignals(TX_ABS1_HS_CAN * pMsg);
#define TX_ABS1_HS_CAN_CheckSum_ABS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_CheckSum_ABS1_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 0, dval)
#define TX_ABS1_HS_CAN_SetSignal_CheckSum_ABS1_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 0, nval)
#define TX_ABS1_HS_CAN_FLWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_FLWheelDriveDirection_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 1, dval)
#define TX_ABS1_HS_CAN_SetSignal_FLWheelDriveDirection_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 1, nval)
#define TX_ABS1_HS_CAN_FLWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_FLWheelSpdValid_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 2, dval)
#define TX_ABS1_HS_CAN_SetSignal_FLWheelSpdValid_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 2, nval)
#define TX_ABS1_HS_CAN_FLWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_FLWheelSpd_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 3, dval)
#define TX_ABS1_HS_CAN_SetSignal_FLWheelSpd_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 3, nval)
#define TX_ABS1_HS_CAN_FRWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_FRWheelDriveDirection_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 4, dval)
#define TX_ABS1_HS_CAN_SetSignal_FRWheelDriveDirection_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 4, nval)
#define TX_ABS1_HS_CAN_FRWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_FRWheelSpdValid_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 5, dval)
#define TX_ABS1_HS_CAN_SetSignal_FRWheelSpdValid_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 5, nval)
#define TX_ABS1_HS_CAN_FRWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_FRWheelSpd_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 6, dval)
#define TX_ABS1_HS_CAN_SetSignal_FRWheelSpd_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 6, nval)
#define TX_ABS1_HS_CAN_RollingCounter_ABS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ABS1_HS_CAN_SetSignal_RollingCounter_ABS1_Physical(dval) SpySetTxSignal(TX_ABS1_HS_CAN_Index, 7, dval)
#define TX_ABS1_HS_CAN_SetSignal_RollingCounter_ABS1_Raw(nval) SpySetTxSignalRaw(TX_ABS1_HS_CAN_Index, 7, nval)
int TX_ABS1_HS_CAN_TransmitFast();
#define TX_ABS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ABS1_HS_CAN_Index, 0)
#define TX_ABS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ABS1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ABS2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS2; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS2_raw;
    double RLWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE RLWheelDriveDirection_raw;
    double RLWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE RLWheelSpdValid_raw;
    double RLWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD RLWheelSpd_raw;
    double RRWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE RRWheelDriveDirection_raw;
    double RRWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE RRWheelSpdValid_raw;
    double RRWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD RRWheelSpd_raw;
    double RollingCounter_ABS2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS2_raw;
} TX_ABS2_HS_CAN;

#define TX_ABS2_HS_CAN_SendType 0
#define TX_ABS2_HS_CAN_SendRate 20
#define TX_ABS2_HS_CAN_SendRateFast 0
#define TX_ABS2_HS_CAN_NumRepetitions 0
#define TX_ABS2_HS_CAN_$_CheckSum_ABS2_SendType 0
#pragma warning(disable : 4005)
#define TX_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Invalid_ 0
#define TX_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Forward_ 1
#define TX_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Backward_ 2
#define TX_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Stop_ 3
#define TX_ABS2_HS_CAN_$_RLWheelDriveDirection_SendType 0
#define TX_ABS2_HS_CAN_$_RLWheelSpdValid_$$__Invalid_ 0
#define TX_ABS2_HS_CAN_$_RLWheelSpdValid_$$__Valid_ 1
#define TX_ABS2_HS_CAN_$_RLWheelSpdValid_SendType 0
#define TX_ABS2_HS_CAN_$_RLWheelSpd_$$__Valid_ 0
#define TX_ABS2_HS_CAN_$_RLWheelSpd_$$__Reserved_ 5334
#define TX_ABS2_HS_CAN_$_RLWheelSpd_SendType 0
#define TX_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Invalid_ 0
#define TX_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Forward_ 1
#define TX_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Backward_ 2
#define TX_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Stop_ 3
#define TX_ABS2_HS_CAN_$_RRWheelDriveDirection_SendType 0
#define TX_ABS2_HS_CAN_$_RRWheelSpdValid_$$__Invalid_ 0
#define TX_ABS2_HS_CAN_$_RRWheelSpdValid_$$__Valid_ 1
#define TX_ABS2_HS_CAN_$_RRWheelSpdValid_SendType 0
#define TX_ABS2_HS_CAN_$_RRWheelSpd_$$__Valid_ 0
#define TX_ABS2_HS_CAN_$_RRWheelSpd_$$__Reserved_ 5334
#define TX_ABS2_HS_CAN_$_RRWheelSpd_SendType 0
#define TX_ABS2_HS_CAN_$_RollingCounter_ABS2_SendType 0
#pragma warning(default : 4005)

void TX_ABS2_HS_CAN_Init(TX_ABS2_HS_CAN * pMsg);
int TX_ABS2_HS_CAN_Transmit(TX_ABS2_HS_CAN * pMsg);
int TX_ABS2_HS_CAN_Transmit_raw(TX_ABS2_HS_CAN * pMsg);
int TX_ABS2_HS_CAN_UpdateBytesFromSignals(TX_ABS2_HS_CAN * pMsg);
int TX_ABS2_HS_CAN_UpdateBytesFromRawSignals(TX_ABS2_HS_CAN * pMsg);
#define TX_ABS2_HS_CAN_CheckSum_ABS2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_CheckSum_ABS2_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 0, dval)
#define TX_ABS2_HS_CAN_SetSignal_CheckSum_ABS2_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 0, nval)
#define TX_ABS2_HS_CAN_RLWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_RLWheelDriveDirection_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 1, dval)
#define TX_ABS2_HS_CAN_SetSignal_RLWheelDriveDirection_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 1, nval)
#define TX_ABS2_HS_CAN_RLWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_RLWheelSpdValid_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 2, dval)
#define TX_ABS2_HS_CAN_SetSignal_RLWheelSpdValid_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 2, nval)
#define TX_ABS2_HS_CAN_RLWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_RLWheelSpd_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 3, dval)
#define TX_ABS2_HS_CAN_SetSignal_RLWheelSpd_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 3, nval)
#define TX_ABS2_HS_CAN_RRWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_RRWheelDriveDirection_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 4, dval)
#define TX_ABS2_HS_CAN_SetSignal_RRWheelDriveDirection_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 4, nval)
#define TX_ABS2_HS_CAN_RRWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_RRWheelSpdValid_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 5, dval)
#define TX_ABS2_HS_CAN_SetSignal_RRWheelSpdValid_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 5, nval)
#define TX_ABS2_HS_CAN_RRWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_RRWheelSpd_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 6, dval)
#define TX_ABS2_HS_CAN_SetSignal_RRWheelSpd_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 6, nval)
#define TX_ABS2_HS_CAN_RollingCounter_ABS2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS2_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ABS2_HS_CAN_SetSignal_RollingCounter_ABS2_Physical(dval) SpySetTxSignal(TX_ABS2_HS_CAN_Index, 7, dval)
#define TX_ABS2_HS_CAN_SetSignal_RollingCounter_ABS2_Raw(nval) SpySetTxSignalRaw(TX_ABS2_HS_CAN_Index, 7, nval)
int TX_ABS2_HS_CAN_TransmitFast();
#define TX_ABS2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ABS2_HS_CAN_Index, 0)
#define TX_ABS2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ABS2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ABS3_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS3; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS3_raw;
    double ABSFailSts; /// Min: 0 Max: 1 Units: 
    BYTE ABSFailSts_raw;
    double EBDFailSts; /// Min: 0 Max: 1 Units: 
    BYTE EBDFailSts_raw;
    double VehicleSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE VehicleSpdValid_raw;
    double VehicleSpd; /// Min: 0 Max: 5334 Units: km/h
    WORD VehicleSpd_raw;
    double ABSCtrlActive; /// Min: 0 Max: 1 Units: 
    BYTE ABSCtrlActive_raw;
    double ABSActive; /// Min: 0 Max: 1 Units: 
    BYTE ABSActive_raw;
    double VehicleODOInfoSts; /// Min: 0 Max: 1 Units: 
    BYTE VehicleODOInfoSts_raw;
    double VehicleODOInfo; /// Min: 0 Max: 999 Units: m
    WORD VehicleODOInfo_raw;
    double RollingCounter_ABS3; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS3_raw;
} TX_ABS3_HS_CAN;

#define TX_ABS3_HS_CAN_SendType 0
#define TX_ABS3_HS_CAN_SendRate 20
#define TX_ABS3_HS_CAN_SendRateFast 0
#define TX_ABS3_HS_CAN_NumRepetitions 0
#define TX_ABS3_HS_CAN_$_CheckSum_ABS3_SendType 0
#pragma warning(disable : 4005)
#define TX_ABS3_HS_CAN_$_ABSFailSts_$$__No_failure_ 0
#define TX_ABS3_HS_CAN_$_ABSFailSts_$$__Failure_ 1
#define TX_ABS3_HS_CAN_$_ABSFailSts_SendType 0
#define TX_ABS3_HS_CAN_$_EBDFailSts_$$__No_failure_ 0
#define TX_ABS3_HS_CAN_$_EBDFailSts_$$__Failure_ 1
#define TX_ABS3_HS_CAN_$_EBDFailSts_SendType 0
#define TX_ABS3_HS_CAN_$_VehicleSpdValid_$$__Invalid_ 0
#define TX_ABS3_HS_CAN_$_VehicleSpdValid_$$__Valid_ 1
#define TX_ABS3_HS_CAN_$_VehicleSpdValid_SendType 0
#define TX_ABS3_HS_CAN_$_VehicleSpd_$$__Valid_ 0
#define TX_ABS3_HS_CAN_$_VehicleSpd_$$__Reserved_ 5334
#define TX_ABS3_HS_CAN_$_VehicleSpd_SendType 0
#define TX_ABS3_HS_CAN_$_ABSCtrlActive_$$__Not_active_ 0
#define TX_ABS3_HS_CAN_$_ABSCtrlActive_$$__Active_ 1
#define TX_ABS3_HS_CAN_$_ABSCtrlActive_SendType 0
#define TX_ABS3_HS_CAN_$_ABSActive_$$__Not_active_ 0
#define TX_ABS3_HS_CAN_$_ABSActive_$$__Active_ 1
#define TX_ABS3_HS_CAN_$_ABSActive_SendType 0
#define TX_ABS3_HS_CAN_$_VehicleODOInfoSts_$$__Valid_ 0
#define TX_ABS3_HS_CAN_$_VehicleODOInfoSts_$$__Invalid_ 1
#define TX_ABS3_HS_CAN_$_VehicleODOInfoSts_SendType 0
#define TX_ABS3_HS_CAN_$_VehicleODOInfo_$$__Valid_ 0
#define TX_ABS3_HS_CAN_$_VehicleODOInfo_$$__Reserved_ 1000
#define TX_ABS3_HS_CAN_$_VehicleODOInfo_SendType 0
#define TX_ABS3_HS_CAN_$_RollingCounter_ABS3_SendType 0
#pragma warning(default : 4005)

void TX_ABS3_HS_CAN_Init(TX_ABS3_HS_CAN * pMsg);
int TX_ABS3_HS_CAN_Transmit(TX_ABS3_HS_CAN * pMsg);
int TX_ABS3_HS_CAN_Transmit_raw(TX_ABS3_HS_CAN * pMsg);
int TX_ABS3_HS_CAN_UpdateBytesFromSignals(TX_ABS3_HS_CAN * pMsg);
int TX_ABS3_HS_CAN_UpdateBytesFromRawSignals(TX_ABS3_HS_CAN * pMsg);
#define TX_ABS3_HS_CAN_CheckSum_ABS3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_CheckSum_ABS3_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 0, dval)
#define TX_ABS3_HS_CAN_SetSignal_CheckSum_ABS3_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 0, nval)
#define TX_ABS3_HS_CAN_ABSFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_ABSFailSts_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 1, dval)
#define TX_ABS3_HS_CAN_SetSignal_ABSFailSts_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 1, nval)
#define TX_ABS3_HS_CAN_EBDFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_EBDFailSts_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 2, dval)
#define TX_ABS3_HS_CAN_SetSignal_EBDFailSts_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 2, nval)
#define TX_ABS3_HS_CAN_VehicleSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_VehicleSpdValid_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 3, dval)
#define TX_ABS3_HS_CAN_SetSignal_VehicleSpdValid_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 3, nval)
#define TX_ABS3_HS_CAN_VehicleSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_VehicleSpd_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 4, dval)
#define TX_ABS3_HS_CAN_SetSignal_VehicleSpd_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 4, nval)
#define TX_ABS3_HS_CAN_ABSCtrlActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_ABSCtrlActive_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 5, dval)
#define TX_ABS3_HS_CAN_SetSignal_ABSCtrlActive_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 5, nval)
#define TX_ABS3_HS_CAN_ABSActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_ABSActive_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 6, dval)
#define TX_ABS3_HS_CAN_SetSignal_ABSActive_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 6, nval)
#define TX_ABS3_HS_CAN_VehicleODOInfoSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_VehicleODOInfoSts_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 7, dval)
#define TX_ABS3_HS_CAN_SetSignal_VehicleODOInfoSts_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 7, nval)
#define TX_ABS3_HS_CAN_VehicleODOInfo_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 8, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_VehicleODOInfo_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 8, dval)
#define TX_ABS3_HS_CAN_SetSignal_VehicleODOInfo_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 8, nval)
#define TX_ABS3_HS_CAN_RollingCounter_ABS3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS3_HS_CAN_Index, 9, dPhysicalValue);
#define TX_ABS3_HS_CAN_SetSignal_RollingCounter_ABS3_Physical(dval) SpySetTxSignal(TX_ABS3_HS_CAN_Index, 9, dval)
#define TX_ABS3_HS_CAN_SetSignal_RollingCounter_ABS3_Raw(nval) SpySetTxSignalRaw(TX_ABS3_HS_CAN_Index, 9, nval)
int TX_ABS3_HS_CAN_TransmitFast();
#define TX_ABS3_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ABS3_HS_CAN_Index, 0)
#define TX_ABS3_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ABS3_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ABS4_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS4; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS4_raw;
    double WssFLEdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssFLEdgesSum_raw;
    double WssFREdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssFREdgesSum_raw;
    double WssRREdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssRREdgesSum_raw;
    double WssRLEdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssRLEdgesSum_raw;
    double WssFLEdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssFLEdgesSumvalid_raw;
    double WssFREdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssFREdgesSumvalid_raw;
    double WssRLEdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssRLEdgesSumvalid_raw;
    double WssRREdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssRREdgesSumvalid_raw;
    double RollingCounter_ABS4; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS4_raw;
} TX_ABS4_HS_CAN;

#define TX_ABS4_HS_CAN_SendType 0
#define TX_ABS4_HS_CAN_SendRate 10
#define TX_ABS4_HS_CAN_SendRateFast 0
#define TX_ABS4_HS_CAN_NumRepetitions 0
#define TX_ABS4_HS_CAN_$_CheckSum_ABS4_SendType 0
#define TX_ABS4_HS_CAN_$_WssFLEdgesSum_SendType 0
#define TX_ABS4_HS_CAN_$_WssFREdgesSum_SendType 0
#define TX_ABS4_HS_CAN_$_WssRREdgesSum_SendType 0
#define TX_ABS4_HS_CAN_$_WssRLEdgesSum_SendType 0
#pragma warning(disable : 4005)
#define TX_ABS4_HS_CAN_$_WssFLEdgesSumvalid_$$__Valid_ 0
#define TX_ABS4_HS_CAN_$_WssFLEdgesSumvalid_$$__Invalid_ 1
#define TX_ABS4_HS_CAN_$_WssFLEdgesSumvalid_SendType 0
#define TX_ABS4_HS_CAN_$_WssFREdgesSumvalid_$$__Valid_ 0
#define TX_ABS4_HS_CAN_$_WssFREdgesSumvalid_$$__Invalid_ 1
#define TX_ABS4_HS_CAN_$_WssFREdgesSumvalid_SendType 0
#define TX_ABS4_HS_CAN_$_WssRLEdgesSumvalid_$$__Valid_ 0
#define TX_ABS4_HS_CAN_$_WssRLEdgesSumvalid_$$__Invalid_ 1
#define TX_ABS4_HS_CAN_$_WssRLEdgesSumvalid_SendType 0
#define TX_ABS4_HS_CAN_$_WssRREdgesSumvalid_$$__Valid_ 0
#define TX_ABS4_HS_CAN_$_WssRREdgesSumvalid_$$__Invalid_ 1
#define TX_ABS4_HS_CAN_$_WssRREdgesSumvalid_SendType 0
#define TX_ABS4_HS_CAN_$_RollingCounter_ABS4_SendType 0
#pragma warning(default : 4005)

void TX_ABS4_HS_CAN_Init(TX_ABS4_HS_CAN * pMsg);
int TX_ABS4_HS_CAN_Transmit(TX_ABS4_HS_CAN * pMsg);
int TX_ABS4_HS_CAN_Transmit_raw(TX_ABS4_HS_CAN * pMsg);
int TX_ABS4_HS_CAN_UpdateBytesFromSignals(TX_ABS4_HS_CAN * pMsg);
int TX_ABS4_HS_CAN_UpdateBytesFromRawSignals(TX_ABS4_HS_CAN * pMsg);
#define TX_ABS4_HS_CAN_CheckSum_ABS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_CheckSum_ABS4_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 0, dval)
#define TX_ABS4_HS_CAN_SetSignal_CheckSum_ABS4_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 0, nval)
#define TX_ABS4_HS_CAN_WssFLEdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssFLEdgesSum_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 1, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssFLEdgesSum_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 1, nval)
#define TX_ABS4_HS_CAN_WssFREdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssFREdgesSum_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 2, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssFREdgesSum_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 2, nval)
#define TX_ABS4_HS_CAN_WssRREdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssRREdgesSum_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 3, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssRREdgesSum_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 3, nval)
#define TX_ABS4_HS_CAN_WssRLEdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssRLEdgesSum_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 4, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssRLEdgesSum_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 4, nval)
#define TX_ABS4_HS_CAN_WssFLEdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssFLEdgesSumvalid_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 5, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssFLEdgesSumvalid_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 5, nval)
#define TX_ABS4_HS_CAN_WssFREdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssFREdgesSumvalid_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 6, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssFREdgesSumvalid_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 6, nval)
#define TX_ABS4_HS_CAN_WssRLEdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssRLEdgesSumvalid_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 7, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssRLEdgesSumvalid_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 7, nval)
#define TX_ABS4_HS_CAN_WssRREdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 8, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_WssRREdgesSumvalid_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 8, dval)
#define TX_ABS4_HS_CAN_SetSignal_WssRREdgesSumvalid_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 8, nval)
#define TX_ABS4_HS_CAN_RollingCounter_ABS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ABS4_HS_CAN_Index, 9, dPhysicalValue);
#define TX_ABS4_HS_CAN_SetSignal_RollingCounter_ABS4_Physical(dval) SpySetTxSignal(TX_ABS4_HS_CAN_Index, 9, dval)
#define TX_ABS4_HS_CAN_SetSignal_RollingCounter_ABS4_Raw(nval) SpySetTxSignalRaw(TX_ABS4_HS_CAN_Index, 9, nval)
int TX_ABS4_HS_CAN_TransmitFast();
#define TX_ABS4_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ABS4_HS_CAN_Index, 0)
#define TX_ABS4_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ABS4_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_AC2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ACAmbtTemp; /// Min: -40 Max: 86.5 Units: �C
    BYTE ACAmbtTemp_raw;
} TX_AC2_HS_CAN;

#define TX_AC2_HS_CAN_SendType 0
#define TX_AC2_HS_CAN_SendRate 100
#define TX_AC2_HS_CAN_SendRateFast 0
#define TX_AC2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_AC2_HS_CAN_$_ACAmbtTemp_$$__Valid_value_ 0
#define TX_AC2_HS_CAN_$_ACAmbtTemp_$$__Init_ 254
#define TX_AC2_HS_CAN_$_ACAmbtTemp_$$__Failure_ 255
#define TX_AC2_HS_CAN_$_ACAmbtTemp_SendType 0
#pragma warning(default : 4005)

void TX_AC2_HS_CAN_Init(TX_AC2_HS_CAN * pMsg);
int TX_AC2_HS_CAN_Transmit(TX_AC2_HS_CAN * pMsg);
int TX_AC2_HS_CAN_Transmit_raw(TX_AC2_HS_CAN * pMsg);
int TX_AC2_HS_CAN_UpdateBytesFromSignals(TX_AC2_HS_CAN * pMsg);
int TX_AC2_HS_CAN_UpdateBytesFromRawSignals(TX_AC2_HS_CAN * pMsg);
#define TX_AC2_HS_CAN_ACAmbtTemp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_AC2_HS_CAN_Index, 0, dPhysicalValue);
#define TX_AC2_HS_CAN_SetSignal_ACAmbtTemp_Physical(dval) SpySetTxSignal(TX_AC2_HS_CAN_Index, 0, dval)
#define TX_AC2_HS_CAN_SetSignal_ACAmbtTemp_Raw(nval) SpySetTxSignalRaw(TX_AC2_HS_CAN_Index, 0, nval)
int TX_AC2_HS_CAN_TransmitFast();
#define TX_AC2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_AC2_HS_CAN_Index, 0)
#define TX_AC2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_AC2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_BCM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double PosLmpOutputSts; /// Min: 0 Max: 1 Units: 
    BYTE PosLmpOutputSts_raw;
    double IPBackgroundLightCmd; /// Min: 0 Max: 1 Units: 
    BYTE IPBackgroundLightCmd_raw;
    double FrontFogLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE FrontFogLmpSts_raw;
    double RearFogLmpSts; /// Min: 0 Max: 1 Units: 
    BYTE RearFogLmpSts_raw;
    double HighBeamSts; /// Min: 0 Max: 1 Units: 
    BYTE HighBeamSts_raw;
    double LowBeamSts; /// Min: 0 Max: 1 Units: 
    BYTE LowBeamSts_raw;
    double LeftTurnLampSts; /// Min: 0 Max: 1 Units: 
    BYTE LeftTurnLampSts_raw;
    double RightTurnLampSts; /// Min: 0 Max: 1 Units: 
    BYTE RightTurnLampSts_raw;
    double BrakeLmpFailSts; /// Min: 0 Max: 1 Units: 
    BYTE BrakeLmpFailSts_raw;
    double TrunkSts; /// Min: 0 Max: 1 Units: 
    BYTE TrunkSts_raw;
    double DriverDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE DriverDoorSts_raw;
    double RLDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE RLDoorSts_raw;
    double PassengerDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE PassengerDoorSts_raw;
    double RRDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE RRDoorSts_raw;
    double WindShieldWiperActSts; /// Min: 0 Max: 1 Units: 
    BYTE WindShieldWiperActSts_raw;
    double BrakePedSts; /// Min: 0 Max: 1 Units: 
    BYTE BrakePedSts_raw;
    double BrakePedFailSts; /// Min: 0 Max: 1 Units: 
    BYTE BrakePedFailSts_raw;
    double BackgroundLightLvl; /// Min: 0 Max: 255 Units: 
    BYTE BackgroundLightLvl_raw;
    double RearFogLmpFailSts; /// Min: 0 Max: 1 Units: 
    BYTE RearFogLmpFailSts_raw;
    double DDDWarning; /// Min: 0 Max: 3 Units: 
    BYTE DDDWarning_raw;
    double HoodSts; /// Min: 0 Max: 1 Units: 
    BYTE HoodSts_raw;
    double LeftTurnSWSts; /// Min: 0 Max: 1 Units: 
    BYTE LeftTurnSWSts_raw;
    double RightTurnSWSts; /// Min: 0 Max: 1 Units: 
    BYTE RightTurnSWSts_raw;
    double RLSFailSts; /// Min: 0 Max: 1 Units: 
    BYTE RLSFailSts_raw;
    double PosnLightReq; /// Min: 0 Max: 1 Units: 
    BYTE PosnLightReq_raw;
    double ParkLampSts; /// Min: 0 Max: 1 Units: 
    BYTE ParkLampSts_raw;
} TX_BCM1_HS_CAN;

#define TX_BCM1_HS_CAN_SendType 0
#define TX_BCM1_HS_CAN_SendRate 50
#define TX_BCM1_HS_CAN_SendRateFast 0
#define TX_BCM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_BCM1_HS_CAN_$_PosLmpOutputSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_PosLmpOutputSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_PosLmpOutputSts_SendType 0
#define TX_BCM1_HS_CAN_$_IPBackgroundLightCmd_$$__Backlight_OFF_ 0
#define TX_BCM1_HS_CAN_$_IPBackgroundLightCmd_$$__Backlight_ON_ 1
#define TX_BCM1_HS_CAN_$_IPBackgroundLightCmd_SendType 0
#define TX_BCM1_HS_CAN_$_FrontFogLmpSts_$$__Off__ 0
#define TX_BCM1_HS_CAN_$_FrontFogLmpSts_$$__On__ 1
#define TX_BCM1_HS_CAN_$_FrontFogLmpSts_$$__Reserved_ 2
#define TX_BCM1_HS_CAN_$_FrontFogLmpSts_$$__Not_available_ 3
#define TX_BCM1_HS_CAN_$_FrontFogLmpSts_SendType 0
#define TX_BCM1_HS_CAN_$_RearFogLmpSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_RearFogLmpSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_RearFogLmpSts_SendType 0
#define TX_BCM1_HS_CAN_$_HighBeamSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_HighBeamSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_HighBeamSts_SendType 0
#define TX_BCM1_HS_CAN_$_LowBeamSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_LowBeamSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_LowBeamSts_SendType 0
#define TX_BCM1_HS_CAN_$_LeftTurnLampSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_LeftTurnLampSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_LeftTurnLampSts_SendType 0
#define TX_BCM1_HS_CAN_$_RightTurnLampSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_RightTurnLampSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_RightTurnLampSts_SendType 0
#define TX_BCM1_HS_CAN_$_BrakeLmpFailSts_$$__No_failure_ 0
#define TX_BCM1_HS_CAN_$_BrakeLmpFailSts_$$__Failure_ 1
#define TX_BCM1_HS_CAN_$_BrakeLmpFailSts_SendType 0
#define TX_BCM1_HS_CAN_$_TrunkSts_$$__Closed_ 0
#define TX_BCM1_HS_CAN_$_TrunkSts_$$__Open_ 1
#define TX_BCM1_HS_CAN_$_TrunkSts_SendType 0
#define TX_BCM1_HS_CAN_$_DriverDoorSts_$$__Closed_ 0
#define TX_BCM1_HS_CAN_$_DriverDoorSts_$$__Open_ 1
#define TX_BCM1_HS_CAN_$_DriverDoorSts_SendType 0
#define TX_BCM1_HS_CAN_$_RLDoorSts_$$__Closed_ 0
#define TX_BCM1_HS_CAN_$_RLDoorSts_$$__Open_ 1
#define TX_BCM1_HS_CAN_$_RLDoorSts_SendType 0
#define TX_BCM1_HS_CAN_$_PassengerDoorSts_$$__Closed_ 0
#define TX_BCM1_HS_CAN_$_PassengerDoorSts_$$__Open_ 1
#define TX_BCM1_HS_CAN_$_PassengerDoorSts_SendType 0
#define TX_BCM1_HS_CAN_$_RRDoorSts_$$__Closed_ 0
#define TX_BCM1_HS_CAN_$_RRDoorSts_$$__Open_ 1
#define TX_BCM1_HS_CAN_$_RRDoorSts_SendType 0
#define TX_BCM1_HS_CAN_$_WindShieldWiperActSts_$$__No_active_ 0
#define TX_BCM1_HS_CAN_$_WindShieldWiperActSts_$$__Active_ 1
#define TX_BCM1_HS_CAN_$_WindShieldWiperActSts_SendType 0
#define TX_BCM1_HS_CAN_$_BrakePedSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_BrakePedSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_BrakePedSts_SendType 0
#define TX_BCM1_HS_CAN_$_BrakePedFailSts_$$__No_failure_ 0
#define TX_BCM1_HS_CAN_$_BrakePedFailSts_$$__Failure_ 1
#define TX_BCM1_HS_CAN_$_BrakePedFailSts_SendType 0
#define TX_BCM1_HS_CAN_$_BackgroundLightLvl_$$__Valid_Value_ 0
#define TX_BCM1_HS_CAN_$_BackgroundLightLvl_SendType 0
#define TX_BCM1_HS_CAN_$_RearFogLmpFailSts_$$__No_failure_ 0
#define TX_BCM1_HS_CAN_$_RearFogLmpFailSts_$$__Failure_ 1
#define TX_BCM1_HS_CAN_$_RearFogLmpFailSts_SendType 0
#define TX_BCM1_HS_CAN_$_DDDWarning_$$__No_warning_ 0
#define TX_BCM1_HS_CAN_$_DDDWarning_$$__Warning_1_ 1
#define TX_BCM1_HS_CAN_$_DDDWarning_$$__Warning_2_ 2
#define TX_BCM1_HS_CAN_$_DDDWarning_$$__Not_available_ 3
#define TX_BCM1_HS_CAN_$_DDDWarning_SendType 0
#define TX_BCM1_HS_CAN_$_HoodSts_$$__Closed_ 0
#define TX_BCM1_HS_CAN_$_HoodSts_$$__Open_ 1
#define TX_BCM1_HS_CAN_$_HoodSts_SendType 0
#define TX_BCM1_HS_CAN_$_LeftTurnSWSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_LeftTurnSWSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_LeftTurnSWSts_SendType 0
#define TX_BCM1_HS_CAN_$_RightTurnSWSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_RightTurnSWSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_RightTurnSWSts_SendType 0
#define TX_BCM1_HS_CAN_$_RLSFailSts_$$__No_failure_ 0
#define TX_BCM1_HS_CAN_$_RLSFailSts_$$__Failure_ 1
#define TX_BCM1_HS_CAN_$_RLSFailSts_SendType 0
#define TX_BCM1_HS_CAN_$_PosnLightReq_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_PosnLightReq_$$__On_ 1
#define TX_BCM1_HS_CAN_$_PosnLightReq_SendType 0
#define TX_BCM1_HS_CAN_$_ParkLampSts_$$__Off_ 0
#define TX_BCM1_HS_CAN_$_ParkLampSts_$$__On_ 1
#define TX_BCM1_HS_CAN_$_ParkLampSts_SendType 0
#pragma warning(default : 4005)

void TX_BCM1_HS_CAN_Init(TX_BCM1_HS_CAN * pMsg);
int TX_BCM1_HS_CAN_Transmit(TX_BCM1_HS_CAN * pMsg);
int TX_BCM1_HS_CAN_Transmit_raw(TX_BCM1_HS_CAN * pMsg);
int TX_BCM1_HS_CAN_UpdateBytesFromSignals(TX_BCM1_HS_CAN * pMsg);
int TX_BCM1_HS_CAN_UpdateBytesFromRawSignals(TX_BCM1_HS_CAN * pMsg);
#define TX_BCM1_HS_CAN_PosLmpOutputSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_PosLmpOutputSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 0, dval)
#define TX_BCM1_HS_CAN_SetSignal_PosLmpOutputSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 0, nval)
#define TX_BCM1_HS_CAN_IPBackgroundLightCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_IPBackgroundLightCmd_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 1, dval)
#define TX_BCM1_HS_CAN_SetSignal_IPBackgroundLightCmd_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 1, nval)
#define TX_BCM1_HS_CAN_FrontFogLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_FrontFogLmpSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 2, dval)
#define TX_BCM1_HS_CAN_SetSignal_FrontFogLmpSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 2, nval)
#define TX_BCM1_HS_CAN_RearFogLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_RearFogLmpSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 3, dval)
#define TX_BCM1_HS_CAN_SetSignal_RearFogLmpSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 3, nval)
#define TX_BCM1_HS_CAN_HighBeamSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_HighBeamSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 4, dval)
#define TX_BCM1_HS_CAN_SetSignal_HighBeamSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 4, nval)
#define TX_BCM1_HS_CAN_LowBeamSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_LowBeamSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 5, dval)
#define TX_BCM1_HS_CAN_SetSignal_LowBeamSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 5, nval)
#define TX_BCM1_HS_CAN_LeftTurnLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_LeftTurnLampSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 6, dval)
#define TX_BCM1_HS_CAN_SetSignal_LeftTurnLampSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 6, nval)
#define TX_BCM1_HS_CAN_RightTurnLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_RightTurnLampSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 7, dval)
#define TX_BCM1_HS_CAN_SetSignal_RightTurnLampSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 7, nval)
#define TX_BCM1_HS_CAN_BrakeLmpFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 8, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_BrakeLmpFailSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 8, dval)
#define TX_BCM1_HS_CAN_SetSignal_BrakeLmpFailSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 8, nval)
#define TX_BCM1_HS_CAN_TrunkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 9, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_TrunkSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 9, dval)
#define TX_BCM1_HS_CAN_SetSignal_TrunkSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 9, nval)
#define TX_BCM1_HS_CAN_DriverDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 10, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_DriverDoorSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 10, dval)
#define TX_BCM1_HS_CAN_SetSignal_DriverDoorSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 10, nval)
#define TX_BCM1_HS_CAN_RLDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 11, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_RLDoorSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 11, dval)
#define TX_BCM1_HS_CAN_SetSignal_RLDoorSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 11, nval)
#define TX_BCM1_HS_CAN_PassengerDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 12, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_PassengerDoorSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 12, dval)
#define TX_BCM1_HS_CAN_SetSignal_PassengerDoorSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 12, nval)
#define TX_BCM1_HS_CAN_RRDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 13, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_RRDoorSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 13, dval)
#define TX_BCM1_HS_CAN_SetSignal_RRDoorSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 13, nval)
#define TX_BCM1_HS_CAN_WindShieldWiperActSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 14, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_WindShieldWiperActSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 14, dval)
#define TX_BCM1_HS_CAN_SetSignal_WindShieldWiperActSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 14, nval)
#define TX_BCM1_HS_CAN_BrakePedSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 15, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_BrakePedSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 15, dval)
#define TX_BCM1_HS_CAN_SetSignal_BrakePedSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 15, nval)
#define TX_BCM1_HS_CAN_BrakePedFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 16, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_BrakePedFailSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 16, dval)
#define TX_BCM1_HS_CAN_SetSignal_BrakePedFailSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 16, nval)
#define TX_BCM1_HS_CAN_BackgroundLightLvl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 17, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_BackgroundLightLvl_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 17, dval)
#define TX_BCM1_HS_CAN_SetSignal_BackgroundLightLvl_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 17, nval)
#define TX_BCM1_HS_CAN_RearFogLmpFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 18, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_RearFogLmpFailSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 18, dval)
#define TX_BCM1_HS_CAN_SetSignal_RearFogLmpFailSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 18, nval)
#define TX_BCM1_HS_CAN_DDDWarning_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 19, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_DDDWarning_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 19, dval)
#define TX_BCM1_HS_CAN_SetSignal_DDDWarning_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 19, nval)
#define TX_BCM1_HS_CAN_HoodSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 20, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_HoodSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 20, dval)
#define TX_BCM1_HS_CAN_SetSignal_HoodSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 20, nval)
#define TX_BCM1_HS_CAN_LeftTurnSWSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 21, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_LeftTurnSWSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 21, dval)
#define TX_BCM1_HS_CAN_SetSignal_LeftTurnSWSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 21, nval)
#define TX_BCM1_HS_CAN_RightTurnSWSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 22, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_RightTurnSWSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 22, dval)
#define TX_BCM1_HS_CAN_SetSignal_RightTurnSWSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 22, nval)
#define TX_BCM1_HS_CAN_RLSFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 23, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_RLSFailSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 23, dval)
#define TX_BCM1_HS_CAN_SetSignal_RLSFailSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 23, nval)
#define TX_BCM1_HS_CAN_PosnLightReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 24, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_PosnLightReq_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 24, dval)
#define TX_BCM1_HS_CAN_SetSignal_PosnLightReq_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 24, nval)
#define TX_BCM1_HS_CAN_ParkLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM1_HS_CAN_Index, 25, dPhysicalValue);
#define TX_BCM1_HS_CAN_SetSignal_ParkLampSts_Physical(dval) SpySetTxSignal(TX_BCM1_HS_CAN_Index, 25, dval)
#define TX_BCM1_HS_CAN_SetSignal_ParkLampSts_Raw(nval) SpySetTxSignalRaw(TX_BCM1_HS_CAN_Index, 25, nval)
int TX_BCM1_HS_CAN_TransmitFast();
#define TX_BCM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_BCM1_HS_CAN_Index, 0)
#define TX_BCM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_BCM1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_BCM8_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RemoteModeSts; /// Min: 0 Max: 1 Units: 
    BYTE RemoteModeSts_raw;
    double PASWorkCmd; /// Min: 0 Max: 1 Units: 
    BYTE PASWorkCmd_raw;
    double WiperSwitchSts; /// Min: 0 Max: 7 Units: 
    BYTE WiperSwitchSts_raw;
    double WiprReq; /// Min: 0 Max: 7 Units: 
    BYTE WiprReq_raw;
    double ECO_4L_Warn; /// Min: 0 Max: 7 Units: 
    BYTE ECO_4L_Warn_raw;
    double RSDS_Left_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Left_LED_status_raw;
    double RSDS_Right_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Right_LED_status_raw;
    double Fold_UnfoldSts; /// Min: 0 Max: 1 Units: 
    BYTE Fold_UnfoldSts_raw;
} TX_BCM8_HS_CAN;

#define TX_BCM8_HS_CAN_SendType 0
#define TX_BCM8_HS_CAN_SendRate 100
#define TX_BCM8_HS_CAN_SendRateFast 0
#define TX_BCM8_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_BCM8_HS_CAN_$_RemoteModeSts_$$__Normal_mode_ 0
#define TX_BCM8_HS_CAN_$_RemoteModeSts_$$__Remote_mode_ 1
#define TX_BCM8_HS_CAN_$_RemoteModeSts_SendType 0
#define TX_BCM8_HS_CAN_$_PASWorkCmd_$$__OFF_ 0
#define TX_BCM8_HS_CAN_$_PASWorkCmd_$$__ON_ 1
#define TX_BCM8_HS_CAN_$_PASWorkCmd_SendType 0
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wiper_Off_ 0
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wiper_Auto_ 1
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_$$__Low_Speed_ 2
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_$$__High_Speed_ 3
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wiper_Wash_ 4
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wash_in_Auto_Mode_ 5
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_$$__reserved_ 7
#define TX_BCM8_HS_CAN_$_WiperSwitchSts_SendType 0
#define TX_BCM8_HS_CAN_$_WiprReq_$$__Wiper_Off_ 0
#define TX_BCM8_HS_CAN_$_WiprReq_$$__Wiper_action_once_ 1
#define TX_BCM8_HS_CAN_$_WiprReq_$$__Speed1__Lo__ 2
#define TX_BCM8_HS_CAN_$_WiprReq_$$__Speed2__Hi__ 3
#define TX_BCM8_HS_CAN_$_WiprReq_$$__Reserved_ 4
#define TX_BCM8_HS_CAN_$_WiprReq_$$__Invalid_ 7
#define TX_BCM8_HS_CAN_$_WiprReq_SendType 0
#define TX_BCM8_HS_CAN_$_ECO_4L_Warn_$$__No_Warn_ 0
#define TX_BCM8_HS_CAN_$_ECO_4L_Warn_$$__Warn_ 1
#define TX_BCM8_HS_CAN_$_ECO_4L_Warn_$$__Reserved_ 2
#define TX_BCM8_HS_CAN_$_ECO_4L_Warn_SendType 0
#define TX_BCM8_HS_CAN_$_RSDS_Left_LED_status_$$__No_Error_ 0
#define TX_BCM8_HS_CAN_$_RSDS_Left_LED_status_$$__Error_ 1
#define TX_BCM8_HS_CAN_$_RSDS_Left_LED_status_SendType 0
#define TX_BCM8_HS_CAN_$_RSDS_Right_LED_status_$$__No_Error_ 0
#define TX_BCM8_HS_CAN_$_RSDS_Right_LED_status_$$__Error_ 1
#define TX_BCM8_HS_CAN_$_RSDS_Right_LED_status_SendType 0
#define TX_BCM8_HS_CAN_$_Fold_UnfoldSts_$$__Unfold_ 0
#define TX_BCM8_HS_CAN_$_Fold_UnfoldSts_$$__Fold_ 1
#define TX_BCM8_HS_CAN_$_Fold_UnfoldSts_SendType 0
#pragma warning(default : 4005)

void TX_BCM8_HS_CAN_Init(TX_BCM8_HS_CAN * pMsg);
int TX_BCM8_HS_CAN_Transmit(TX_BCM8_HS_CAN * pMsg);
int TX_BCM8_HS_CAN_Transmit_raw(TX_BCM8_HS_CAN * pMsg);
int TX_BCM8_HS_CAN_UpdateBytesFromSignals(TX_BCM8_HS_CAN * pMsg);
int TX_BCM8_HS_CAN_UpdateBytesFromRawSignals(TX_BCM8_HS_CAN * pMsg);
#define TX_BCM8_HS_CAN_RemoteModeSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 0, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_RemoteModeSts_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 0, dval)
#define TX_BCM8_HS_CAN_SetSignal_RemoteModeSts_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 0, nval)
#define TX_BCM8_HS_CAN_PASWorkCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 1, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_PASWorkCmd_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 1, dval)
#define TX_BCM8_HS_CAN_SetSignal_PASWorkCmd_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 1, nval)
#define TX_BCM8_HS_CAN_WiperSwitchSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 2, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_WiperSwitchSts_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 2, dval)
#define TX_BCM8_HS_CAN_SetSignal_WiperSwitchSts_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 2, nval)
#define TX_BCM8_HS_CAN_WiprReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 3, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_WiprReq_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 3, dval)
#define TX_BCM8_HS_CAN_SetSignal_WiprReq_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 3, nval)
#define TX_BCM8_HS_CAN_ECO_4L_Warn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 4, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_ECO_4L_Warn_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 4, dval)
#define TX_BCM8_HS_CAN_SetSignal_ECO_4L_Warn_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 4, nval)
#define TX_BCM8_HS_CAN_RSDS_Left_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 5, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_RSDS_Left_LED_status_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 5, dval)
#define TX_BCM8_HS_CAN_SetSignal_RSDS_Left_LED_status_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 5, nval)
#define TX_BCM8_HS_CAN_RSDS_Right_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 6, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_RSDS_Right_LED_status_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 6, dval)
#define TX_BCM8_HS_CAN_SetSignal_RSDS_Right_LED_status_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 6, nval)
#define TX_BCM8_HS_CAN_Fold_UnfoldSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_BCM8_HS_CAN_Index, 7, dPhysicalValue);
#define TX_BCM8_HS_CAN_SetSignal_Fold_UnfoldSts_Physical(dval) SpySetTxSignal(TX_BCM8_HS_CAN_Index, 7, dval)
#define TX_BCM8_HS_CAN_SetSignal_Fold_UnfoldSts_Raw(nval) SpySetTxSignalRaw(TX_BCM8_HS_CAN_Index, 7, nval)
int TX_BCM8_HS_CAN_TransmitFast();
#define TX_BCM8_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_BCM8_HS_CAN_Index, 0)
#define TX_BCM8_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_BCM8_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_DCT5_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_DCT5; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_DCT5_raw;
    double CurrentGearValid; /// Min: 0 Max: 1 Units: 
    BYTE CurrentGearValid_raw;
    double SHIFT_IN_PROGRESS; /// Min: 0 Max: 1 Units: 
    BYTE SHIFT_IN_PROGRESS_raw;
    double TargetGearValid; /// Min: 0 Max: 1 Units: 
    BYTE TargetGearValid_raw;
    double ShiftInPrgValid; /// Min: 0 Max: 1 Units: 
    BYTE ShiftInPrgValid_raw;
    double TARGET_GEAR; /// Min: 0 Max: 15 Units: 
    BYTE TARGET_GEAR_raw;
    double CURRENT_GEAR; /// Min: 0 Max: 15 Units: 
    BYTE CURRENT_GEAR_raw;
    double TGS_LEVER; /// Min: 0 Max: 15 Units: 
    BYTE TGS_LEVER_raw;
    double TCU_APS_Available; /// Min: 0 Max: 1 Units: 
    BYTE TCU_APS_Available_raw;
    double RollingCounter_DCT5; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_DCT5_raw;
} TX_DCT5_HS_CAN;

#define TX_DCT5_HS_CAN_SendType 0
#define TX_DCT5_HS_CAN_SendRate 20
#define TX_DCT5_HS_CAN_SendRateFast 0
#define TX_DCT5_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_DCT5_HS_CAN_$_CheckSum_DCT5_$$__Valid_values_ 0
#define TX_DCT5_HS_CAN_$_CheckSum_DCT5_SendType 0
#define TX_DCT5_HS_CAN_$_CurrentGearValid_$$__Invalid__ 0
#define TX_DCT5_HS_CAN_$_CurrentGearValid_$$__Valid_ 1
#define TX_DCT5_HS_CAN_$_CurrentGearValid_SendType 0
#define TX_DCT5_HS_CAN_$_SHIFT_IN_PROGRESS_$$__Gear_Shift_NOT_in_progress__ 0
#define TX_DCT5_HS_CAN_$_SHIFT_IN_PROGRESS_$$__Gear_Shif_is_in_progress_ 1
#define TX_DCT5_HS_CAN_$_SHIFT_IN_PROGRESS_SendType 0
#define TX_DCT5_HS_CAN_$_TargetGearValid_$$__Invalid__ 0
#define TX_DCT5_HS_CAN_$_TargetGearValid_$$__Valid_ 1
#define TX_DCT5_HS_CAN_$_TargetGearValid_SendType 0
#define TX_DCT5_HS_CAN_$_ShiftInPrgValid_$$__Invalid__ 0
#define TX_DCT5_HS_CAN_$_ShiftInPrgValid_$$__Valid_ 1
#define TX_DCT5_HS_CAN_$_ShiftInPrgValid_SendType 0
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__N__or__P___ 0
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__1__ 1
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__2__ 2
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__3__ 3
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__4__ 4
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__5__ 5
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__6__ 6
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__7__ 7
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__R__ 8
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_$$__Reserved_ 9
#define TX_DCT5_HS_CAN_$_TARGET_GEAR_SendType 0
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__N__or__P__ 0
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__1__ 1
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__2__ 2
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__3__ 3
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__4__ 4
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__5__ 5
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__6__ 6
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__7__ 7
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__R__ 8
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Reserved_ 9
#define TX_DCT5_HS_CAN_$_CURRENT_GEAR_SendType 0
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__P__ 0
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 1
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 2
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 3
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 4
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__D__ 5
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__N__ 6
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__R__ 7
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__M__ 8
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 9
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Intermediate_position_ 14
#define TX_DCT5_HS_CAN_$_TGS_LEVER_$$__Invalid__ 15
#define TX_DCT5_HS_CAN_$_TGS_LEVER_SendType 0
#define TX_DCT5_HS_CAN_$_TCU_APS_Available_$$__Available_ 0
#define TX_DCT5_HS_CAN_$_TCU_APS_Available_$$__Not_Available_ 1
#define TX_DCT5_HS_CAN_$_TCU_APS_Available_SendType 0
#define TX_DCT5_HS_CAN_$_RollingCounter_DCT5_$$__Valid_values_ 0
#define TX_DCT5_HS_CAN_$_RollingCounter_DCT5_SendType 0
#pragma warning(default : 4005)

void TX_DCT5_HS_CAN_Init(TX_DCT5_HS_CAN * pMsg);
int TX_DCT5_HS_CAN_Transmit(TX_DCT5_HS_CAN * pMsg);
int TX_DCT5_HS_CAN_Transmit_raw(TX_DCT5_HS_CAN * pMsg);
int TX_DCT5_HS_CAN_UpdateBytesFromSignals(TX_DCT5_HS_CAN * pMsg);
int TX_DCT5_HS_CAN_UpdateBytesFromRawSignals(TX_DCT5_HS_CAN * pMsg);
#define TX_DCT5_HS_CAN_CheckSum_DCT5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 0, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_CheckSum_DCT5_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 0, dval)
#define TX_DCT5_HS_CAN_SetSignal_CheckSum_DCT5_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 0, nval)
#define TX_DCT5_HS_CAN_CurrentGearValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 1, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_CurrentGearValid_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 1, dval)
#define TX_DCT5_HS_CAN_SetSignal_CurrentGearValid_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 1, nval)
#define TX_DCT5_HS_CAN_SHIFT_IN_PROGRESS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 2, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_SHIFT_IN_PROGRESS_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 2, dval)
#define TX_DCT5_HS_CAN_SetSignal_SHIFT_IN_PROGRESS_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 2, nval)
#define TX_DCT5_HS_CAN_TargetGearValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 3, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_TargetGearValid_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 3, dval)
#define TX_DCT5_HS_CAN_SetSignal_TargetGearValid_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 3, nval)
#define TX_DCT5_HS_CAN_ShiftInPrgValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 4, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_ShiftInPrgValid_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 4, dval)
#define TX_DCT5_HS_CAN_SetSignal_ShiftInPrgValid_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 4, nval)
#define TX_DCT5_HS_CAN_TARGET_GEAR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 5, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_TARGET_GEAR_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 5, dval)
#define TX_DCT5_HS_CAN_SetSignal_TARGET_GEAR_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 5, nval)
#define TX_DCT5_HS_CAN_CURRENT_GEAR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 6, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_CURRENT_GEAR_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 6, dval)
#define TX_DCT5_HS_CAN_SetSignal_CURRENT_GEAR_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 6, nval)
#define TX_DCT5_HS_CAN_TGS_LEVER_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 7, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_TGS_LEVER_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 7, dval)
#define TX_DCT5_HS_CAN_SetSignal_TGS_LEVER_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 7, nval)
#define TX_DCT5_HS_CAN_TCU_APS_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 8, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_TCU_APS_Available_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 8, dval)
#define TX_DCT5_HS_CAN_SetSignal_TCU_APS_Available_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 8, nval)
#define TX_DCT5_HS_CAN_RollingCounter_DCT5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DCT5_HS_CAN_Index, 9, dPhysicalValue);
#define TX_DCT5_HS_CAN_SetSignal_RollingCounter_DCT5_Physical(dval) SpySetTxSignal(TX_DCT5_HS_CAN_Index, 9, dval)
#define TX_DCT5_HS_CAN_SetSignal_RollingCounter_DCT5_Raw(nval) SpySetTxSignalRaw(TX_DCT5_HS_CAN_Index, 9, nval)
int TX_DCT5_HS_CAN_TransmitFast();
#define TX_DCT5_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_DCT5_HS_CAN_Index, 0)
#define TX_DCT5_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_DCT5_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_DDCM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RSDS_Left_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Left_LED_status_raw;
} TX_DDCM1_HS_CAN;

#define TX_DDCM1_HS_CAN_SendType 0
#define TX_DDCM1_HS_CAN_SendRate 100
#define TX_DDCM1_HS_CAN_SendRateFast 0
#define TX_DDCM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_DDCM1_HS_CAN_$_RSDS_Left_LED_status_$$__no_error_ 0
#define TX_DDCM1_HS_CAN_$_RSDS_Left_LED_status_$$__error_ 1
#define TX_DDCM1_HS_CAN_$_RSDS_Left_LED_status_SendType 0
#pragma warning(default : 4005)

void TX_DDCM1_HS_CAN_Init(TX_DDCM1_HS_CAN * pMsg);
int TX_DDCM1_HS_CAN_Transmit(TX_DDCM1_HS_CAN * pMsg);
int TX_DDCM1_HS_CAN_Transmit_raw(TX_DDCM1_HS_CAN * pMsg);
int TX_DDCM1_HS_CAN_UpdateBytesFromSignals(TX_DDCM1_HS_CAN * pMsg);
int TX_DDCM1_HS_CAN_UpdateBytesFromRawSignals(TX_DDCM1_HS_CAN * pMsg);
#define TX_DDCM1_HS_CAN_RSDS_Left_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_DDCM1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_DDCM1_HS_CAN_SetSignal_RSDS_Left_LED_status_Physical(dval) SpySetTxSignal(TX_DDCM1_HS_CAN_Index, 0, dval)
#define TX_DDCM1_HS_CAN_SetSignal_RSDS_Left_LED_status_Raw(nval) SpySetTxSignalRaw(TX_DDCM1_HS_CAN_Index, 0, nval)
int TX_DDCM1_HS_CAN_TransmitFast();
#define TX_DDCM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_DDCM1_HS_CAN_Index, 0)
#define TX_DDCM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_DDCM1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ECM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double EMS_AuthenResult; /// Min: 0 Max: 3 Units: 
    BYTE EMS_AuthenResult_raw;
    double BrakePedalStatus_G; /// Min: 0 Max: 3 Units: 
    BYTE BrakePedalStatus_G_raw;
    double Start_Stop_Sts_G; /// Min: 0 Max: 7 Units: 
    BYTE Start_Stop_Sts_G_raw;
    double EngSpd; /// Min: 0 Max: 8191.875 Units: rpm
    WORD EngSpd_raw;
    double EngSpdValidity; /// Min: 0 Max: 2 Units: 
    BYTE EngSpdValidity_raw;
    double Checksum_ECM1; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_ECM1_raw;
    double RollingCounter_ECM1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ECM1_raw;
} TX_ECM1_HS_CAN;

#define TX_ECM1_HS_CAN_SendType 0
#define TX_ECM1_HS_CAN_SendRate 10
#define TX_ECM1_HS_CAN_SendRateFast 0
#define TX_ECM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Nothing___ 0
#define TX_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Authentication_authentication_failure_ 1
#define TX_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Authentication_success___ 2
#define TX_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Reserved_ 3
#define TX_ECM1_HS_CAN_$_EMS_AuthenResult_SendType 0
#define TX_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Not_pressed_ 0
#define TX_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Pressed_ 1
#define TX_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Reserved_ 2
#define TX_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Error_ 3
#define TX_ECM1_HS_CAN_$_BrakePedalStatus_G_SendType 0
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__non_start_stop_mode___ 0
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_standby___ 1
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_Stopped_ 2
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Starter_restart______ 3
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_restart____ 4
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_Operation_ 5
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_auto_stopping___ 6
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Invalid_ 7
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Reserved_ 8
#define TX_ECM1_HS_CAN_$_Start_Stop_Sts_G_SendType 0
#define TX_ECM1_HS_CAN_$_EngSpd_$$__Valid_ 0
#define TX_ECM1_HS_CAN_$_EngSpd_SendType 0
#define TX_ECM1_HS_CAN_$_EngSpdValidity_$$__Invalid_ 0
#define TX_ECM1_HS_CAN_$_EngSpdValidity_$$__Valid_ 1
#define TX_ECM1_HS_CAN_$_EngSpdValidity_$$__Init_value_ 2
#define TX_ECM1_HS_CAN_$_EngSpdValidity_$$__Reserved_ 3
#define TX_ECM1_HS_CAN_$_EngSpdValidity_SendType 0
#define TX_ECM1_HS_CAN_$_Checksum_ECM1_$$__Valid_ 0
#define TX_ECM1_HS_CAN_$_Checksum_ECM1_SendType 0
#define TX_ECM1_HS_CAN_$_RollingCounter_ECM1_$$__Valid_ 0
#define TX_ECM1_HS_CAN_$_RollingCounter_ECM1_SendType 0
#pragma warning(default : 4005)

void TX_ECM1_HS_CAN_Init(TX_ECM1_HS_CAN * pMsg);
int TX_ECM1_HS_CAN_Transmit(TX_ECM1_HS_CAN * pMsg);
int TX_ECM1_HS_CAN_Transmit_raw(TX_ECM1_HS_CAN * pMsg);
int TX_ECM1_HS_CAN_UpdateBytesFromSignals(TX_ECM1_HS_CAN * pMsg);
int TX_ECM1_HS_CAN_UpdateBytesFromRawSignals(TX_ECM1_HS_CAN * pMsg);
#define TX_ECM1_HS_CAN_EMS_AuthenResult_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ECM1_HS_CAN_SetSignal_EMS_AuthenResult_Physical(dval) SpySetTxSignal(TX_ECM1_HS_CAN_Index, 0, dval)
#define TX_ECM1_HS_CAN_SetSignal_EMS_AuthenResult_Raw(nval) SpySetTxSignalRaw(TX_ECM1_HS_CAN_Index, 0, nval)
#define TX_ECM1_HS_CAN_BrakePedalStatus_G_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ECM1_HS_CAN_SetSignal_BrakePedalStatus_G_Physical(dval) SpySetTxSignal(TX_ECM1_HS_CAN_Index, 1, dval)
#define TX_ECM1_HS_CAN_SetSignal_BrakePedalStatus_G_Raw(nval) SpySetTxSignalRaw(TX_ECM1_HS_CAN_Index, 1, nval)
#define TX_ECM1_HS_CAN_Start_Stop_Sts_G_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ECM1_HS_CAN_SetSignal_Start_Stop_Sts_G_Physical(dval) SpySetTxSignal(TX_ECM1_HS_CAN_Index, 2, dval)
#define TX_ECM1_HS_CAN_SetSignal_Start_Stop_Sts_G_Raw(nval) SpySetTxSignalRaw(TX_ECM1_HS_CAN_Index, 2, nval)
#define TX_ECM1_HS_CAN_EngSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ECM1_HS_CAN_SetSignal_EngSpd_Physical(dval) SpySetTxSignal(TX_ECM1_HS_CAN_Index, 3, dval)
#define TX_ECM1_HS_CAN_SetSignal_EngSpd_Raw(nval) SpySetTxSignalRaw(TX_ECM1_HS_CAN_Index, 3, nval)
#define TX_ECM1_HS_CAN_EngSpdValidity_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ECM1_HS_CAN_SetSignal_EngSpdValidity_Physical(dval) SpySetTxSignal(TX_ECM1_HS_CAN_Index, 4, dval)
#define TX_ECM1_HS_CAN_SetSignal_EngSpdValidity_Raw(nval) SpySetTxSignalRaw(TX_ECM1_HS_CAN_Index, 4, nval)
#define TX_ECM1_HS_CAN_Checksum_ECM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ECM1_HS_CAN_SetSignal_Checksum_ECM1_Physical(dval) SpySetTxSignal(TX_ECM1_HS_CAN_Index, 5, dval)
#define TX_ECM1_HS_CAN_SetSignal_Checksum_ECM1_Raw(nval) SpySetTxSignalRaw(TX_ECM1_HS_CAN_Index, 5, nval)
#define TX_ECM1_HS_CAN_RollingCounter_ECM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ECM1_HS_CAN_SetSignal_RollingCounter_ECM1_Physical(dval) SpySetTxSignal(TX_ECM1_HS_CAN_Index, 6, dval)
#define TX_ECM1_HS_CAN_SetSignal_RollingCounter_ECM1_Raw(nval) SpySetTxSignalRaw(TX_ECM1_HS_CAN_Index, 6, nval)
int TX_ECM1_HS_CAN_TransmitFast();
#define TX_ECM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ECM1_HS_CAN_Index, 0)
#define TX_ECM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ECM1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ECM2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FuelConsumption; /// Min: 0 Max: 131070 Units: �l
    WORD FuelConsumption_raw;
    double AccPedalPos; /// Min: 0 Max: 100.3935 Units: %
    BYTE AccPedalPos_raw;
    double TgtCruiseVehSpd; /// Min: 0 Max: 255 Units: km/h
    BYTE TgtCruiseVehSpd_raw;
    double CruiseCtrlSts; /// Min: 0 Max: 2 Units: 
    BYTE CruiseCtrlSts_raw;
    double MILSts; /// Min: 0 Max: 1 Units: 
    BYTE MILSts_raw;
    double EngState; /// Min: 0 Max: 3 Units: 
    BYTE EngState_raw;
    double AccPedPosValidity; /// Min: 0 Max: 2 Units: 
    BYTE AccPedPosValidity_raw;
    double EngineSVSSignal; /// Min: 0 Max: 1 Units: 
    BYTE EngineSVSSignal_raw;
} TX_ECM2_HS_CAN;

#define TX_ECM2_HS_CAN_SendType 0
#define TX_ECM2_HS_CAN_SendRate 20
#define TX_ECM2_HS_CAN_SendRateFast 0
#define TX_ECM2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ECM2_HS_CAN_$_FuelConsumption_$$__Valid_ 0
#define TX_ECM2_HS_CAN_$_FuelConsumption_SendType 0
#define TX_ECM2_HS_CAN_$_AccPedalPos_$$__Valid_ 0
#define TX_ECM2_HS_CAN_$_AccPedalPos_SendType 0
#define TX_ECM2_HS_CAN_$_TgtCruiseVehSpd_$$__Valid_ 0
#define TX_ECM2_HS_CAN_$_TgtCruiseVehSpd_SendType 0
#define TX_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Inactive___ 0
#define TX_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Active__ 1
#define TX_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Standby_ 2
#define TX_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Reserved_ 3
#define TX_ECM2_HS_CAN_$_CruiseCtrlSts_SendType 0
#define TX_ECM2_HS_CAN_$_MILSts_$$__Off_ 0
#define TX_ECM2_HS_CAN_$_MILSts_$$__On_ 1
#define TX_ECM2_HS_CAN_$_MILSts_SendType 0
#define TX_ECM2_HS_CAN_$_EngState_$$__Stopped_ 0
#define TX_ECM2_HS_CAN_$_EngState_$$__Cranking_ 1
#define TX_ECM2_HS_CAN_$_EngState_$$__Running_ 2
#define TX_ECM2_HS_CAN_$_EngState_$$__DFCO__ 3
#define TX_ECM2_HS_CAN_$_EngState_$$__Stalling___ 3
#define TX_ECM2_HS_CAN_$_EngState_SendType 0
#define TX_ECM2_HS_CAN_$_AccPedPosValidity_$$__Invalid_ 0
#define TX_ECM2_HS_CAN_$_AccPedPosValidity_$$__Valid_ 1
#define TX_ECM2_HS_CAN_$_AccPedPosValidity_$$__Init_value_ 2
#define TX_ECM2_HS_CAN_$_AccPedPosValidity_$$__Reserved_only_used_by___ 3
#define TX_ECM2_HS_CAN_$_AccPedPosValidity_SendType 0
#define TX_ECM2_HS_CAN_$_EngineSVSSignal_$$__SVS_off_ 0
#define TX_ECM2_HS_CAN_$_EngineSVSSignal_$$__SVS_on_ 1
#define TX_ECM2_HS_CAN_$_EngineSVSSignal_SendType 0
#pragma warning(default : 4005)

void TX_ECM2_HS_CAN_Init(TX_ECM2_HS_CAN * pMsg);
int TX_ECM2_HS_CAN_Transmit(TX_ECM2_HS_CAN * pMsg);
int TX_ECM2_HS_CAN_Transmit_raw(TX_ECM2_HS_CAN * pMsg);
int TX_ECM2_HS_CAN_UpdateBytesFromSignals(TX_ECM2_HS_CAN * pMsg);
int TX_ECM2_HS_CAN_UpdateBytesFromRawSignals(TX_ECM2_HS_CAN * pMsg);
#define TX_ECM2_HS_CAN_FuelConsumption_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_FuelConsumption_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 0, dval)
#define TX_ECM2_HS_CAN_SetSignal_FuelConsumption_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 0, nval)
#define TX_ECM2_HS_CAN_AccPedalPos_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_AccPedalPos_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 1, dval)
#define TX_ECM2_HS_CAN_SetSignal_AccPedalPos_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 1, nval)
#define TX_ECM2_HS_CAN_TgtCruiseVehSpd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_TgtCruiseVehSpd_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 2, dval)
#define TX_ECM2_HS_CAN_SetSignal_TgtCruiseVehSpd_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 2, nval)
#define TX_ECM2_HS_CAN_CruiseCtrlSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_CruiseCtrlSts_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 3, dval)
#define TX_ECM2_HS_CAN_SetSignal_CruiseCtrlSts_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 3, nval)
#define TX_ECM2_HS_CAN_MILSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_MILSts_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 4, dval)
#define TX_ECM2_HS_CAN_SetSignal_MILSts_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 4, nval)
#define TX_ECM2_HS_CAN_EngState_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_EngState_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 5, dval)
#define TX_ECM2_HS_CAN_SetSignal_EngState_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 5, nval)
#define TX_ECM2_HS_CAN_AccPedPosValidity_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_AccPedPosValidity_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 6, dval)
#define TX_ECM2_HS_CAN_SetSignal_AccPedPosValidity_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 6, nval)
#define TX_ECM2_HS_CAN_EngineSVSSignal_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM2_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ECM2_HS_CAN_SetSignal_EngineSVSSignal_Physical(dval) SpySetTxSignal(TX_ECM2_HS_CAN_Index, 7, dval)
#define TX_ECM2_HS_CAN_SetSignal_EngineSVSSignal_Raw(nval) SpySetTxSignalRaw(TX_ECM2_HS_CAN_Index, 7, nval)
int TX_ECM2_HS_CAN_TransmitFast();
#define TX_ECM2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ECM2_HS_CAN_Index, 0)
#define TX_ECM2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ECM2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ECM3_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double MaxEngTorqNorm; /// Min: 0 Max: 510 Units: Nm
    BYTE MaxEngTorqNorm_raw;
    double BaroPressure; /// Min: 0 Max: 149.86 Units: kPa
    BYTE BaroPressure_raw;
    double EngCoolantTemp; /// Min: -48 Max: 143.25 Units: �C
    BYTE EngCoolantTemp_raw;
    double EngCoolantTempWrn; /// Min: 0 Max: 1 Units: 
    BYTE EngCoolantTempWrn_raw;
    double EngCoolTmpValidity; /// Min: 0 Max: 2 Units: 
    BYTE EngCoolTmpValidity_raw;
    double SS_Screen_tip; /// Min: 0 Max: 1 Units: 
    BYTE SS_Screen_tip_raw;
    double GeneratorWrnLampSts; /// Min: 0 Max: 1 Units: 
    BYTE GeneratorWrnLampSts_raw;
    double SS_Enable_Lamp; /// Min: 0 Max: 1 Units: 
    BYTE SS_Enable_Lamp_raw;
    double SS_Fault_Lamp; /// Min: 0 Max: 1 Units: 
    BYTE SS_Fault_Lamp_raw;
    double GPF_Warning; /// Min: 0 Max: 3 Units: 
    BYTE GPF_Warning_raw;
} TX_ECM3_HS_CAN;

#define TX_ECM3_HS_CAN_SendType 0
#define TX_ECM3_HS_CAN_SendRate 100
#define TX_ECM3_HS_CAN_SendRateFast 0
#define TX_ECM3_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ECM3_HS_CAN_$_MaxEngTorqNorm_$$__Valid_value_ 0
#define TX_ECM3_HS_CAN_$_MaxEngTorqNorm_SendType 0
#define TX_ECM3_HS_CAN_$_BaroPressure_$$__Valid_value_ 0
#define TX_ECM3_HS_CAN_$_BaroPressure_$$__Invalid_value_ 255
#define TX_ECM3_HS_CAN_$_BaroPressure_SendType 0
#define TX_ECM3_HS_CAN_$_EngCoolantTemp_$$__Valid_value_ 0
#define TX_ECM3_HS_CAN_$_EngCoolantTemp_SendType 0
#define TX_ECM3_HS_CAN_$_EngCoolantTempWrn_$$__No_ 0
#define TX_ECM3_HS_CAN_$_EngCoolantTempWrn_$$__Yes_ 1
#define TX_ECM3_HS_CAN_$_EngCoolantTempWrn_SendType 0
#define TX_ECM3_HS_CAN_$_EngCoolTmpValidity_$$__Invalid_ 0
#define TX_ECM3_HS_CAN_$_EngCoolTmpValidity_$$__Valid_ 1
#define TX_ECM3_HS_CAN_$_EngCoolTmpValidity_$$__Init_value_ 2
#define TX_ECM3_HS_CAN_$_EngCoolTmpValidity_SendType 0
#define TX_ECM3_HS_CAN_$_SS_Screen_tip_$$__no_screen_tip_ 0
#define TX_ECM3_HS_CAN_$_SS_Screen_tip_$$__screen_tip_ 1
#define TX_ECM3_HS_CAN_$_SS_Screen_tip_SendType 0
#define TX_ECM3_HS_CAN_$_GeneratorWrnLampSts_$$__Off_ 0
#define TX_ECM3_HS_CAN_$_GeneratorWrnLampSts_$$__On_ 1
#define TX_ECM3_HS_CAN_$_GeneratorWrnLampSts_SendType 0
#define TX_ECM3_HS_CAN_$_SS_Enable_Lamp_$$__Lamp_off__ 0
#define TX_ECM3_HS_CAN_$_SS_Enable_Lamp_$$__Lamp_on_ 1
#define TX_ECM3_HS_CAN_$_SS_Enable_Lamp_SendType 0
#define TX_ECM3_HS_CAN_$_SS_Fault_Lamp_$$__Lamp_off__ 0
#define TX_ECM3_HS_CAN_$_SS_Fault_Lamp_$$__Lamp_on_ 1
#define TX_ECM3_HS_CAN_$_SS_Fault_Lamp_SendType 0
#define TX_ECM3_HS_CAN_$_GPF_Warning_$$__No_Warning_ 0
#define TX_ECM3_HS_CAN_$_GPF_Warning_$$__GPF_is_regenerating_ 1
#define TX_ECM3_HS_CAN_$_GPF_Warning_$$__GPF_need_to_regenerate_ 2
#define TX_ECM3_HS_CAN_$_GPF_Warning_$$__Reserved_ 3
#define TX_ECM3_HS_CAN_$_GPF_Warning_SendType 0
#pragma warning(default : 4005)

void TX_ECM3_HS_CAN_Init(TX_ECM3_HS_CAN * pMsg);
int TX_ECM3_HS_CAN_Transmit(TX_ECM3_HS_CAN * pMsg);
int TX_ECM3_HS_CAN_Transmit_raw(TX_ECM3_HS_CAN * pMsg);
int TX_ECM3_HS_CAN_UpdateBytesFromSignals(TX_ECM3_HS_CAN * pMsg);
int TX_ECM3_HS_CAN_UpdateBytesFromRawSignals(TX_ECM3_HS_CAN * pMsg);
#define TX_ECM3_HS_CAN_MaxEngTorqNorm_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_MaxEngTorqNorm_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 0, dval)
#define TX_ECM3_HS_CAN_SetSignal_MaxEngTorqNorm_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 0, nval)
#define TX_ECM3_HS_CAN_BaroPressure_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_BaroPressure_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 1, dval)
#define TX_ECM3_HS_CAN_SetSignal_BaroPressure_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 1, nval)
#define TX_ECM3_HS_CAN_EngCoolantTemp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_EngCoolantTemp_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 2, dval)
#define TX_ECM3_HS_CAN_SetSignal_EngCoolantTemp_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 2, nval)
#define TX_ECM3_HS_CAN_EngCoolantTempWrn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_EngCoolantTempWrn_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 3, dval)
#define TX_ECM3_HS_CAN_SetSignal_EngCoolantTempWrn_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 3, nval)
#define TX_ECM3_HS_CAN_EngCoolTmpValidity_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_EngCoolTmpValidity_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 4, dval)
#define TX_ECM3_HS_CAN_SetSignal_EngCoolTmpValidity_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 4, nval)
#define TX_ECM3_HS_CAN_SS_Screen_tip_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_SS_Screen_tip_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 5, dval)
#define TX_ECM3_HS_CAN_SetSignal_SS_Screen_tip_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 5, nval)
#define TX_ECM3_HS_CAN_GeneratorWrnLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_GeneratorWrnLampSts_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 6, dval)
#define TX_ECM3_HS_CAN_SetSignal_GeneratorWrnLampSts_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 6, nval)
#define TX_ECM3_HS_CAN_SS_Enable_Lamp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_SS_Enable_Lamp_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 7, dval)
#define TX_ECM3_HS_CAN_SetSignal_SS_Enable_Lamp_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 7, nval)
#define TX_ECM3_HS_CAN_SS_Fault_Lamp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 8, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_SS_Fault_Lamp_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 8, dval)
#define TX_ECM3_HS_CAN_SetSignal_SS_Fault_Lamp_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 8, nval)
#define TX_ECM3_HS_CAN_GPF_Warning_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM3_HS_CAN_Index, 9, dPhysicalValue);
#define TX_ECM3_HS_CAN_SetSignal_GPF_Warning_Physical(dval) SpySetTxSignal(TX_ECM3_HS_CAN_Index, 9, dval)
#define TX_ECM3_HS_CAN_SetSignal_GPF_Warning_Raw(nval) SpySetTxSignalRaw(TX_ECM3_HS_CAN_Index, 9, nval)
int TX_ECM3_HS_CAN_TransmitFast();
#define TX_ECM3_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ECM3_HS_CAN_Index, 0)
#define TX_ECM3_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ECM3_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ECM4_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_ECM4; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_ECM4_raw;
    double NetEngTrq_G; /// Min: -100 Max: 99.99666120000001 Units: %
    WORD NetEngTrq_G_raw;
    double DriverEngTqReq_G; /// Min: -100 Max: 99.999713 Units: %
    WORD DriverEngTqReq_G_raw;
    double DriverEngTqReqValid_G; /// Min: 0 Max: 1 Units: 
    BYTE DriverEngTqReqValid_G_raw;
    double RollingCounter_ECM4; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ECM4_raw;
} TX_ECM4_HS_CAN;

#define TX_ECM4_HS_CAN_SendType 0
#define TX_ECM4_HS_CAN_SendRate 10
#define TX_ECM4_HS_CAN_SendRateFast 0
#define TX_ECM4_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ECM4_HS_CAN_$_Checksum_ECM4_$$__Valid__ 0
#define TX_ECM4_HS_CAN_$_Checksum_ECM4_SendType 0
#define TX_ECM4_HS_CAN_$_NetEngTrq_G_$$__Valid_ 0
#define TX_ECM4_HS_CAN_$_NetEngTrq_G_$$__Invalid_ 65535
#define TX_ECM4_HS_CAN_$_NetEngTrq_G_SendType 0
#define TX_ECM4_HS_CAN_$_DriverEngTqReq_G_$$__Valid_ 0
#define TX_ECM4_HS_CAN_$_DriverEngTqReq_G_SendType 0
#define TX_ECM4_HS_CAN_$_DriverEngTqReqValid_G_$$__Invalid_ 0
#define TX_ECM4_HS_CAN_$_DriverEngTqReqValid_G_$$__Valid_ 1
#define TX_ECM4_HS_CAN_$_DriverEngTqReqValid_G_SendType 0
#define TX_ECM4_HS_CAN_$_RollingCounter_ECM4_$$__Valid__ 0
#define TX_ECM4_HS_CAN_$_RollingCounter_ECM4_SendType 0
#pragma warning(default : 4005)

void TX_ECM4_HS_CAN_Init(TX_ECM4_HS_CAN * pMsg);
int TX_ECM4_HS_CAN_Transmit(TX_ECM4_HS_CAN * pMsg);
int TX_ECM4_HS_CAN_Transmit_raw(TX_ECM4_HS_CAN * pMsg);
int TX_ECM4_HS_CAN_UpdateBytesFromSignals(TX_ECM4_HS_CAN * pMsg);
int TX_ECM4_HS_CAN_UpdateBytesFromRawSignals(TX_ECM4_HS_CAN * pMsg);
#define TX_ECM4_HS_CAN_Checksum_ECM4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM4_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ECM4_HS_CAN_SetSignal_Checksum_ECM4_Physical(dval) SpySetTxSignal(TX_ECM4_HS_CAN_Index, 0, dval)
#define TX_ECM4_HS_CAN_SetSignal_Checksum_ECM4_Raw(nval) SpySetTxSignalRaw(TX_ECM4_HS_CAN_Index, 0, nval)
#define TX_ECM4_HS_CAN_NetEngTrq_G_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM4_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ECM4_HS_CAN_SetSignal_NetEngTrq_G_Physical(dval) SpySetTxSignal(TX_ECM4_HS_CAN_Index, 1, dval)
#define TX_ECM4_HS_CAN_SetSignal_NetEngTrq_G_Raw(nval) SpySetTxSignalRaw(TX_ECM4_HS_CAN_Index, 1, nval)
#define TX_ECM4_HS_CAN_DriverEngTqReq_G_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM4_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ECM4_HS_CAN_SetSignal_DriverEngTqReq_G_Physical(dval) SpySetTxSignal(TX_ECM4_HS_CAN_Index, 2, dval)
#define TX_ECM4_HS_CAN_SetSignal_DriverEngTqReq_G_Raw(nval) SpySetTxSignalRaw(TX_ECM4_HS_CAN_Index, 2, nval)
#define TX_ECM4_HS_CAN_DriverEngTqReqValid_G_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM4_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ECM4_HS_CAN_SetSignal_DriverEngTqReqValid_G_Physical(dval) SpySetTxSignal(TX_ECM4_HS_CAN_Index, 3, dval)
#define TX_ECM4_HS_CAN_SetSignal_DriverEngTqReqValid_G_Raw(nval) SpySetTxSignalRaw(TX_ECM4_HS_CAN_Index, 3, nval)
#define TX_ECM4_HS_CAN_RollingCounter_ECM4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM4_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ECM4_HS_CAN_SetSignal_RollingCounter_ECM4_Physical(dval) SpySetTxSignal(TX_ECM4_HS_CAN_Index, 4, dval)
#define TX_ECM4_HS_CAN_SetSignal_RollingCounter_ECM4_Raw(nval) SpySetTxSignalRaw(TX_ECM4_HS_CAN_Index, 4, nval)
int TX_ECM4_HS_CAN_TransmitFast();
#define TX_ECM4_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ECM4_HS_CAN_Index, 0)
#define TX_ECM4_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ECM4_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ECM9_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_ECM9; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_ECM9_raw;
    double ECM_interfaceAPS; /// Min: 0 Max: 1 Units: 
    BYTE ECM_interfaceAPS_raw;
    double AccPedalOverride; /// Min: 0 Max: 1 Units: 
    BYTE AccPedalOverride_raw;
    double ECM_ACC_ON_OFFSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_ON_OFFSw_raw;
    double ECM_ACC_CancelSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_CancelSw_raw;
    double ECM_ACC_IncSetSpd_ResuSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_IncSetSpd_ResuSw_raw;
    double ECM_ACC_DecSetSpd_SetSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_DecSetSpd_SetSw_raw;
    double ECM_ACCTimeGapSetSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACCTimeGapSetSw_raw;
    double ECM_ACCSwErr; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACCSwErr_raw;
    double AccrPedlPosnDiagc; /// Min: 0 Max: 100.3935 Units: %
    BYTE AccrPedlPosnDiagc_raw;
    double ECMResponseACC; /// Min: 0 Max: 1 Units: 
    BYTE ECMResponseACC_raw;
    double ECMACCInterface; /// Min: 0 Max: 1 Units: 
    BYTE ECMACCInterface_raw;
    double RollingCounter_ECM9; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ECM9_raw;
} TX_ECM9_HS_CAN;

#define TX_ECM9_HS_CAN_SendType 0
#define TX_ECM9_HS_CAN_SendRate 20
#define TX_ECM9_HS_CAN_SendRateFast 0
#define TX_ECM9_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ECM9_HS_CAN_$_Checksum_ECM9_$$__Valid_value_ 0
#define TX_ECM9_HS_CAN_$_Checksum_ECM9_SendType 0
#define TX_ECM9_HS_CAN_$_ECM_interfaceAPS_$$__No_error_ 0
#define TX_ECM9_HS_CAN_$_ECM_interfaceAPS_$$__Error_ 1
#define TX_ECM9_HS_CAN_$_ECM_interfaceAPS_SendType 0
#define TX_ECM9_HS_CAN_$_AccPedalOverride_$$__not_override_ 0
#define TX_ECM9_HS_CAN_$_AccPedalOverride_$$__override_ 1
#define TX_ECM9_HS_CAN_$_AccPedalOverride_SendType 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_ON_OFFSw_$$__No_press_ 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_ON_OFFSw_$$__Pressed_ 1
#define TX_ECM9_HS_CAN_$_ECM_ACC_ON_OFFSw_SendType 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_CancelSw_$$__No_press_ 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_CancelSw_$$__Pressed_ 1
#define TX_ECM9_HS_CAN_$_ECM_ACC_CancelSw_SendType 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_IncSetSpd_ResuSw_$$__No_press_ 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_IncSetSpd_ResuSw_$$__Pressed_ 1
#define TX_ECM9_HS_CAN_$_ECM_ACC_IncSetSpd_ResuSw_SendType 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_DecSetSpd_SetSw_$$__No_press_ 0
#define TX_ECM9_HS_CAN_$_ECM_ACC_DecSetSpd_SetSw_$$__Pressed_ 1
#define TX_ECM9_HS_CAN_$_ECM_ACC_DecSetSpd_SetSw_SendType 0
#define TX_ECM9_HS_CAN_$_ECM_ACCTimeGapSetSw_$$__No_press_ 0
#define TX_ECM9_HS_CAN_$_ECM_ACCTimeGapSetSw_$$__Pressed_ 1
#define TX_ECM9_HS_CAN_$_ECM_ACCTimeGapSetSw_SendType 0
#define TX_ECM9_HS_CAN_$_ECM_ACCSwErr_$$__No_error_ 0
#define TX_ECM9_HS_CAN_$_ECM_ACCSwErr_$$__Error_ 1
#define TX_ECM9_HS_CAN_$_ECM_ACCSwErr_SendType 0
#define TX_ECM9_HS_CAN_$_AccrPedlPosnDiagc_$$__Valid__ 0
#define TX_ECM9_HS_CAN_$_AccrPedlPosnDiagc_SendType 0
#define TX_ECM9_HS_CAN_$_ECMResponseACC_$$__No_response_ 0
#define TX_ECM9_HS_CAN_$_ECMResponseACC_$$__Response_ 1
#define TX_ECM9_HS_CAN_$_ECMResponseACC_SendType 0
#define TX_ECM9_HS_CAN_$_ECMACCInterface_$$__No_response_ 0
#define TX_ECM9_HS_CAN_$_ECMACCInterface_$$__Response_ 1
#define TX_ECM9_HS_CAN_$_ECMACCInterface_SendType 0
#define TX_ECM9_HS_CAN_$_RollingCounter_ECM9_$$__Valid_value_ 0
#define TX_ECM9_HS_CAN_$_RollingCounter_ECM9_SendType 0
#pragma warning(default : 4005)

void TX_ECM9_HS_CAN_Init(TX_ECM9_HS_CAN * pMsg);
int TX_ECM9_HS_CAN_Transmit(TX_ECM9_HS_CAN * pMsg);
int TX_ECM9_HS_CAN_Transmit_raw(TX_ECM9_HS_CAN * pMsg);
int TX_ECM9_HS_CAN_UpdateBytesFromSignals(TX_ECM9_HS_CAN * pMsg);
int TX_ECM9_HS_CAN_UpdateBytesFromRawSignals(TX_ECM9_HS_CAN * pMsg);
#define TX_ECM9_HS_CAN_Checksum_ECM9_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_Checksum_ECM9_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 0, dval)
#define TX_ECM9_HS_CAN_SetSignal_Checksum_ECM9_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 0, nval)
#define TX_ECM9_HS_CAN_ECM_interfaceAPS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECM_interfaceAPS_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 1, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECM_interfaceAPS_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 1, nval)
#define TX_ECM9_HS_CAN_AccPedalOverride_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_AccPedalOverride_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 2, dval)
#define TX_ECM9_HS_CAN_SetSignal_AccPedalOverride_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 2, nval)
#define TX_ECM9_HS_CAN_ECM_ACC_ON_OFFSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_ON_OFFSw_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 3, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_ON_OFFSw_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 3, nval)
#define TX_ECM9_HS_CAN_ECM_ACC_CancelSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_CancelSw_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 4, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_CancelSw_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 4, nval)
#define TX_ECM9_HS_CAN_ECM_ACC_IncSetSpd_ResuSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_IncSetSpd_ResuSw_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 5, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_IncSetSpd_ResuSw_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 5, nval)
#define TX_ECM9_HS_CAN_ECM_ACC_DecSetSpd_SetSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_DecSetSpd_SetSw_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 6, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACC_DecSetSpd_SetSw_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 6, nval)
#define TX_ECM9_HS_CAN_ECM_ACCTimeGapSetSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACCTimeGapSetSw_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 7, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACCTimeGapSetSw_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 7, nval)
#define TX_ECM9_HS_CAN_ECM_ACCSwErr_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 8, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACCSwErr_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 8, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECM_ACCSwErr_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 8, nval)
#define TX_ECM9_HS_CAN_AccrPedlPosnDiagc_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 9, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_AccrPedlPosnDiagc_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 9, dval)
#define TX_ECM9_HS_CAN_SetSignal_AccrPedlPosnDiagc_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 9, nval)
#define TX_ECM9_HS_CAN_ECMResponseACC_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 10, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECMResponseACC_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 10, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECMResponseACC_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 10, nval)
#define TX_ECM9_HS_CAN_ECMACCInterface_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 11, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_ECMACCInterface_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 11, dval)
#define TX_ECM9_HS_CAN_SetSignal_ECMACCInterface_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 11, nval)
#define TX_ECM9_HS_CAN_RollingCounter_ECM9_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ECM9_HS_CAN_Index, 12, dPhysicalValue);
#define TX_ECM9_HS_CAN_SetSignal_RollingCounter_ECM9_Physical(dval) SpySetTxSignal(TX_ECM9_HS_CAN_Index, 12, dval)
#define TX_ECM9_HS_CAN_SetSignal_RollingCounter_ECM9_Raw(nval) SpySetTxSignalRaw(TX_ECM9_HS_CAN_Index, 12, nval)
int TX_ECM9_HS_CAN_TransmitFast();
#define TX_ECM9_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ECM9_HS_CAN_Index, 0)
#define TX_ECM9_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ECM9_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_EPB1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_EPB1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_EPB1_raw;
    double PressBrakePedalPointOut; /// Min: 0 Max: 1 Units: N/A
    BYTE PressBrakePedalPointOut_raw;
    double EPB_SwtichPositionValid; /// Min: 0 Max: 1 Units: 
    BYTE EPB_SwtichPositionValid_raw;
    double EPB_SwtichPosition; /// Min: 0 Max: 3 Units: 
    BYTE EPB_SwtichPosition_raw;
    double EPBSts; /// Min: 0 Max: 3 Units: 
    BYTE EPBSts_raw;
    double EPBErrorSts; /// Min: 0 Max: 3 Units: 
    BYTE EPBErrorSts_raw;
    double EPBTXTdisplay; /// Min: 0 Max: 15 Units: N/A
    BYTE EPBTXTdisplay_raw;
    double RollingCounter_EPB1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_EPB1_raw;
} TX_EPB1_HS_CAN;

#define TX_EPB1_HS_CAN_SendType 0
#define TX_EPB1_HS_CAN_SendRate 20
#define TX_EPB1_HS_CAN_SendRateFast 0
#define TX_EPB1_HS_CAN_NumRepetitions 0
#define TX_EPB1_HS_CAN_$_CheckSum_EPB1_SendType 0
#pragma warning(disable : 4005)
#define TX_EPB1_HS_CAN_$_PressBrakePedalPointOut_$$__No_reminder_ 0
#define TX_EPB1_HS_CAN_$_PressBrakePedalPointOut_$$__Pedal_needs_to_be_applied_ 1
#define TX_EPB1_HS_CAN_$_PressBrakePedalPointOut_SendType 0
#define TX_EPB1_HS_CAN_$_EPB_SwtichPositionValid_$$__Not_valid__ 1
#define TX_EPB1_HS_CAN_$_EPB_SwtichPositionValid_$$__Valid__ 0
#define TX_EPB1_HS_CAN_$_EPB_SwtichPositionValid_SendType 0
#define TX_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Neutral_ 0
#define TX_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Release_ 1
#define TX_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Apply_ 2
#define TX_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Reserved_ 3
#define TX_EPB1_HS_CAN_$_EPB_SwtichPosition_SendType 0
#define TX_EPB1_HS_CAN_$_EPBSts_$$__Released_ 0
#define TX_EPB1_HS_CAN_$_EPBSts_$$__Closed_ 1
#define TX_EPB1_HS_CAN_$_EPBSts_$$__In_progress_ 2
#define TX_EPB1_HS_CAN_$_EPBSts_$$__unknown_ 3
#define TX_EPB1_HS_CAN_$_EPBSts_SendType 0
#define TX_EPB1_HS_CAN_$_EPBErrorSts_$$__Undefined_ 0
#define TX_EPB1_HS_CAN_$_EPBErrorSts_$$__No_Error_ 1
#define TX_EPB1_HS_CAN_$_EPBErrorSts_$$__Error_ 2
#define TX_EPB1_HS_CAN_$_EPBErrorSts_$$__Diagnosis_ 3
#define TX_EPB1_HS_CAN_$_EPBErrorSts_SendType 0
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__No_display_ 0
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Gradient_too_high_ 1
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Park_brake_force_not_enough_ 2
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Park_brake_system_overheated_ 3
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Remind_driver_to_apply_safety_belt_ 4
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Park_brake_maintenance_mode_ 5
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Roller_bench_mode_ 6
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Reserved_ 7
#define TX_EPB1_HS_CAN_$_EPBTXTdisplay_SendType 0
#define TX_EPB1_HS_CAN_$_RollingCounter_EPB1_SendType 0
#pragma warning(default : 4005)

void TX_EPB1_HS_CAN_Init(TX_EPB1_HS_CAN * pMsg);
int TX_EPB1_HS_CAN_Transmit(TX_EPB1_HS_CAN * pMsg);
int TX_EPB1_HS_CAN_Transmit_raw(TX_EPB1_HS_CAN * pMsg);
int TX_EPB1_HS_CAN_UpdateBytesFromSignals(TX_EPB1_HS_CAN * pMsg);
int TX_EPB1_HS_CAN_UpdateBytesFromRawSignals(TX_EPB1_HS_CAN * pMsg);
#define TX_EPB1_HS_CAN_CheckSum_EPB1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_CheckSum_EPB1_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 0, dval)
#define TX_EPB1_HS_CAN_SetSignal_CheckSum_EPB1_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 0, nval)
#define TX_EPB1_HS_CAN_PressBrakePedalPointOut_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_PressBrakePedalPointOut_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 1, dval)
#define TX_EPB1_HS_CAN_SetSignal_PressBrakePedalPointOut_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 1, nval)
#define TX_EPB1_HS_CAN_EPB_SwtichPositionValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_EPB_SwtichPositionValid_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 2, dval)
#define TX_EPB1_HS_CAN_SetSignal_EPB_SwtichPositionValid_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 2, nval)
#define TX_EPB1_HS_CAN_EPB_SwtichPosition_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_EPB_SwtichPosition_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 3, dval)
#define TX_EPB1_HS_CAN_SetSignal_EPB_SwtichPosition_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 3, nval)
#define TX_EPB1_HS_CAN_EPBSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_EPBSts_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 4, dval)
#define TX_EPB1_HS_CAN_SetSignal_EPBSts_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 4, nval)
#define TX_EPB1_HS_CAN_EPBErrorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_EPBErrorSts_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 5, dval)
#define TX_EPB1_HS_CAN_SetSignal_EPBErrorSts_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 5, nval)
#define TX_EPB1_HS_CAN_EPBTXTdisplay_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_EPBTXTdisplay_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 6, dval)
#define TX_EPB1_HS_CAN_SetSignal_EPBTXTdisplay_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 6, nval)
#define TX_EPB1_HS_CAN_RollingCounter_EPB1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_EPB1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_EPB1_HS_CAN_SetSignal_RollingCounter_EPB1_Physical(dval) SpySetTxSignal(TX_EPB1_HS_CAN_Index, 7, dval)
#define TX_EPB1_HS_CAN_SetSignal_RollingCounter_EPB1_Raw(nval) SpySetTxSignalRaw(TX_EPB1_HS_CAN_Index, 7, nval)
int TX_EPB1_HS_CAN_TransmitFast();
#define TX_EPB1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_EPB1_HS_CAN_Index, 0)
#define TX_EPB1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_EPB1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ESP1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ESP1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ESP1_raw;
    double ESPFailSts; /// Min: 0 Max: 1 Units: 
    BYTE ESPFailSts_raw;
    double ESPBrakeLightCtrl; /// Min: 0 Max: 1 Units: 
    BYTE ESPBrakeLightCtrl_raw;
    double ESPActiveInfoLamp; /// Min: 0 Max: 1 Units: 
    BYTE ESPActiveInfoLamp_raw;
    double EspFuncOffSts; /// Min: 0 Max: 1 Units: 
    BYTE EspFuncOffSts_raw;
    double EPBRedLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE EPBRedLmpSts_raw;
    double BTCActive; /// Min: 0 Max: 1 Units: 
    BYTE BTCActive_raw;
    double PTCActive; /// Min: 0 Max: 1 Units: 
    BYTE PTCActive_raw;
    double MSRActive; /// Min: 0 Max: 1 Units: 
    BYTE MSRActive_raw;
    double VDCActive; /// Min: 0 Max: 1 Units: 
    BYTE VDCActive_raw;
    double VDCDeactivated; /// Min: 0 Max: 1 Units: 
    BYTE VDCDeactivated_raw;
    double VDCFail; /// Min: 0 Max: 1 Units: 
    BYTE VDCFail_raw;
    double ESP_MasterCylindBrakePressValid; /// Min: 0 Max: 1 Units: 
    BYTE ESP_MasterCylindBrakePressValid_raw;
    double ESP_MasterCylindBrakePress; /// Min: -42.5 Max: 425 Units: bar
    WORD ESP_MasterCylindBrakePress_raw;
    double RollingCounter_ESP1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ESP1_raw;
} TX_ESP1_HS_CAN;

#define TX_ESP1_HS_CAN_SendType 0
#define TX_ESP1_HS_CAN_SendRate 20
#define TX_ESP1_HS_CAN_SendRateFast 0
#define TX_ESP1_HS_CAN_NumRepetitions 0
#define TX_ESP1_HS_CAN_$_CheckSum_ESP1_SendType 0
#pragma warning(disable : 4005)
#define TX_ESP1_HS_CAN_$_ESPFailSts_$$__No_failure_ 0
#define TX_ESP1_HS_CAN_$_ESPFailSts_$$__Failure_ 1
#define TX_ESP1_HS_CAN_$_ESPFailSts_SendType 0
#define TX_ESP1_HS_CAN_$_ESPBrakeLightCtrl_$$__Brake_light_off_ 0
#define TX_ESP1_HS_CAN_$_ESPBrakeLightCtrl_$$__Brake_light_on_ 1
#define TX_ESP1_HS_CAN_$_ESPBrakeLightCtrl_SendType 0
#define TX_ESP1_HS_CAN_$_ESPActiveInfoLamp_$$__Not_active_ 0
#define TX_ESP1_HS_CAN_$_ESPActiveInfoLamp_$$__Active_ 1
#define TX_ESP1_HS_CAN_$_ESPActiveInfoLamp_SendType 0
#define TX_ESP1_HS_CAN_$_EspFuncOffSts_$$__Available_On_ 0
#define TX_ESP1_HS_CAN_$_EspFuncOffSts_$$__Unavailable_Off_ 1
#define TX_ESP1_HS_CAN_$_EspFuncOffSts_SendType 0
#define TX_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Lamp_off_ 1
#define TX_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Lamp_on_ 1
#define TX_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Lamp_flash_ 2
#define TX_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Reserved_ 3
#define TX_ESP1_HS_CAN_$_EPBRedLmpSts_SendType 0
#define TX_ESP1_HS_CAN_$_BTCActive_$$__Not_active_ 0
#define TX_ESP1_HS_CAN_$_BTCActive_$$__Active_ 1
#define TX_ESP1_HS_CAN_$_BTCActive_SendType 0
#define TX_ESP1_HS_CAN_$_PTCActive_$$__Not_active_ 0
#define TX_ESP1_HS_CAN_$_PTCActive_$$__Active_ 1
#define TX_ESP1_HS_CAN_$_PTCActive_SendType 0
#define TX_ESP1_HS_CAN_$_MSRActive_$$__Not_active_ 0
#define TX_ESP1_HS_CAN_$_MSRActive_$$__Active_ 1
#define TX_ESP1_HS_CAN_$_MSRActive_SendType 0
#define TX_ESP1_HS_CAN_$_VDCActive_$$__Not_active_ 0
#define TX_ESP1_HS_CAN_$_VDCActive_$$__Active_ 1
#define TX_ESP1_HS_CAN_$_VDCActive_SendType 0
#define TX_ESP1_HS_CAN_$_VDCDeactivated_$$__Not_deactivated_ 0
#define TX_ESP1_HS_CAN_$_VDCDeactivated_$$__Deactivated_ 1
#define TX_ESP1_HS_CAN_$_VDCDeactivated_SendType 0
#define TX_ESP1_HS_CAN_$_VDCFail_$$__No_error_ 0
#define TX_ESP1_HS_CAN_$_VDCFail_$$__Error_ 1
#define TX_ESP1_HS_CAN_$_VDCFail_SendType 0
#define TX_ESP1_HS_CAN_$_ESP_MasterCylindBrakePressValid_$$__Valid_ 0
#define TX_ESP1_HS_CAN_$_ESP_MasterCylindBrakePressValid_$$__Invalid_ 1
#define TX_ESP1_HS_CAN_$_ESP_MasterCylindBrakePressValid_SendType 0
#define TX_ESP1_HS_CAN_$_ESP_MasterCylindBrakePress_$$__Valid_value_ 0
#define TX_ESP1_HS_CAN_$_ESP_MasterCylindBrakePress_$$__Reserved_ 14961
#define TX_ESP1_HS_CAN_$_ESP_MasterCylindBrakePress_SendType 0
#define TX_ESP1_HS_CAN_$_RollingCounter_ESP1_SendType 0
#pragma warning(default : 4005)

void TX_ESP1_HS_CAN_Init(TX_ESP1_HS_CAN * pMsg);
int TX_ESP1_HS_CAN_Transmit(TX_ESP1_HS_CAN * pMsg);
int TX_ESP1_HS_CAN_Transmit_raw(TX_ESP1_HS_CAN * pMsg);
int TX_ESP1_HS_CAN_UpdateBytesFromSignals(TX_ESP1_HS_CAN * pMsg);
int TX_ESP1_HS_CAN_UpdateBytesFromRawSignals(TX_ESP1_HS_CAN * pMsg);
#define TX_ESP1_HS_CAN_CheckSum_ESP1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_CheckSum_ESP1_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 0, dval)
#define TX_ESP1_HS_CAN_SetSignal_CheckSum_ESP1_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 0, nval)
#define TX_ESP1_HS_CAN_ESPFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_ESPFailSts_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 1, dval)
#define TX_ESP1_HS_CAN_SetSignal_ESPFailSts_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 1, nval)
#define TX_ESP1_HS_CAN_ESPBrakeLightCtrl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_ESPBrakeLightCtrl_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 2, dval)
#define TX_ESP1_HS_CAN_SetSignal_ESPBrakeLightCtrl_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 2, nval)
#define TX_ESP1_HS_CAN_ESPActiveInfoLamp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_ESPActiveInfoLamp_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 3, dval)
#define TX_ESP1_HS_CAN_SetSignal_ESPActiveInfoLamp_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 3, nval)
#define TX_ESP1_HS_CAN_EspFuncOffSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_EspFuncOffSts_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 4, dval)
#define TX_ESP1_HS_CAN_SetSignal_EspFuncOffSts_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 4, nval)
#define TX_ESP1_HS_CAN_EPBRedLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_EPBRedLmpSts_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 5, dval)
#define TX_ESP1_HS_CAN_SetSignal_EPBRedLmpSts_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 5, nval)
#define TX_ESP1_HS_CAN_BTCActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_BTCActive_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 6, dval)
#define TX_ESP1_HS_CAN_SetSignal_BTCActive_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 6, nval)
#define TX_ESP1_HS_CAN_PTCActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_PTCActive_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 7, dval)
#define TX_ESP1_HS_CAN_SetSignal_PTCActive_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 7, nval)
#define TX_ESP1_HS_CAN_MSRActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 8, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_MSRActive_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 8, dval)
#define TX_ESP1_HS_CAN_SetSignal_MSRActive_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 8, nval)
#define TX_ESP1_HS_CAN_VDCActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 9, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_VDCActive_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 9, dval)
#define TX_ESP1_HS_CAN_SetSignal_VDCActive_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 9, nval)
#define TX_ESP1_HS_CAN_VDCDeactivated_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 10, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_VDCDeactivated_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 10, dval)
#define TX_ESP1_HS_CAN_SetSignal_VDCDeactivated_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 10, nval)
#define TX_ESP1_HS_CAN_VDCFail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 11, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_VDCFail_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 11, dval)
#define TX_ESP1_HS_CAN_SetSignal_VDCFail_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 11, nval)
#define TX_ESP1_HS_CAN_ESP_MasterCylindBrakePressValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 12, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_ESP_MasterCylindBrakePressValid_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 12, dval)
#define TX_ESP1_HS_CAN_SetSignal_ESP_MasterCylindBrakePressValid_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 12, nval)
#define TX_ESP1_HS_CAN_ESP_MasterCylindBrakePress_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 13, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_ESP_MasterCylindBrakePress_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 13, dval)
#define TX_ESP1_HS_CAN_SetSignal_ESP_MasterCylindBrakePress_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 13, nval)
#define TX_ESP1_HS_CAN_RollingCounter_ESP1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP1_HS_CAN_Index, 14, dPhysicalValue);
#define TX_ESP1_HS_CAN_SetSignal_RollingCounter_ESP1_Physical(dval) SpySetTxSignal(TX_ESP1_HS_CAN_Index, 14, dval)
#define TX_ESP1_HS_CAN_SetSignal_RollingCounter_ESP1_Raw(nval) SpySetTxSignalRaw(TX_ESP1_HS_CAN_Index, 14, nval)
int TX_ESP1_HS_CAN_TransmitFast();
#define TX_ESP1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ESP1_HS_CAN_Index, 0)
#define TX_ESP1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ESP1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ESP2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ESP2; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ESP2_raw;
    double VehicleStandstill; /// Min: 0 Max: 3 Units: 
    BYTE VehicleStandstill_raw;
    double NoBrakeForce; /// Min: 0 Max: 1 Units: 
    BYTE NoBrakeForce_raw;
    double BrakeDiskOverHeat; /// Min: 0 Max: 1 Units: 
    BYTE BrakeDiskOverHeat_raw;
    double ABAactive; /// Min: 0 Max: 1 Units: 
    BYTE ABAactive_raw;
    double ABAavailable; /// Min: 0 Max: 1 Units: 
    BYTE ABAavailable_raw;
    double ABPActive; /// Min: 0 Max: 1 Units: 
    BYTE ABPActive_raw;
    double ABPAvailable; /// Min: 0 Max: 1 Units: 
    BYTE ABPAvailable_raw;
    double AEBAvailable; /// Min: 0 Max: 1 Units: 
    BYTE AEBAvailable_raw;
    double AEBBAActive; /// Min: 0 Max: 1 Units: 
    BYTE AEBBAActive_raw;
    double AEBIBActive; /// Min: 0 Max: 1 Units: 
    BYTE AEBIBActive_raw;
    double AWBactive; /// Min: 0 Max: 1 Units: 
    BYTE AWBactive_raw;
    double AWBavailable; /// Min: 0 Max: 1 Units: 
    BYTE AWBavailable_raw;
    double CDD_Available; /// Min: 0 Max: 1 Units: 
    BYTE CDD_Available_raw;
    double CDD_Active; /// Min: 0 Max: 1 Units: 
    BYTE CDD_Active_raw;
    double HDCControl; /// Min: 0 Max: 2 Units: 
    BYTE HDCControl_raw;
    double HDCFault; /// Min: 0 Max: 3 Units: 
    BYTE HDCFault_raw;
    double CDPActive; /// Min: 0 Max: 1 Units: 
    BYTE CDPActive_raw;
    double AVHSts; /// Min: 0 Max: 2 Units: 
    BYTE AVHSts_raw;
    double AVHerrorSts; /// Min: 0 Max: 3 Units: 
    BYTE AVHerrorSts_raw;
    double DrivingModeReq_ESP; /// Min: 0 Max: 15 Units: 
    BYTE DrivingModeReq_ESP_raw;
    double DrivingModeDis; /// Min: 0 Max: 15 Units: 
    BYTE DrivingModeDis_raw;
    double RollingCounter_ESP2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ESP2_raw;
    double CTABrakeAvailable; /// Min: 0 Max: 1 Units: 
    BYTE CTABrakeAvailable_raw;
} TX_ESP2_HS_CAN;

#define TX_ESP2_HS_CAN_SendType 0
#define TX_ESP2_HS_CAN_SendRate 20
#define TX_ESP2_HS_CAN_SendRateFast 0
#define TX_ESP2_HS_CAN_NumRepetitions 0
#define TX_ESP2_HS_CAN_$_CheckSum_ESP2_SendType 0
#pragma warning(disable : 4005)
#define TX_ESP2_HS_CAN_$_VehicleStandstill_$$__Not_standstill_ 0
#define TX_ESP2_HS_CAN_$_VehicleStandstill_$$__Standstill_ 1
#define TX_ESP2_HS_CAN_$_VehicleStandstill_$$__Invalid__short_unavailability__maX_3s__ 2
#define TX_ESP2_HS_CAN_$_VehicleStandstill_$$__Reserved_ 3
#define TX_ESP2_HS_CAN_$_VehicleStandstill_SendType 0
#define TX_ESP2_HS_CAN_$_NoBrakeForce_$$__EXist_brake_force_ 0
#define TX_ESP2_HS_CAN_$_NoBrakeForce_$$__No_brake_force_ 1
#define TX_ESP2_HS_CAN_$_NoBrakeForce_SendType 0
#define TX_ESP2_HS_CAN_$_BrakeDiskOverHeat_$$__Not_high_ 0
#define TX_ESP2_HS_CAN_$_BrakeDiskOverHeat_$$__Temp_too_high_ 1
#define TX_ESP2_HS_CAN_$_BrakeDiskOverHeat_SendType 0
#define TX_ESP2_HS_CAN_$_ABAactive_$$__Not_active_ 0
#define TX_ESP2_HS_CAN_$_ABAactive_$$__Active_ 1
#define TX_ESP2_HS_CAN_$_ABAactive_SendType 0
#define TX_ESP2_HS_CAN_$_ABAavailable_$$__Unusable_ 0
#define TX_ESP2_HS_CAN_$_ABAavailable_$$__Usable_ 1
#define TX_ESP2_HS_CAN_$_ABAavailable_SendType 0
#define TX_ESP2_HS_CAN_$_ABPActive_$$__Not_active_ 0
#define TX_ESP2_HS_CAN_$_ABPActive_$$__Active_ 1
#define TX_ESP2_HS_CAN_$_ABPActive_SendType 0
#define TX_ESP2_HS_CAN_$_ABPAvailable_$$__Unusable_ 0
#define TX_ESP2_HS_CAN_$_ABPAvailable_$$__Usable_ 1
#define TX_ESP2_HS_CAN_$_ABPAvailable_SendType 0
#define TX_ESP2_HS_CAN_$_AEBAvailable_$$__Unusable_ 0
#define TX_ESP2_HS_CAN_$_AEBAvailable_$$__Usable_ 1
#define TX_ESP2_HS_CAN_$_AEBAvailable_SendType 0
#define TX_ESP2_HS_CAN_$_AEBBAActive_$$__Not_active_ 0
#define TX_ESP2_HS_CAN_$_AEBBAActive_$$__Active_ 1
#define TX_ESP2_HS_CAN_$_AEBBAActive_SendType 0
#define TX_ESP2_HS_CAN_$_AEBIBActive_$$__Not_active_ 0
#define TX_ESP2_HS_CAN_$_AEBIBActive_$$__Active_ 1
#define TX_ESP2_HS_CAN_$_AEBIBActive_SendType 0
#define TX_ESP2_HS_CAN_$_AWBactive_$$__Not_active_ 0
#define TX_ESP2_HS_CAN_$_AWBactive_$$__Active_ 1
#define TX_ESP2_HS_CAN_$_AWBactive_SendType 0
#define TX_ESP2_HS_CAN_$_AWBavailable_$$__Unusable_ 0
#define TX_ESP2_HS_CAN_$_AWBavailable_$$__Usable_ 1
#define TX_ESP2_HS_CAN_$_AWBavailable_SendType 0
#define TX_ESP2_HS_CAN_$_CDD_Available_$$__Not_available_ 0
#define TX_ESP2_HS_CAN_$_CDD_Available_$$__Available_ 1
#define TX_ESP2_HS_CAN_$_CDD_Available_SendType 0
#define TX_ESP2_HS_CAN_$_CDD_Active_$$__Not_active_ 0
#define TX_ESP2_HS_CAN_$_CDD_Active_$$__Active_ 1
#define TX_ESP2_HS_CAN_$_CDD_Active_SendType 0
#define TX_ESP2_HS_CAN_$_HDCControl_$$__OFF_ 0
#define TX_ESP2_HS_CAN_$_HDCControl_$$__On_active_braking_ 1
#define TX_ESP2_HS_CAN_$_HDCControl_$$__On_not_active_braking_ 2
#define TX_ESP2_HS_CAN_$_HDCControl_SendType 0
#define TX_ESP2_HS_CAN_$_HDCFault_$$__No_failure_ 0
#define TX_ESP2_HS_CAN_$_HDCFault_$$__Failure_ 1
#define TX_ESP2_HS_CAN_$_HDCFault_$$__Unusable_ 2
#define TX_ESP2_HS_CAN_$_HDCFault_$$__Reserved_ 3
#define TX_ESP2_HS_CAN_$_HDCFault_SendType 0
#define TX_ESP2_HS_CAN_$_CDPActive_$$__Not_active_ 0
#define TX_ESP2_HS_CAN_$_CDPActive_$$__Active_ 1
#define TX_ESP2_HS_CAN_$_CDPActive_SendType 0
#define TX_ESP2_HS_CAN_$_AVHSts_$$__Off_ 0
#define TX_ESP2_HS_CAN_$_AVHSts_$$__Standby__ 1
#define TX_ESP2_HS_CAN_$_AVHSts_$$__active_ 2
#define TX_ESP2_HS_CAN_$_AVHSts_SendType 0
#define TX_ESP2_HS_CAN_$_AVHerrorSts_$$__No_failure_ 0
#define TX_ESP2_HS_CAN_$_AVHerrorSts_$$__Failure_ 1
#define TX_ESP2_HS_CAN_$_AVHerrorSts_$$__Unusable_ 2
#define TX_ESP2_HS_CAN_$_AVHerrorSts_$$__Reserved_ 3
#define TX_ESP2_HS_CAN_$_AVHerrorSts_SendType 0
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__NO_Terrain_Control_ 0
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Standard_ 1
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Sport_ 2
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Snow_ 3
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Flat_Mud_ 4
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Deep_Mud_ 5
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Stiff_Sand_ 6
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Soft_Sand_ 7
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Leave_Sand_trap_ 8
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__4L_ 9
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Economic_ 10
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Auto_ 11
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Rock_ 12
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Off_road__ 13
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Sport__ 14
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Invalid_Value_ 15
#define TX_ESP2_HS_CAN_$_DrivingModeReq_ESP_SendType 0
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Standard_ 0
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Sport_ 1
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Snow_ 2
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Mud_ 3
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Sand_ 4
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Reserved_ 5
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Economic_ 6
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Mode_Unknown_ 7
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Reserved_ 8
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Sport__ 9
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Reserved_ 10
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Failed_ 14
#define TX_ESP2_HS_CAN_$_DrivingModeDis_$$__Invalid_Value_ 15
#define TX_ESP2_HS_CAN_$_DrivingModeDis_SendType 0
#define TX_ESP2_HS_CAN_$_RollingCounter_ESP2_SendType 0
#define TX_ESP2_HS_CAN_$_CTABrakeAvailable_$$__Not_Available_ 0
#define TX_ESP2_HS_CAN_$_CTABrakeAvailable_$$__Available_ 1
#define TX_ESP2_HS_CAN_$_CTABrakeAvailable_SendType 0
#pragma warning(default : 4005)

void TX_ESP2_HS_CAN_Init(TX_ESP2_HS_CAN * pMsg);
int TX_ESP2_HS_CAN_Transmit(TX_ESP2_HS_CAN * pMsg);
int TX_ESP2_HS_CAN_Transmit_raw(TX_ESP2_HS_CAN * pMsg);
int TX_ESP2_HS_CAN_UpdateBytesFromSignals(TX_ESP2_HS_CAN * pMsg);
int TX_ESP2_HS_CAN_UpdateBytesFromRawSignals(TX_ESP2_HS_CAN * pMsg);
#define TX_ESP2_HS_CAN_CheckSum_ESP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_CheckSum_ESP2_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 0, dval)
#define TX_ESP2_HS_CAN_SetSignal_CheckSum_ESP2_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 0, nval)
#define TX_ESP2_HS_CAN_VehicleStandstill_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_VehicleStandstill_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 1, dval)
#define TX_ESP2_HS_CAN_SetSignal_VehicleStandstill_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 1, nval)
#define TX_ESP2_HS_CAN_NoBrakeForce_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_NoBrakeForce_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 2, dval)
#define TX_ESP2_HS_CAN_SetSignal_NoBrakeForce_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 2, nval)
#define TX_ESP2_HS_CAN_BrakeDiskOverHeat_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_BrakeDiskOverHeat_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 3, dval)
#define TX_ESP2_HS_CAN_SetSignal_BrakeDiskOverHeat_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 3, nval)
#define TX_ESP2_HS_CAN_ABAactive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_ABAactive_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 4, dval)
#define TX_ESP2_HS_CAN_SetSignal_ABAactive_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 4, nval)
#define TX_ESP2_HS_CAN_ABAavailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_ABAavailable_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 5, dval)
#define TX_ESP2_HS_CAN_SetSignal_ABAavailable_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 5, nval)
#define TX_ESP2_HS_CAN_ABPActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 6, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_ABPActive_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 6, dval)
#define TX_ESP2_HS_CAN_SetSignal_ABPActive_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 6, nval)
#define TX_ESP2_HS_CAN_ABPAvailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 7, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_ABPAvailable_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 7, dval)
#define TX_ESP2_HS_CAN_SetSignal_ABPAvailable_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 7, nval)
#define TX_ESP2_HS_CAN_AEBAvailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 8, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_AEBAvailable_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 8, dval)
#define TX_ESP2_HS_CAN_SetSignal_AEBAvailable_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 8, nval)
#define TX_ESP2_HS_CAN_AEBBAActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 9, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_AEBBAActive_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 9, dval)
#define TX_ESP2_HS_CAN_SetSignal_AEBBAActive_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 9, nval)
#define TX_ESP2_HS_CAN_AEBIBActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 10, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_AEBIBActive_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 10, dval)
#define TX_ESP2_HS_CAN_SetSignal_AEBIBActive_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 10, nval)
#define TX_ESP2_HS_CAN_AWBactive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 11, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_AWBactive_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 11, dval)
#define TX_ESP2_HS_CAN_SetSignal_AWBactive_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 11, nval)
#define TX_ESP2_HS_CAN_AWBavailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 12, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_AWBavailable_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 12, dval)
#define TX_ESP2_HS_CAN_SetSignal_AWBavailable_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 12, nval)
#define TX_ESP2_HS_CAN_CDD_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 13, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_CDD_Available_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 13, dval)
#define TX_ESP2_HS_CAN_SetSignal_CDD_Available_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 13, nval)
#define TX_ESP2_HS_CAN_CDD_Active_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 14, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_CDD_Active_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 14, dval)
#define TX_ESP2_HS_CAN_SetSignal_CDD_Active_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 14, nval)
#define TX_ESP2_HS_CAN_HDCControl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 15, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_HDCControl_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 15, dval)
#define TX_ESP2_HS_CAN_SetSignal_HDCControl_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 15, nval)
#define TX_ESP2_HS_CAN_HDCFault_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 16, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_HDCFault_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 16, dval)
#define TX_ESP2_HS_CAN_SetSignal_HDCFault_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 16, nval)
#define TX_ESP2_HS_CAN_CDPActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 17, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_CDPActive_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 17, dval)
#define TX_ESP2_HS_CAN_SetSignal_CDPActive_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 17, nval)
#define TX_ESP2_HS_CAN_AVHSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 18, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_AVHSts_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 18, dval)
#define TX_ESP2_HS_CAN_SetSignal_AVHSts_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 18, nval)
#define TX_ESP2_HS_CAN_AVHerrorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 19, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_AVHerrorSts_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 19, dval)
#define TX_ESP2_HS_CAN_SetSignal_AVHerrorSts_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 19, nval)
#define TX_ESP2_HS_CAN_DrivingModeReq_ESP_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 20, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_DrivingModeReq_ESP_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 20, dval)
#define TX_ESP2_HS_CAN_SetSignal_DrivingModeReq_ESP_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 20, nval)
#define TX_ESP2_HS_CAN_DrivingModeDis_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 21, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_DrivingModeDis_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 21, dval)
#define TX_ESP2_HS_CAN_SetSignal_DrivingModeDis_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 21, nval)
#define TX_ESP2_HS_CAN_RollingCounter_ESP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 22, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_RollingCounter_ESP2_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 22, dval)
#define TX_ESP2_HS_CAN_SetSignal_RollingCounter_ESP2_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 22, nval)
#define TX_ESP2_HS_CAN_CTABrakeAvailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP2_HS_CAN_Index, 23, dPhysicalValue);
#define TX_ESP2_HS_CAN_SetSignal_CTABrakeAvailable_Physical(dval) SpySetTxSignal(TX_ESP2_HS_CAN_Index, 23, dval)
#define TX_ESP2_HS_CAN_SetSignal_CTABrakeAvailable_Raw(nval) SpySetTxSignalRaw(TX_ESP2_HS_CAN_Index, 23, nval)
int TX_ESP2_HS_CAN_TransmitFast();
#define TX_ESP2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ESP2_HS_CAN_Index, 0)
#define TX_ESP2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ESP2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_ESP7_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ESP7; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ESP7_raw;
    double ESP_MEBBrkAvail; /// Min: 0 Max: 1 Units: 
    BYTE ESP_MEBBrkAvail_raw;
    double LgtCtrlrAvail; /// Min: 0 Max: 1 Units: 
    BYTE LgtCtrlrAvail_raw;
    double LgtCtrlrFailr; /// Min: 0 Max: 1 Units: 
    BYTE LgtCtrlrFailr_raw;
    double LgtCtrlrSts; /// Min: 0 Max: 1 Units: 
    BYTE LgtCtrlrSts_raw;
    double RollingCounter_ESP7; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ESP7_raw;
} TX_ESP7_HS_CAN;

#define TX_ESP7_HS_CAN_SendType 0
#define TX_ESP7_HS_CAN_SendRate 20
#define TX_ESP7_HS_CAN_SendRateFast 0
#define TX_ESP7_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_ESP7_HS_CAN_$_CheckSum_ESP7_$$__Valid_values_ 0
#define TX_ESP7_HS_CAN_$_CheckSum_ESP7_SendType 0
#define TX_ESP7_HS_CAN_$_ESP_MEBBrkAvail_$$__Not_Available_ 0
#define TX_ESP7_HS_CAN_$_ESP_MEBBrkAvail_$$__Available_ 1
#define TX_ESP7_HS_CAN_$_ESP_MEBBrkAvail_SendType 0
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Not_Available_ 0
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 1
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 2
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 3
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 4
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__AutomaticPark_ 5
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 6
#define TX_ESP7_HS_CAN_$_LgtCtrlrAvail_SendType 0
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__No_Error_ 0
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Vehicle_Blocked_ 1
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Unexpected_GearPosition_ 2
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Unexpected_EPB_Action_ 3
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Reserved_ 4
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Unexpected_GearIntervention_ 5
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Reserved_ 6
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Invalid_ 7
#define TX_ESP7_HS_CAN_$_LgtCtrlrFailr_SendType 0
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Off_ 0
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Standby_ 1
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 2
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 3
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Active_AutomaticPark_ 4
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 5
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 6
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Invalid_ 7
#define TX_ESP7_HS_CAN_$_LgtCtrlrSts_SendType 0
#define TX_ESP7_HS_CAN_$_RollingCounter_ESP7_$$__Valid_value_ 0
#define TX_ESP7_HS_CAN_$_RollingCounter_ESP7_$$__Invalid_value_ 15
#define TX_ESP7_HS_CAN_$_RollingCounter_ESP7_SendType 0
#pragma warning(default : 4005)

void TX_ESP7_HS_CAN_Init(TX_ESP7_HS_CAN * pMsg);
int TX_ESP7_HS_CAN_Transmit(TX_ESP7_HS_CAN * pMsg);
int TX_ESP7_HS_CAN_Transmit_raw(TX_ESP7_HS_CAN * pMsg);
int TX_ESP7_HS_CAN_UpdateBytesFromSignals(TX_ESP7_HS_CAN * pMsg);
int TX_ESP7_HS_CAN_UpdateBytesFromRawSignals(TX_ESP7_HS_CAN * pMsg);
#define TX_ESP7_HS_CAN_CheckSum_ESP7_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP7_HS_CAN_Index, 0, dPhysicalValue);
#define TX_ESP7_HS_CAN_SetSignal_CheckSum_ESP7_Physical(dval) SpySetTxSignal(TX_ESP7_HS_CAN_Index, 0, dval)
#define TX_ESP7_HS_CAN_SetSignal_CheckSum_ESP7_Raw(nval) SpySetTxSignalRaw(TX_ESP7_HS_CAN_Index, 0, nval)
#define TX_ESP7_HS_CAN_ESP_MEBBrkAvail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP7_HS_CAN_Index, 1, dPhysicalValue);
#define TX_ESP7_HS_CAN_SetSignal_ESP_MEBBrkAvail_Physical(dval) SpySetTxSignal(TX_ESP7_HS_CAN_Index, 1, dval)
#define TX_ESP7_HS_CAN_SetSignal_ESP_MEBBrkAvail_Raw(nval) SpySetTxSignalRaw(TX_ESP7_HS_CAN_Index, 1, nval)
#define TX_ESP7_HS_CAN_LgtCtrlrAvail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP7_HS_CAN_Index, 2, dPhysicalValue);
#define TX_ESP7_HS_CAN_SetSignal_LgtCtrlrAvail_Physical(dval) SpySetTxSignal(TX_ESP7_HS_CAN_Index, 2, dval)
#define TX_ESP7_HS_CAN_SetSignal_LgtCtrlrAvail_Raw(nval) SpySetTxSignalRaw(TX_ESP7_HS_CAN_Index, 2, nval)
#define TX_ESP7_HS_CAN_LgtCtrlrFailr_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP7_HS_CAN_Index, 3, dPhysicalValue);
#define TX_ESP7_HS_CAN_SetSignal_LgtCtrlrFailr_Physical(dval) SpySetTxSignal(TX_ESP7_HS_CAN_Index, 3, dval)
#define TX_ESP7_HS_CAN_SetSignal_LgtCtrlrFailr_Raw(nval) SpySetTxSignalRaw(TX_ESP7_HS_CAN_Index, 3, nval)
#define TX_ESP7_HS_CAN_LgtCtrlrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP7_HS_CAN_Index, 4, dPhysicalValue);
#define TX_ESP7_HS_CAN_SetSignal_LgtCtrlrSts_Physical(dval) SpySetTxSignal(TX_ESP7_HS_CAN_Index, 4, dval)
#define TX_ESP7_HS_CAN_SetSignal_LgtCtrlrSts_Raw(nval) SpySetTxSignalRaw(TX_ESP7_HS_CAN_Index, 4, nval)
#define TX_ESP7_HS_CAN_RollingCounter_ESP7_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_ESP7_HS_CAN_Index, 5, dPhysicalValue);
#define TX_ESP7_HS_CAN_SetSignal_RollingCounter_ESP7_Physical(dval) SpySetTxSignal(TX_ESP7_HS_CAN_Index, 5, dval)
#define TX_ESP7_HS_CAN_SetSignal_RollingCounter_ESP7_Raw(nval) SpySetTxSignalRaw(TX_ESP7_HS_CAN_Index, 5, nval)
int TX_ESP7_HS_CAN_TransmitFast();
#define TX_ESP7_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_ESP7_HS_CAN_Index, 0)
#define TX_ESP7_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_ESP7_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_HUT15_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double HUT_APSPrkgModSeln; /// Min: 0 Max: 3 Units: 
    BYTE HUT_APSPrkgModSeln_raw;
    double APSPrkgTypSeln; /// Min: 0 Max: 3 Units: 
    BYTE APSPrkgTypSeln_raw;
    double APSSwtReq_VR; /// Min: 0 Max: 3 Units: 
    BYTE APSSwtReq_VR_raw;
    double SDWSwtSet; /// Min: 0 Max: 1 Units: 
    BYTE SDWSwtSet_raw;
} TX_HUT15_HS_CAN;

#define TX_HUT15_HS_CAN_SendType 2
#define TX_HUT15_HS_CAN_SendRateFast 0
#define TX_HUT15_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__No_Select_ 0
#define TX_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__Select_parking_in_ 1
#define TX_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__Select_parking_out_ 2
#define TX_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__Reserved_ 3
#define TX_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_SendType 1
#define TX_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__No_Select_ 0
#define TX_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__Select_parallel_parking_ 1
#define TX_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__Select_vertical_parking_ 2
#define TX_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__Reserved_ 3
#define TX_HUT15_HS_CAN_$_APSPrkgTypSeln_SendType 1
#define TX_HUT15_HS_CAN_$_APSSwtReq_VR_$$__No_action_ 0
#define TX_HUT15_HS_CAN_$_APSSwtReq_VR_$$__off_ 1
#define TX_HUT15_HS_CAN_$_APSSwtReq_VR_$$__on_ 2
#define TX_HUT15_HS_CAN_$_APSSwtReq_VR_$$__Reserved_ 3
#define TX_HUT15_HS_CAN_$_APSSwtReq_VR_SendType 1
#define TX_HUT15_HS_CAN_$_SDWSwtSet_$$__No_Request_ 0
#define TX_HUT15_HS_CAN_$_SDWSwtSet_$$__Request_ 1
#define TX_HUT15_HS_CAN_$_SDWSwtSet_SendType 1
#pragma warning(default : 4005)

void TX_HUT15_HS_CAN_Init(TX_HUT15_HS_CAN * pMsg);
int TX_HUT15_HS_CAN_Transmit(TX_HUT15_HS_CAN * pMsg);
int TX_HUT15_HS_CAN_Transmit_raw(TX_HUT15_HS_CAN * pMsg);
int TX_HUT15_HS_CAN_UpdateBytesFromSignals(TX_HUT15_HS_CAN * pMsg);
int TX_HUT15_HS_CAN_UpdateBytesFromRawSignals(TX_HUT15_HS_CAN * pMsg);
#define TX_HUT15_HS_CAN_HUT_APSPrkgModSeln_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT15_HS_CAN_Index, 0, dPhysicalValue);
#define TX_HUT15_HS_CAN_SetSignal_HUT_APSPrkgModSeln_Physical(dval) SpySetTxSignal(TX_HUT15_HS_CAN_Index, 0, dval)
#define TX_HUT15_HS_CAN_SetSignal_HUT_APSPrkgModSeln_Raw(nval) SpySetTxSignalRaw(TX_HUT15_HS_CAN_Index, 0, nval)
#define TX_HUT15_HS_CAN_APSPrkgTypSeln_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT15_HS_CAN_Index, 1, dPhysicalValue);
#define TX_HUT15_HS_CAN_SetSignal_APSPrkgTypSeln_Physical(dval) SpySetTxSignal(TX_HUT15_HS_CAN_Index, 1, dval)
#define TX_HUT15_HS_CAN_SetSignal_APSPrkgTypSeln_Raw(nval) SpySetTxSignalRaw(TX_HUT15_HS_CAN_Index, 1, nval)
#define TX_HUT15_HS_CAN_APSSwtReq_VR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT15_HS_CAN_Index, 2, dPhysicalValue);
#define TX_HUT15_HS_CAN_SetSignal_APSSwtReq_VR_Physical(dval) SpySetTxSignal(TX_HUT15_HS_CAN_Index, 2, dval)
#define TX_HUT15_HS_CAN_SetSignal_APSSwtReq_VR_Raw(nval) SpySetTxSignalRaw(TX_HUT15_HS_CAN_Index, 2, nval)
#define TX_HUT15_HS_CAN_SDWSwtSet_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT15_HS_CAN_Index, 3, dPhysicalValue);
#define TX_HUT15_HS_CAN_SetSignal_SDWSwtSet_Physical(dval) SpySetTxSignal(TX_HUT15_HS_CAN_Index, 3, dval)
#define TX_HUT15_HS_CAN_SetSignal_SDWSwtSet_Raw(nval) SpySetTxSignalRaw(TX_HUT15_HS_CAN_Index, 3, nval)
int TX_HUT15_HS_CAN_TransmitFast();
#define TX_HUT15_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_HUT15_HS_CAN_Index, 0)
#define TX_HUT15_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_HUT15_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_HUT32_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ScrnOpSts; /// Min: 0 Max: 3 Units: 
    BYTE ScrnOpSts_raw;
    double XLvl; /// Min: 0 Max: 1961 Units: 
    WORD XLvl_raw;
    double YLvl; /// Min: 0 Max: 721 Units: 
    WORD YLvl_raw;
    double DetVideoLost; /// Min: 0 Max: 1 Units: 
    BYTE DetVideoLost_raw;
    double CheckSum_HUT32; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_HUT32_raw;
    double PrkgCtrlModReqValid; /// Min: 0 Max: 1 Units: 
    BYTE PrkgCtrlModReqValid_raw;
    double PrkgCtrlModReq; /// Min: 0 Max: 3 Units: 
    BYTE PrkgCtrlModReq_raw;
    double ContnPrkgReqValid; /// Min: 0 Max: 1 Units: 
    BYTE ContnPrkgReqValid_raw;
    double ContnPrkgReq; /// Min: 0 Max: 1 Units: 
    BYTE ContnPrkgReq_raw;
    double RollingCounter_HUT32; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_HUT32_raw;
} TX_HUT32_HS_CAN;

#define TX_HUT32_HS_CAN_SendType 0
#define TX_HUT32_HS_CAN_SendRate 50
#define TX_HUT32_HS_CAN_SendRateFast 0
#define TX_HUT32_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_HUT32_HS_CAN_$_ScrnOpSts_$$__Release_ 0
#define TX_HUT32_HS_CAN_$_ScrnOpSts_$$__Pressed_ 1
#define TX_HUT32_HS_CAN_$_ScrnOpSts_$$__Hold_ 2
#define TX_HUT32_HS_CAN_$_ScrnOpSts_$$__Reserved_ 3
#define TX_HUT32_HS_CAN_$_ScrnOpSts_SendType 0
#define TX_HUT32_HS_CAN_$_XLvl_$$__Valid_value_ 0
#define TX_HUT32_HS_CAN_$_XLvl_$$__Invalid_ 1961
#define TX_HUT32_HS_CAN_$_XLvl_SendType 0
#define TX_HUT32_HS_CAN_$_YLvl_$$__Valid_value_ 0
#define TX_HUT32_HS_CAN_$_YLvl_$$__Invalid_ 721
#define TX_HUT32_HS_CAN_$_YLvl_SendType 0
#define TX_HUT32_HS_CAN_$_DetVideoLost_$$__Nomal_ 0
#define TX_HUT32_HS_CAN_$_DetVideoLost_$$__Video_lost_ 1
#define TX_HUT32_HS_CAN_$_DetVideoLost_SendType 0
#define TX_HUT32_HS_CAN_$_CheckSum_HUT32_$$__Valid_value_ 0
#define TX_HUT32_HS_CAN_$_CheckSum_HUT32_SendType 0
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReqValid_$$__valid_ 0
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReqValid_$$__invalid_ 1
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReqValid_SendType 0
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__No_action_ 0
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__Parking_in_car_ 1
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__Remote_parking_ 2
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__Reserved_ 3
#define TX_HUT32_HS_CAN_$_PrkgCtrlModReq_SendType 0
#define TX_HUT32_HS_CAN_$_ContnPrkgReqValid_$$__valid_ 0
#define TX_HUT32_HS_CAN_$_ContnPrkgReqValid_$$__invalid_ 1
#define TX_HUT32_HS_CAN_$_ContnPrkgReqValid_SendType 0
#define TX_HUT32_HS_CAN_$_ContnPrkgReq_$$_No_Action 0
#define TX_HUT32_HS_CAN_$_ContnPrkgReq_$$__cancle_parking_ 2
#define TX_HUT32_HS_CAN_$_ContnPrkgReq_$$__invalid_ 3
#define TX_HUT32_HS_CAN_$_ContnPrkgReq_$$_select_continue_parking_ 1
#define TX_HUT32_HS_CAN_$_ContnPrkgReq_SendType 0
#define TX_HUT32_HS_CAN_$_RollingCounter_HUT32_$$__Valid_value_ 0
#define TX_HUT32_HS_CAN_$_RollingCounter_HUT32_SendType 0
#pragma warning(default : 4005)

void TX_HUT32_HS_CAN_Init(TX_HUT32_HS_CAN * pMsg);
int TX_HUT32_HS_CAN_Transmit(TX_HUT32_HS_CAN * pMsg);
int TX_HUT32_HS_CAN_Transmit_raw(TX_HUT32_HS_CAN * pMsg);
int TX_HUT32_HS_CAN_UpdateBytesFromSignals(TX_HUT32_HS_CAN * pMsg);
int TX_HUT32_HS_CAN_UpdateBytesFromRawSignals(TX_HUT32_HS_CAN * pMsg);
#define TX_HUT32_HS_CAN_ScrnOpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 0, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_ScrnOpSts_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 0, dval)
#define TX_HUT32_HS_CAN_SetSignal_ScrnOpSts_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 0, nval)
#define TX_HUT32_HS_CAN_XLvl_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 1, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_XLvl_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 1, dval)
#define TX_HUT32_HS_CAN_SetSignal_XLvl_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 1, nval)
#define TX_HUT32_HS_CAN_YLvl_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 2, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_YLvl_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 2, dval)
#define TX_HUT32_HS_CAN_SetSignal_YLvl_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 2, nval)
#define TX_HUT32_HS_CAN_DetVideoLost_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 3, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_DetVideoLost_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 3, dval)
#define TX_HUT32_HS_CAN_SetSignal_DetVideoLost_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 3, nval)
#define TX_HUT32_HS_CAN_CheckSum_HUT32_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 4, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_CheckSum_HUT32_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 4, dval)
#define TX_HUT32_HS_CAN_SetSignal_CheckSum_HUT32_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 4, nval)
#define TX_HUT32_HS_CAN_PrkgCtrlModReqValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 5, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_PrkgCtrlModReqValid_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 5, dval)
#define TX_HUT32_HS_CAN_SetSignal_PrkgCtrlModReqValid_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 5, nval)
#define TX_HUT32_HS_CAN_PrkgCtrlModReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 6, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_PrkgCtrlModReq_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 6, dval)
#define TX_HUT32_HS_CAN_SetSignal_PrkgCtrlModReq_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 6, nval)
#define TX_HUT32_HS_CAN_ContnPrkgReqValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 7, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_ContnPrkgReqValid_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 7, dval)
#define TX_HUT32_HS_CAN_SetSignal_ContnPrkgReqValid_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 7, nval)
#define TX_HUT32_HS_CAN_ContnPrkgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 8, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_ContnPrkgReq_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 8, dval)
#define TX_HUT32_HS_CAN_SetSignal_ContnPrkgReq_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 8, nval)
#define TX_HUT32_HS_CAN_RollingCounter_HUT32_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT32_HS_CAN_Index, 9, dPhysicalValue);
#define TX_HUT32_HS_CAN_SetSignal_RollingCounter_HUT32_Physical(dval) SpySetTxSignal(TX_HUT32_HS_CAN_Index, 9, dval)
#define TX_HUT32_HS_CAN_SetSignal_RollingCounter_HUT32_Raw(nval) SpySetTxSignalRaw(TX_HUT32_HS_CAN_Index, 9, nval)
int TX_HUT32_HS_CAN_TransmitFast();
#define TX_HUT32_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_HUT32_HS_CAN_Index, 0)
#define TX_HUT32_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_HUT32_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_HUT33_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double PrkInDirChoice; /// Min: 0 Max: 7 Units: 
    BYTE PrkInDirChoice_raw;
    double PathLrngFinshCmd; /// Min: 0 Max: 1 Units: 
    BYTE PathLrngFinshCmd_raw;
    double PathLrngStartCmd; /// Min: 0 Max: 1 Units: 
    BYTE PathLrngStartCmd_raw;
    double SelPrkOutDirReq; /// Min: 0 Max: 7 Units: 
    BYTE SelPrkOutDirReq_raw;
    double StartPrkgPath2Cmd; /// Min: 0 Max: 1 Units: 
    BYTE StartPrkgPath2Cmd_raw;
    double DeletePath2Cmd; /// Min: 0 Max: 1 Units: 
    BYTE DeletePath2Cmd_raw;
    double StartPrkgPath1Cmd; /// Min: 0 Max: 1 Units: 
    BYTE StartPrkgPath1Cmd_raw;
    double DeletePath1Cmd; /// Min: 0 Max: 1 Units: 
    BYTE DeletePath1Cmd_raw;
    double SelPrkgFctnCmd; /// Min: 0 Max: 7 Units: 
    BYTE SelPrkgFctnCmd_raw;
    double ParkMdlCmd; /// Min: 0 Max: 1 Units: 
    BYTE ParkMdlCmd_raw;
    double BackReq_APS; /// Min: 0 Max: 1 Units: 
    BYTE BackReq_APS_raw;
} TX_HUT33_HS_CAN;

#define TX_HUT33_HS_CAN_SendType 2
#define TX_HUT33_HS_CAN_SendRateFast 0
#define TX_HUT33_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_HUT33_HS_CAN_$_PrkInDirChoice_$$__None_ 0
#define TX_HUT33_HS_CAN_$_PrkInDirChoice_$$__Tail_in_ 1
#define TX_HUT33_HS_CAN_$_PrkInDirChoice_$$__Head_in__ 2
#define TX_HUT33_HS_CAN_$_PrkInDirChoice_$$__Reserved_ 3
#define TX_HUT33_HS_CAN_$_PrkInDirChoice_SendType 1
#define TX_HUT33_HS_CAN_$_PathLrngFinshCmd_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_PathLrngFinshCmd_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_PathLrngFinshCmd_SendType 1
#define TX_HUT33_HS_CAN_$_PathLrngStartCmd_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_PathLrngStartCmd_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_PathLrngStartCmd_SendType 1
#define TX_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__No_selection_ 0
#define TX_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_front_vertical_head_out_ 1
#define TX_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_rear_vertical_tail_out_ 2
#define TX_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_left_parallel_left_out__ 3
#define TX_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_right_parallel_right_out_ 4
#define TX_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Reserved_ 5
#define TX_HUT33_HS_CAN_$_SelPrkOutDirReq_SendType 1
#define TX_HUT33_HS_CAN_$_StartPrkgPath2Cmd_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_StartPrkgPath2Cmd_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_StartPrkgPath2Cmd_SendType 1
#define TX_HUT33_HS_CAN_$_DeletePath2Cmd_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_DeletePath2Cmd_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_DeletePath2Cmd_SendType 1
#define TX_HUT33_HS_CAN_$_StartPrkgPath1Cmd_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_StartPrkgPath1Cmd_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_StartPrkgPath1Cmd_SendType 1
#define TX_HUT33_HS_CAN_$_DeletePath1Cmd_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_DeletePath1Cmd_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_DeletePath1Cmd_SendType 1
#define TX_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__No_selection_ 0
#define TX_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_APA_parking_ 1
#define TX_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_P2P_parking_ 2
#define TX_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_Explore_Forward_ 3
#define TX_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_drive_back_ 4
#define TX_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Reserved_ 5
#define TX_HUT33_HS_CAN_$_SelPrkgFctnCmd_SendType 1
#define TX_HUT33_HS_CAN_$_ParkMdlCmd_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_ParkMdlCmd_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_ParkMdlCmd_SendType 1
#define TX_HUT33_HS_CAN_$_BackReq_APS_$$__No_request_ 0
#define TX_HUT33_HS_CAN_$_BackReq_APS_$$__Request_ 1
#define TX_HUT33_HS_CAN_$_BackReq_APS_SendType 1
#pragma warning(default : 4005)

void TX_HUT33_HS_CAN_Init(TX_HUT33_HS_CAN * pMsg);
int TX_HUT33_HS_CAN_Transmit(TX_HUT33_HS_CAN * pMsg);
int TX_HUT33_HS_CAN_Transmit_raw(TX_HUT33_HS_CAN * pMsg);
int TX_HUT33_HS_CAN_UpdateBytesFromSignals(TX_HUT33_HS_CAN * pMsg);
int TX_HUT33_HS_CAN_UpdateBytesFromRawSignals(TX_HUT33_HS_CAN * pMsg);
#define TX_HUT33_HS_CAN_PrkInDirChoice_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 0, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_PrkInDirChoice_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 0, dval)
#define TX_HUT33_HS_CAN_SetSignal_PrkInDirChoice_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 0, nval)
#define TX_HUT33_HS_CAN_PathLrngFinshCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 1, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_PathLrngFinshCmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 1, dval)
#define TX_HUT33_HS_CAN_SetSignal_PathLrngFinshCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 1, nval)
#define TX_HUT33_HS_CAN_PathLrngStartCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 2, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_PathLrngStartCmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 2, dval)
#define TX_HUT33_HS_CAN_SetSignal_PathLrngStartCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 2, nval)
#define TX_HUT33_HS_CAN_SelPrkOutDirReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 3, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_SelPrkOutDirReq_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 3, dval)
#define TX_HUT33_HS_CAN_SetSignal_SelPrkOutDirReq_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 3, nval)
#define TX_HUT33_HS_CAN_StartPrkgPath2Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 4, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_StartPrkgPath2Cmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 4, dval)
#define TX_HUT33_HS_CAN_SetSignal_StartPrkgPath2Cmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 4, nval)
#define TX_HUT33_HS_CAN_DeletePath2Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 5, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_DeletePath2Cmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 5, dval)
#define TX_HUT33_HS_CAN_SetSignal_DeletePath2Cmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 5, nval)
#define TX_HUT33_HS_CAN_StartPrkgPath1Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 6, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_StartPrkgPath1Cmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 6, dval)
#define TX_HUT33_HS_CAN_SetSignal_StartPrkgPath1Cmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 6, nval)
#define TX_HUT33_HS_CAN_DeletePath1Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 7, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_DeletePath1Cmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 7, dval)
#define TX_HUT33_HS_CAN_SetSignal_DeletePath1Cmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 7, nval)
#define TX_HUT33_HS_CAN_SelPrkgFctnCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 8, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_SelPrkgFctnCmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 8, dval)
#define TX_HUT33_HS_CAN_SetSignal_SelPrkgFctnCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 8, nval)
#define TX_HUT33_HS_CAN_ParkMdlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 9, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_ParkMdlCmd_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 9, dval)
#define TX_HUT33_HS_CAN_SetSignal_ParkMdlCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 9, nval)
#define TX_HUT33_HS_CAN_BackReq_APS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT33_HS_CAN_Index, 10, dPhysicalValue);
#define TX_HUT33_HS_CAN_SetSignal_BackReq_APS_Physical(dval) SpySetTxSignal(TX_HUT33_HS_CAN_Index, 10, dval)
#define TX_HUT33_HS_CAN_SetSignal_BackReq_APS_Raw(nval) SpySetTxSignalRaw(TX_HUT33_HS_CAN_Index, 10, nval)
int TX_HUT33_HS_CAN_TransmitFast();
#define TX_HUT33_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_HUT33_HS_CAN_Index, 0)
#define TX_HUT33_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_HUT33_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_HUT7_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double TimeSet_Hour; /// Min: 0 Max: 31 Units: 
    BYTE TimeSet_Hour_raw;
    double TimeSet_Minutes; /// Min: 0 Max: 63 Units: 
    BYTE TimeSet_Minutes_raw;
    double TimeSet_Second; /// Min: 0 Max: 63 Units: 
    BYTE TimeSet_Second_raw;
    double TimeSet_Year_Left; /// Min: 0 Max: 15 Units: 
    BYTE TimeSet_Year_Left_raw;
    double TimeSet_Year_Right; /// Min: 0 Max: 15 Units: 
    BYTE TimeSet_Year_Right_raw;
    double TimeSet_Month; /// Min: 0 Max: 15 Units: 
    BYTE TimeSet_Month_raw;
    double TimeSet_Day; /// Min: 0 Max: 31 Units: 
    BYTE TimeSet_Day_raw;
    double TimIndcn; /// Min: 0 Max: 1 Units: 
    BYTE TimIndcn_raw;
    double TimeMod; /// Min: 0 Max: 1 Units: 
    BYTE TimeMod_raw;
} TX_HUT7_HS_CAN;

#define TX_HUT7_HS_CAN_SendType 2
#define TX_HUT7_HS_CAN_SendRateFast 0
#define TX_HUT7_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_HUT7_HS_CAN_$_TimeSet_Hour_$$__Valid_hour_ 0
#define TX_HUT7_HS_CAN_$_TimeSet_Hour_$$__Invalid_ 24
#define TX_HUT7_HS_CAN_$_TimeSet_Hour_SendType 1
#define TX_HUT7_HS_CAN_$_TimeSet_Minutes_$$__Valid_min_ 0
#define TX_HUT7_HS_CAN_$_TimeSet_Minutes_$$__Invalid_ 60
#define TX_HUT7_HS_CAN_$_TimeSet_Minutes_SendType 1
#define TX_HUT7_HS_CAN_$_TimeSet_Second_$$__Valid_second_ 0
#define TX_HUT7_HS_CAN_$_TimeSet_Second_$$__Invalid_ 60
#define TX_HUT7_HS_CAN_$_TimeSet_Second_SendType 1
#define TX_HUT7_HS_CAN_$_TimeSet_Year_Left_$$__Valid_ 0
#define TX_HUT7_HS_CAN_$_TimeSet_Year_Left_$$__Invalid_ 10
#define TX_HUT7_HS_CAN_$_TimeSet_Year_Left_SendType 1
#define TX_HUT7_HS_CAN_$_TimeSet_Year_Right_$$__Valid_year_ 0
#define TX_HUT7_HS_CAN_$_TimeSet_Year_Right_$$__Invalid_ 10
#define TX_HUT7_HS_CAN_$_TimeSet_Year_Right_SendType 1
#define TX_HUT7_HS_CAN_$_TimeSet_Month_$$__Invalid_ 0
#define TX_HUT7_HS_CAN_$_TimeSet_Month_$$__Valid_month_ 1
#define TX_HUT7_HS_CAN_$_TimeSet_Month_$$__Reserved_ 13
#define TX_HUT7_HS_CAN_$_TimeSet_Month_SendType 1
#define TX_HUT7_HS_CAN_$_TimeSet_Day_$$__Invalid_ 0
#define TX_HUT7_HS_CAN_$_TimeSet_Day_$$__Valid_day_ 1
#define TX_HUT7_HS_CAN_$_TimeSet_Day_SendType 1
#define TX_HUT7_HS_CAN_$_TimIndcn_$$__am_ 0
#define TX_HUT7_HS_CAN_$_TimIndcn_$$__pm_ 1
#define TX_HUT7_HS_CAN_$_TimIndcn_SendType 1
#define TX_HUT7_HS_CAN_$_TimeMod_$$__24_ 0
#define TX_HUT7_HS_CAN_$_TimeMod_$$__12_ 1
#define TX_HUT7_HS_CAN_$_TimeMod_SendType 1
#pragma warning(default : 4005)

void TX_HUT7_HS_CAN_Init(TX_HUT7_HS_CAN * pMsg);
int TX_HUT7_HS_CAN_Transmit(TX_HUT7_HS_CAN * pMsg);
int TX_HUT7_HS_CAN_Transmit_raw(TX_HUT7_HS_CAN * pMsg);
int TX_HUT7_HS_CAN_UpdateBytesFromSignals(TX_HUT7_HS_CAN * pMsg);
int TX_HUT7_HS_CAN_UpdateBytesFromRawSignals(TX_HUT7_HS_CAN * pMsg);
#define TX_HUT7_HS_CAN_TimeSet_Hour_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 0, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Hour_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 0, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Hour_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 0, nval)
#define TX_HUT7_HS_CAN_TimeSet_Minutes_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 1, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Minutes_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 1, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Minutes_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 1, nval)
#define TX_HUT7_HS_CAN_TimeSet_Second_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 2, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Second_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 2, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Second_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 2, nval)
#define TX_HUT7_HS_CAN_TimeSet_Year_Left_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 3, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Year_Left_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 3, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Year_Left_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 3, nval)
#define TX_HUT7_HS_CAN_TimeSet_Year_Right_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 4, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Year_Right_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 4, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Year_Right_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 4, nval)
#define TX_HUT7_HS_CAN_TimeSet_Month_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 5, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Month_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 5, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Month_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 5, nval)
#define TX_HUT7_HS_CAN_TimeSet_Day_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 6, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Day_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 6, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeSet_Day_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 6, nval)
#define TX_HUT7_HS_CAN_TimIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 7, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimIndcn_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 7, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimIndcn_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 7, nval)
#define TX_HUT7_HS_CAN_TimeMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT7_HS_CAN_Index, 8, dPhysicalValue);
#define TX_HUT7_HS_CAN_SetSignal_TimeMod_Physical(dval) SpySetTxSignal(TX_HUT7_HS_CAN_Index, 8, dval)
#define TX_HUT7_HS_CAN_SetSignal_TimeMod_Raw(nval) SpySetTxSignalRaw(TX_HUT7_HS_CAN_Index, 8, nval)
int TX_HUT7_HS_CAN_TransmitFast();
#define TX_HUT7_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_HUT7_HS_CAN_Index, 0)
#define TX_HUT7_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_HUT7_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_PDCM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RSDS_Right_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Right_LED_status_raw;
} TX_PDCM1_HS_CAN;

#define TX_PDCM1_HS_CAN_SendType 0
#define TX_PDCM1_HS_CAN_SendRate 100
#define TX_PDCM1_HS_CAN_SendRateFast 0
#define TX_PDCM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_PDCM1_HS_CAN_$_RSDS_Right_LED_status_$$__no_error_ 0
#define TX_PDCM1_HS_CAN_$_RSDS_Right_LED_status_$$__error_ 1
#define TX_PDCM1_HS_CAN_$_RSDS_Right_LED_status_SendType 0
#pragma warning(default : 4005)

void TX_PDCM1_HS_CAN_Init(TX_PDCM1_HS_CAN * pMsg);
int TX_PDCM1_HS_CAN_Transmit(TX_PDCM1_HS_CAN * pMsg);
int TX_PDCM1_HS_CAN_Transmit_raw(TX_PDCM1_HS_CAN * pMsg);
int TX_PDCM1_HS_CAN_UpdateBytesFromSignals(TX_PDCM1_HS_CAN * pMsg);
int TX_PDCM1_HS_CAN_UpdateBytesFromRawSignals(TX_PDCM1_HS_CAN * pMsg);
#define TX_PDCM1_HS_CAN_RSDS_Right_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_PDCM1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_PDCM1_HS_CAN_SetSignal_RSDS_Right_LED_status_Physical(dval) SpySetTxSignal(TX_PDCM1_HS_CAN_Index, 0, dval)
#define TX_PDCM1_HS_CAN_SetSignal_RSDS_Right_LED_status_Raw(nval) SpySetTxSignalRaw(TX_PDCM1_HS_CAN_Index, 0, nval)
int TX_PDCM1_HS_CAN_TransmitFast();
#define TX_PDCM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_PDCM1_HS_CAN_Index, 0)
#define TX_PDCM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_PDCM1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_PEPS2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double SystemPowerMode; /// Min: 0 Max: 3 Units: 
    BYTE SystemPowerMode_raw;
    double SystemPowerModeValid; /// Min: 0 Max: 1 Units: 
    BYTE SystemPowerModeValid_raw;
    double PEPS_PROStat; /// Min: 0 Max: 7 Units: 
    BYTE PEPS_PROStat_raw;
} TX_PEPS2_HS_CAN;

#define TX_PEPS2_HS_CAN_SendType 0
#define TX_PEPS2_HS_CAN_SendRate 50
#define TX_PEPS2_HS_CAN_SendRateFast 0
#define TX_PEPS2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_PEPS2_HS_CAN_$_SystemPowerMode_$$__OFF_ 0
#define TX_PEPS2_HS_CAN_$_SystemPowerMode_$$__ACC_ 1
#define TX_PEPS2_HS_CAN_$_SystemPowerMode_$$__ON_ 2
#define TX_PEPS2_HS_CAN_$_SystemPowerMode_$$__Crank_ 3
#define TX_PEPS2_HS_CAN_$_SystemPowerMode_SendType 0
#define TX_PEPS2_HS_CAN_$_SystemPowerModeValid_$$__Invalid_ 0
#define TX_PEPS2_HS_CAN_$_SystemPowerModeValid_$$__Valid_ 1
#define TX_PEPS2_HS_CAN_$_SystemPowerModeValid_SendType 0
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC___IGN1___IGN2_are_disconnected_ 0
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC_connected__others_are_disconnected_ 1
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN2_connected__others_are_disconnected_ 2
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC___IGN2_connected__IGN1_disconnected_ 3
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN1_connected__others_are_disconnected_ 4
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN1___ACC_connected__IGN2_disconnected_ 5
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN1___IGN2_connected__ACC_disconnected_ 6
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC___IGN1___IGN2_connected_ 7
#define TX_PEPS2_HS_CAN_$_PEPS_PROStat_SendType 0
#pragma warning(default : 4005)

void TX_PEPS2_HS_CAN_Init(TX_PEPS2_HS_CAN * pMsg);
int TX_PEPS2_HS_CAN_Transmit(TX_PEPS2_HS_CAN * pMsg);
int TX_PEPS2_HS_CAN_Transmit_raw(TX_PEPS2_HS_CAN * pMsg);
int TX_PEPS2_HS_CAN_UpdateBytesFromSignals(TX_PEPS2_HS_CAN * pMsg);
int TX_PEPS2_HS_CAN_UpdateBytesFromRawSignals(TX_PEPS2_HS_CAN * pMsg);
#define TX_PEPS2_HS_CAN_SystemPowerMode_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_PEPS2_HS_CAN_Index, 0, dPhysicalValue);
#define TX_PEPS2_HS_CAN_SetSignal_SystemPowerMode_Physical(dval) SpySetTxSignal(TX_PEPS2_HS_CAN_Index, 0, dval)
#define TX_PEPS2_HS_CAN_SetSignal_SystemPowerMode_Raw(nval) SpySetTxSignalRaw(TX_PEPS2_HS_CAN_Index, 0, nval)
#define TX_PEPS2_HS_CAN_SystemPowerModeValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_PEPS2_HS_CAN_Index, 1, dPhysicalValue);
#define TX_PEPS2_HS_CAN_SetSignal_SystemPowerModeValid_Physical(dval) SpySetTxSignal(TX_PEPS2_HS_CAN_Index, 1, dval)
#define TX_PEPS2_HS_CAN_SetSignal_SystemPowerModeValid_Raw(nval) SpySetTxSignalRaw(TX_PEPS2_HS_CAN_Index, 1, nval)
#define TX_PEPS2_HS_CAN_PEPS_PROStat_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_PEPS2_HS_CAN_Index, 2, dPhysicalValue);
#define TX_PEPS2_HS_CAN_SetSignal_PEPS_PROStat_Physical(dval) SpySetTxSignal(TX_PEPS2_HS_CAN_Index, 2, dval)
#define TX_PEPS2_HS_CAN_SetSignal_PEPS_PROStat_Raw(nval) SpySetTxSignalRaw(TX_PEPS2_HS_CAN_Index, 2, nval)
int TX_PEPS2_HS_CAN_TransmitFast();
#define TX_PEPS2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_PEPS2_HS_CAN_Index, 0)
#define TX_PEPS2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_PEPS2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_SAS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_SAS1; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_SAS1_raw;
    double SteerWheelAngle; /// Min: 0 Max: 32767 Units: ?
    WORD SteerWheelAngle_raw;
    double SteerWheelAngleSign; /// Min: 0 Max: 1 Units: 
    BYTE SteerWheelAngleSign_raw;
    double SteerWheelSpd; /// Min: 0 Max: 1016 Units: ?s
    WORD SteerWheelSpd_raw;
    double SteerWheelSpdSign; /// Min: 0 Max: 1 Units: 
    BYTE SteerWheelSpdSign_raw;
    double SAS_Generation; /// Min: 0 Max: 254 Units: 
    BYTE SAS_Generation_raw;
    double SAS_Sts; /// Min: 0 Max: 3 Units: 
    BYTE SAS_Sts_raw;
    double RollingCounter_SAS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_SAS1_raw;
} TX_SAS1_HS_CAN;

#define TX_SAS1_HS_CAN_SendType 0
#define TX_SAS1_HS_CAN_SendRate 10
#define TX_SAS1_HS_CAN_SendRateFast 0
#define TX_SAS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_SAS1_HS_CAN_$_Checksum_SAS1_$$__Valid_value_ 0
#define TX_SAS1_HS_CAN_$_Checksum_SAS1_SendType 0
#define TX_SAS1_HS_CAN_$_SteerWheelAngle_$$__Valid_ 0
#define TX_SAS1_HS_CAN_$_SteerWheelAngle_$$__Reserved_ 7801
#define TX_SAS1_HS_CAN_$_SteerWheelAngle_$$__Invalid_ 32767
#define TX_SAS1_HS_CAN_$_SteerWheelAngle_SendType 0
#define TX_SAS1_HS_CAN_$_SteerWheelAngleSign_$$__Left__Positive__ 0
#define TX_SAS1_HS_CAN_$_SteerWheelAngleSign_$$__Right__Negative__ 1
#define TX_SAS1_HS_CAN_$_SteerWheelAngleSign_SendType 0
#define TX_SAS1_HS_CAN_$_SteerWheelSpd_$$__Valid_ 0
#define TX_SAS1_HS_CAN_$_SteerWheelSpd_$$__Reserved_ 10161
#define TX_SAS1_HS_CAN_$_SteerWheelSpd_$$__Invalid_ 32767
#define TX_SAS1_HS_CAN_$_SteerWheelSpd_SendType 0
#define TX_SAS1_HS_CAN_$_SteerWheelSpdSign_$$__Left__Positive__ 0
#define TX_SAS1_HS_CAN_$_SteerWheelSpdSign_$$__Right__Negative__ 1
#define TX_SAS1_HS_CAN_$_SteerWheelSpdSign_SendType 0
#define TX_SAS1_HS_CAN_$_SAS_Generation_$$__Valid_value_ 0
#define TX_SAS1_HS_CAN_$_SAS_Generation_$$__Invalid_value_ 255
#define TX_SAS1_HS_CAN_$_SAS_Generation_SendType 0
#define TX_SAS1_HS_CAN_$_SAS_Sts_$$__SAS_Angle_And_Speed_Correct_ 0
#define TX_SAS1_HS_CAN_$_SAS_Sts_$$__SAS_Not_Calibrated_ 1
#define TX_SAS1_HS_CAN_$_SAS_Sts_$$__Intermittent_Error_Detected_ 2
#define TX_SAS1_HS_CAN_$_SAS_Sts_$$__Permanent_Error_Detected_ 3
#define TX_SAS1_HS_CAN_$_SAS_Sts_SendType 0
#define TX_SAS1_HS_CAN_$_RollingCounter_SAS1_$$__Valid_value_ 0
#define TX_SAS1_HS_CAN_$_RollingCounter_SAS1_SendType 0
#pragma warning(default : 4005)

void TX_SAS1_HS_CAN_Init(TX_SAS1_HS_CAN * pMsg);
int TX_SAS1_HS_CAN_Transmit(TX_SAS1_HS_CAN * pMsg);
int TX_SAS1_HS_CAN_Transmit_raw(TX_SAS1_HS_CAN * pMsg);
int TX_SAS1_HS_CAN_UpdateBytesFromSignals(TX_SAS1_HS_CAN * pMsg);
int TX_SAS1_HS_CAN_UpdateBytesFromRawSignals(TX_SAS1_HS_CAN * pMsg);
#define TX_SAS1_HS_CAN_Checksum_SAS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_Checksum_SAS1_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 0, dval)
#define TX_SAS1_HS_CAN_SetSignal_Checksum_SAS1_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 0, nval)
#define TX_SAS1_HS_CAN_SteerWheelAngle_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelAngle_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 1, dval)
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelAngle_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 1, nval)
#define TX_SAS1_HS_CAN_SteerWheelAngleSign_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelAngleSign_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 2, dval)
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelAngleSign_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 2, nval)
#define TX_SAS1_HS_CAN_SteerWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelSpd_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 3, dval)
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelSpd_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 3, nval)
#define TX_SAS1_HS_CAN_SteerWheelSpdSign_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelSpdSign_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 4, dval)
#define TX_SAS1_HS_CAN_SetSignal_SteerWheelSpdSign_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 4, nval)
#define TX_SAS1_HS_CAN_SAS_Generation_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_SAS_Generation_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 5, dval)
#define TX_SAS1_HS_CAN_SetSignal_SAS_Generation_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 5, nval)
#define TX_SAS1_HS_CAN_SAS_Sts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_SAS_Sts_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 6, dval)
#define TX_SAS1_HS_CAN_SetSignal_SAS_Sts_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 6, nval)
#define TX_SAS1_HS_CAN_RollingCounter_SAS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_SAS1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_SAS1_HS_CAN_SetSignal_RollingCounter_SAS1_Physical(dval) SpySetTxSignal(TX_SAS1_HS_CAN_Index, 7, dval)
#define TX_SAS1_HS_CAN_SetSignal_RollingCounter_SAS1_Raw(nval) SpySetTxSignalRaw(TX_SAS1_HS_CAN_Index, 7, nval)
int TX_SAS1_HS_CAN_TransmitFast();
#define TX_SAS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_SAS1_HS_CAN_Index, 0)
#define TX_SAS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_SAS1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_IP2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_IP2; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_IP2_raw;
    double RollingCounter_IP2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_IP2_raw;
    double DrvSeatBeltWarnLmpFailrSts; /// Min: 0 Max: 3 Units: 
    BYTE DrvSeatBeltWarnLmpFailrSts_raw;
    double PassSeatBeltWarnLmpFailrSts; /// Min: 0 Max: 3 Units: 
    BYTE PassSeatBeltWarnLmpFailrSts_raw;
    double VehTotDistance; /// Min: 0 Max: 999999 Units: Km
    DWORD VehTotDistance_raw;
    double FuelLvl; /// Min: 0 Max: 200 Units: L
    BYTE FuelLvl_raw;
    double QDashACCFail; /// Min: 0 Max: 1 Units: 
    BYTE QDashACCFail_raw;
    double VehTotDistanceValid; /// Min: 0 Max: 1 Units: 
    BYTE VehTotDistanceValid_raw;
    double FuelLvlLowLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE FuelLvlLowLmpSts_raw;
    double BattChrgLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE BattChrgLmpSts_raw;
    double EngOilPressLowLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE EngOilPressLowLmpSts_raw;
    double ABMWarnLmpFailrSts; /// Min: 0 Max: 3 Units: 
    BYTE ABMWarnLmpFailrSts_raw;
    double VehSpdUnit; /// Min: 0 Max: 1 Units: 
    BYTE VehSpdUnit_raw;
    double IP_Err; /// Min: 0 Max: 1 Units: 
    BYTE IP_Err_raw;
} TX_IP2_HS_CAN;

#define TX_IP2_HS_CAN_SendType 0
#define TX_IP2_HS_CAN_SendRate 50
#define TX_IP2_HS_CAN_SendRateFast 0
#define TX_IP2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_IP2_HS_CAN_$_Checksum_IP2_$$__valid_value_ 0
#define TX_IP2_HS_CAN_$_Checksum_IP2_SendType 0
#define TX_IP2_HS_CAN_$_RollingCounter_IP2_$$__Valid_value_ 0
#define TX_IP2_HS_CAN_$_RollingCounter_IP2_SendType 0
#define TX_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__No_failure_ 0
#define TX_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__Failure_ 1
#define TX_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__Signal_not_available_ 2
#define TX_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__Reserved_ 3
#define TX_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_SendType 0
#define TX_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__No_failure_ 0
#define TX_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__Failure_ 1
#define TX_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__Signal_not_available_ 2
#define TX_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__Reserved_ 3
#define TX_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_SendType 0
#define TX_IP2_HS_CAN_$_VehTotDistance_$$__0_999999__km_ 0
#define TX_IP2_HS_CAN_$_VehTotDistance_$$__Invalid_ 1000000
#define TX_IP2_HS_CAN_$_VehTotDistance_SendType 0
#define TX_IP2_HS_CAN_$_FuelLvl_$$__Valid_ 0
#define TX_IP2_HS_CAN_$_FuelLvl_$$__Reserved_ 201
#define TX_IP2_HS_CAN_$_FuelLvl_$$__Invalid_Value_ 255
#define TX_IP2_HS_CAN_$_FuelLvl_SendType 0
#define TX_IP2_HS_CAN_$_QDashACCFail_$$__No_error_ 0
#define TX_IP2_HS_CAN_$_QDashACCFail_$$__Error_ 1
#define TX_IP2_HS_CAN_$_QDashACCFail_SendType 0
#define TX_IP2_HS_CAN_$_VehTotDistanceValid_$$__Invalid_ 0
#define TX_IP2_HS_CAN_$_VehTotDistanceValid_$$__Valid_ 1
#define TX_IP2_HS_CAN_$_VehTotDistanceValid_SendType 0
#define TX_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__OFF_ 0
#define TX_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__ON_ 1
#define TX_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__Internal_Error_ 2
#define TX_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__Reserved_ 3
#define TX_IP2_HS_CAN_$_FuelLvlLowLmpSts_SendType 0
#define TX_IP2_HS_CAN_$_BattChrgLmpSts_$$__OFF_ 0
#define TX_IP2_HS_CAN_$_BattChrgLmpSts_$$__ON_ 1
#define TX_IP2_HS_CAN_$_BattChrgLmpSts_$$__Internal_Error_ 2
#define TX_IP2_HS_CAN_$_BattChrgLmpSts_$$__Reserved_ 3
#define TX_IP2_HS_CAN_$_BattChrgLmpSts_SendType 0
#define TX_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__OFF_ 0
#define TX_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__ON_ 1
#define TX_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__Internal_Error_ 2
#define TX_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__Reserved_ 3
#define TX_IP2_HS_CAN_$_EngOilPressLowLmpSts_SendType 0
#define TX_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__No_failure_ 0
#define TX_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__Failure_ 1
#define TX_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__Signal_not_available_ 2
#define TX_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__Reserved_ 3
#define TX_IP2_HS_CAN_$_ABMWarnLmpFailrSts_SendType 0
#define TX_IP2_HS_CAN_$_VehSpdUnit_$$__kph_ 0
#define TX_IP2_HS_CAN_$_VehSpdUnit_$$__mph_ 1
#define TX_IP2_HS_CAN_$_VehSpdUnit_SendType 0
#define TX_IP2_HS_CAN_$_IP_Err_$$__No_error_ 0
#define TX_IP2_HS_CAN_$_IP_Err_$$__Error_ 1
#define TX_IP2_HS_CAN_$_IP_Err_SendType 0
#pragma warning(default : 4005)

void TX_IP2_HS_CAN_Init(TX_IP2_HS_CAN * pMsg);
int TX_IP2_HS_CAN_Transmit(TX_IP2_HS_CAN * pMsg);
int TX_IP2_HS_CAN_Transmit_raw(TX_IP2_HS_CAN * pMsg);
int TX_IP2_HS_CAN_UpdateBytesFromSignals(TX_IP2_HS_CAN * pMsg);
int TX_IP2_HS_CAN_UpdateBytesFromRawSignals(TX_IP2_HS_CAN * pMsg);
#define TX_IP2_HS_CAN_Checksum_IP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 0, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_Checksum_IP2_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 0, dval)
#define TX_IP2_HS_CAN_SetSignal_Checksum_IP2_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 0, nval)
#define TX_IP2_HS_CAN_RollingCounter_IP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 1, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_RollingCounter_IP2_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 1, dval)
#define TX_IP2_HS_CAN_SetSignal_RollingCounter_IP2_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 1, nval)
#define TX_IP2_HS_CAN_DrvSeatBeltWarnLmpFailrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 2, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_DrvSeatBeltWarnLmpFailrSts_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 2, dval)
#define TX_IP2_HS_CAN_SetSignal_DrvSeatBeltWarnLmpFailrSts_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 2, nval)
#define TX_IP2_HS_CAN_PassSeatBeltWarnLmpFailrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 3, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_PassSeatBeltWarnLmpFailrSts_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 3, dval)
#define TX_IP2_HS_CAN_SetSignal_PassSeatBeltWarnLmpFailrSts_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 3, nval)
#define TX_IP2_HS_CAN_VehTotDistance_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 4, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_VehTotDistance_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 4, dval)
#define TX_IP2_HS_CAN_SetSignal_VehTotDistance_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 4, nval)
#define TX_IP2_HS_CAN_FuelLvl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 5, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_FuelLvl_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 5, dval)
#define TX_IP2_HS_CAN_SetSignal_FuelLvl_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 5, nval)
#define TX_IP2_HS_CAN_QDashACCFail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 6, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_QDashACCFail_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 6, dval)
#define TX_IP2_HS_CAN_SetSignal_QDashACCFail_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 6, nval)
#define TX_IP2_HS_CAN_VehTotDistanceValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 7, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_VehTotDistanceValid_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 7, dval)
#define TX_IP2_HS_CAN_SetSignal_VehTotDistanceValid_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 7, nval)
#define TX_IP2_HS_CAN_FuelLvlLowLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 8, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_FuelLvlLowLmpSts_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 8, dval)
#define TX_IP2_HS_CAN_SetSignal_FuelLvlLowLmpSts_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 8, nval)
#define TX_IP2_HS_CAN_BattChrgLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 9, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_BattChrgLmpSts_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 9, dval)
#define TX_IP2_HS_CAN_SetSignal_BattChrgLmpSts_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 9, nval)
#define TX_IP2_HS_CAN_EngOilPressLowLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 10, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_EngOilPressLowLmpSts_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 10, dval)
#define TX_IP2_HS_CAN_SetSignal_EngOilPressLowLmpSts_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 10, nval)
#define TX_IP2_HS_CAN_ABMWarnLmpFailrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 11, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_ABMWarnLmpFailrSts_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 11, dval)
#define TX_IP2_HS_CAN_SetSignal_ABMWarnLmpFailrSts_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 11, nval)
#define TX_IP2_HS_CAN_VehSpdUnit_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 12, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_VehSpdUnit_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 12, dval)
#define TX_IP2_HS_CAN_SetSignal_VehSpdUnit_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 12, nval)
#define TX_IP2_HS_CAN_IP_Err_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_IP2_HS_CAN_Index, 13, dPhysicalValue);
#define TX_IP2_HS_CAN_SetSignal_IP_Err_Physical(dval) SpySetTxSignal(TX_IP2_HS_CAN_Index, 13, dval)
#define TX_IP2_HS_CAN_SetSignal_IP_Err_Raw(nval) SpySetTxSignalRaw(TX_IP2_HS_CAN_Index, 13, nval)
int TX_IP2_HS_CAN_TransmitFast();
#define TX_IP2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_IP2_HS_CAN_Index, 0)
#define TX_IP2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_IP2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_RSDS_R1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RiTarSts; /// Min: 0 Max: 3 Units: 
    BYTE RiTarSts_raw;
    double RiTarRelVel; /// Min: -10 Max: 50 Units:  m/s
    WORD RiTarRelVel_raw;
    double RiTarDst; /// Min: -90 Max: 10 Units:  m
    WORD RiTarDst_raw;
    double CheckSum_RSDS_R1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_RSDS_R1_raw;
    double CTA_warningReqRight; /// Min: 0 Max: 3 Units: 
    BYTE CTA_warningReqRight_raw;
    double BSD_LCA_warningReqRight; /// Min: 0 Max: 3 Units: 
    BYTE BSD_LCA_warningReqRight_raw;
    double RollingCounter_RSDS_R1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_RSDS_R1_raw;
    double RCWResp; /// Min: 0 Max: 1 Units: 
    BYTE RCWResp_raw;
    double CTAResp; /// Min: 0 Max: 1 Units: 
    BYTE CTAResp_raw;
    double LCAResp; /// Min: 0 Max: 1 Units: 
    BYTE LCAResp_raw;
    double CTABrkResp; /// Min: 0 Max: 1 Units: 
    BYTE CTABrkResp_raw;
    double DOWResp; /// Min: 0 Max: 1 Units: 
    BYTE DOWResp_raw;
    double RSDS_DOW_ErrSts; /// Min: 0 Max: 3 Units: 
    BYTE RSDS_DOW_ErrSts_raw;
    double RSDS_CTA_Actv; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_CTA_Actv_raw;
    double RSDS_TrailerSts; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_TrailerSts_raw;
    double RSDS_LCA_CTA_RCW_ErrSts; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_LCA_CTA_RCW_ErrSts_raw;
    double RSDS_BliSts; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_BliSts_raw;
} TX_RSDS_R1_HS_CAN;

#define TX_RSDS_R1_HS_CAN_SendType 0
#define TX_RSDS_R1_HS_CAN_SendRate 20
#define TX_RSDS_R1_HS_CAN_SendRateFast 0
#define TX_RSDS_R1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_RSDS_R1_HS_CAN_$_RiTarSts_$$__Target_Invalid_ 0
#define TX_RSDS_R1_HS_CAN_$_RiTarSts_$$__Target_Valid_ 1
#define TX_RSDS_R1_HS_CAN_$_RiTarSts_$$__No_target_ 2
#define TX_RSDS_R1_HS_CAN_$_RiTarSts_$$__Reserved_ 3
#define TX_RSDS_R1_HS_CAN_$_RiTarSts_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RiTarRelVel_$$__Valid_value_ 0
#define TX_RSDS_R1_HS_CAN_$_RiTarRelVel_$$__Reserved_ 965
#define TX_RSDS_R1_HS_CAN_$_RiTarRelVel_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RiTarDst_$$__Valid_value_ 0
#define TX_RSDS_R1_HS_CAN_$_RiTarDst_$$__Reserved_ 1608
#define TX_RSDS_R1_HS_CAN_$_RiTarDst_SendType 0
#define TX_RSDS_R1_HS_CAN_$_CheckSum_RSDS_R1_$$__Nmin_ 0
#define TX_RSDS_R1_HS_CAN_$_CheckSum_RSDS_R1_$$__Nmax_ 255
#define TX_RSDS_R1_HS_CAN_$_CheckSum_RSDS_R1_SendType 0
#define TX_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__No_warning_ 0
#define TX_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__Reserved_ 1
#define TX_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__Warning_level_2_ 2
#define TX_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__Reserved_ 3
#define TX_RSDS_R1_HS_CAN_$_CTA_warningReqRight_SendType 0
#define TX_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__No_warning_ 0
#define TX_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__Warning_level_1_ 1
#define TX_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__Warning_level_2_ 2
#define TX_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__Reserved_ 3
#define TX_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RollingCounter_RSDS_R1_$$__Nmin_ 0
#define TX_RSDS_R1_HS_CAN_$_RollingCounter_RSDS_R1_$$__Nmax_ 15
#define TX_RSDS_R1_HS_CAN_$_RollingCounter_RSDS_R1_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RCWResp_$$__RCW_OFF_ 0
#define TX_RSDS_R1_HS_CAN_$_RCWResp_$$__RCW_ON_ 1
#define TX_RSDS_R1_HS_CAN_$_RCWResp_SendType 0
#define TX_RSDS_R1_HS_CAN_$_CTAResp_$$__CTA_OFF_ 0
#define TX_RSDS_R1_HS_CAN_$_CTAResp_$$__CTA_ON_ 1
#define TX_RSDS_R1_HS_CAN_$_CTAResp_SendType 0
#define TX_RSDS_R1_HS_CAN_$_LCAResp_$$__LCA_OFF_ 0
#define TX_RSDS_R1_HS_CAN_$_LCAResp_$$__LCA_ON_ 1
#define TX_RSDS_R1_HS_CAN_$_LCAResp_SendType 0
#define TX_RSDS_R1_HS_CAN_$_CTABrkResp_$$__CTA__Brake_OFF_ 0
#define TX_RSDS_R1_HS_CAN_$_CTABrkResp_$$__CTA__Brake__ON_ 1
#define TX_RSDS_R1_HS_CAN_$_CTABrkResp_SendType 0
#define TX_RSDS_R1_HS_CAN_$_DOWResp_$$__OFF_ 0
#define TX_RSDS_R1_HS_CAN_$_DOWResp_$$__ON_ 1
#define TX_RSDS_R1_HS_CAN_$_DOWResp_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__No_Error_ 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__Error_ 1
#define TX_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__Function_Limited_ 2
#define TX_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__Reserved_ 3
#define TX_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_CTA_Actv_$$__Not_active_ 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_CTA_Actv_$$__Active_ 1
#define TX_RSDS_R1_HS_CAN_$_RSDS_CTA_Actv_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_TrailerSts_$$__None_ 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_TrailerSts_$$__Trailer_ 1
#define TX_RSDS_R1_HS_CAN_$_RSDS_TrailerSts_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_LCA_CTA_RCW_ErrSts_$$__No_Error_ 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_LCA_CTA_RCW_ErrSts_$$__Error_ 1
#define TX_RSDS_R1_HS_CAN_$_RSDS_LCA_CTA_RCW_ErrSts_SendType 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_BliSts_$$__No_Blindness_ 0
#define TX_RSDS_R1_HS_CAN_$_RSDS_BliSts_$$__Blindness_ 1
#define TX_RSDS_R1_HS_CAN_$_RSDS_BliSts_SendType 0
#pragma warning(default : 4005)

void TX_RSDS_R1_HS_CAN_Init(TX_RSDS_R1_HS_CAN * pMsg);
int TX_RSDS_R1_HS_CAN_Transmit(TX_RSDS_R1_HS_CAN * pMsg);
int TX_RSDS_R1_HS_CAN_Transmit_raw(TX_RSDS_R1_HS_CAN * pMsg);
int TX_RSDS_R1_HS_CAN_UpdateBytesFromSignals(TX_RSDS_R1_HS_CAN * pMsg);
int TX_RSDS_R1_HS_CAN_UpdateBytesFromRawSignals(TX_RSDS_R1_HS_CAN * pMsg);
#define TX_RSDS_R1_HS_CAN_RiTarSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 0, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RiTarSts_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 0, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RiTarSts_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 0, nval)
#define TX_RSDS_R1_HS_CAN_RiTarRelVel_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 1, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RiTarRelVel_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 1, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RiTarRelVel_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 1, nval)
#define TX_RSDS_R1_HS_CAN_RiTarDst_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 2, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RiTarDst_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 2, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RiTarDst_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 2, nval)
#define TX_RSDS_R1_HS_CAN_CheckSum_RSDS_R1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 3, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_CheckSum_RSDS_R1_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 3, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_CheckSum_RSDS_R1_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 3, nval)
#define TX_RSDS_R1_HS_CAN_CTA_warningReqRight_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 4, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_CTA_warningReqRight_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 4, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_CTA_warningReqRight_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 4, nval)
#define TX_RSDS_R1_HS_CAN_BSD_LCA_warningReqRight_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 5, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_BSD_LCA_warningReqRight_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 5, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_BSD_LCA_warningReqRight_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 5, nval)
#define TX_RSDS_R1_HS_CAN_RollingCounter_RSDS_R1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 6, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RollingCounter_RSDS_R1_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 6, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RollingCounter_RSDS_R1_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 6, nval)
#define TX_RSDS_R1_HS_CAN_RCWResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 7, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RCWResp_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 7, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RCWResp_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 7, nval)
#define TX_RSDS_R1_HS_CAN_CTAResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 8, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_CTAResp_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 8, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_CTAResp_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 8, nval)
#define TX_RSDS_R1_HS_CAN_LCAResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 9, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_LCAResp_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 9, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_LCAResp_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 9, nval)
#define TX_RSDS_R1_HS_CAN_CTABrkResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 10, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_CTABrkResp_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 10, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_CTABrkResp_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 10, nval)
#define TX_RSDS_R1_HS_CAN_DOWResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 11, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_DOWResp_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 11, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_DOWResp_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 11, nval)
#define TX_RSDS_R1_HS_CAN_RSDS_DOW_ErrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 12, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_DOW_ErrSts_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 12, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_DOW_ErrSts_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 12, nval)
#define TX_RSDS_R1_HS_CAN_RSDS_CTA_Actv_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 13, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_CTA_Actv_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 13, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_CTA_Actv_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 13, nval)
#define TX_RSDS_R1_HS_CAN_RSDS_TrailerSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 14, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_TrailerSts_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 14, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_TrailerSts_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 14, nval)
#define TX_RSDS_R1_HS_CAN_RSDS_LCA_CTA_RCW_ErrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 15, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_LCA_CTA_RCW_ErrSts_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 15, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_LCA_CTA_RCW_ErrSts_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 15, nval)
#define TX_RSDS_R1_HS_CAN_RSDS_BliSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_RSDS_R1_HS_CAN_Index, 16, dPhysicalValue);
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_BliSts_Physical(dval) SpySetTxSignal(TX_RSDS_R1_HS_CAN_Index, 16, dval)
#define TX_RSDS_R1_HS_CAN_SetSignal_RSDS_BliSts_Raw(nval) SpySetTxSignalRaw(TX_RSDS_R1_HS_CAN_Index, 16, nval)
int TX_RSDS_R1_HS_CAN_TransmitFast();
#define TX_RSDS_R1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_RSDS_R1_HS_CAN_Index, 0)
#define TX_RSDS_R1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_RSDS_R1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_HUT6_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double LaneCalActvtCmd; /// Min: 0 Max: 1 Units: 
    BYTE LaneCalActvtCmd_raw;
    double MODChgReq; /// Min: 0 Max: 1 Units: 
    BYTE MODChgReq_raw;
    double Radar_DispCmd; /// Min: 0 Max: 1 Units: 
    BYTE Radar_DispCmd_raw;
    double Guid_Ovl_Display_Cmd; /// Min: 0 Max: 1 Units: 
    BYTE Guid_Ovl_Display_Cmd_raw;
    double Sgl_View_Sel; /// Min: 0 Max: 11 Units: 
    BYTE Sgl_View_Sel_raw;
    double SwToFieldCalRstCmd; /// Min: 0 Max: 1 Units: 
    BYTE SwToFieldCalRstCmd_raw;
    double AutoViewChgCmd; /// Min: 0 Max: 1 Units: 
    BYTE AutoViewChgCmd_raw;
    double MdlColrChgCmd; /// Min: 0 Max: 1 Units: 
    BYTE MdlColrChgCmd_raw;
    double CarMdlTrsprcySwtCmd; /// Min: 0 Max: 1 Units: 
    BYTE CarMdlTrsprcySwtCmd_raw;
    double CarMdlDispCmd; /// Min: 0 Max: 1 Units: 
    BYTE CarMdlDispCmd_raw;
    double AutoAVMSwSet_Cmd; /// Min: 0 Max: 1 Units: 
    BYTE AutoAVMSwSet_Cmd_raw;
    double FPAS_AutoModSwt; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_AutoModSwt_raw;
    double MEBSwtSet; /// Min: 0 Max: 1 Units: 
    BYTE MEBSwtSet_raw;
    double WshSoftSwt; /// Min: 0 Max: 1 Units: 
    BYTE WshSoftSwt_raw;
    double View_SoftswitchCmd; /// Min: 0 Max: 1 Units: 
    BYTE View_SoftswitchCmd_raw;
} TX_HUT6_HS_CAN;

#define TX_HUT6_HS_CAN_SendType 2
#define TX_HUT6_HS_CAN_SendRateFast 0
#define TX_HUT6_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define TX_HUT6_HS_CAN_$_LaneCalActvtCmd_$$__Off_ 0
#define TX_HUT6_HS_CAN_$_LaneCalActvtCmd_$$__On_ 1
#define TX_HUT6_HS_CAN_$_LaneCalActvtCmd_SendType 1
#define TX_HUT6_HS_CAN_$_MODChgReq_$$__No_request_ 0
#define TX_HUT6_HS_CAN_$_MODChgReq_$$__Request_ 1
#define TX_HUT6_HS_CAN_$_MODChgReq_SendType 1
#define TX_HUT6_HS_CAN_$_Radar_DispCmd_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_Radar_DispCmd_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_Radar_DispCmd_SendType 1
#define TX_HUT6_HS_CAN_$_Guid_Ovl_Display_Cmd_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_Guid_Ovl_Display_Cmd_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_Guid_Ovl_Display_Cmd_SendType 1
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__No_Commands_ 0
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Front_Button_ 1
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Rear_Button_ 2
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Left_Button__ 3
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Right_Button_ 4
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Left_Front__Button_ 5
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Right_Front_Button_ 6
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Left_Back_Button_ 7
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Right_Back_Button_ 8
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_return_Button_ 9
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Free_3D_Button__TBD__ 10
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Reserved_ 11
#define TX_HUT6_HS_CAN_$_Sgl_View_Sel_SendType 1
#define TX_HUT6_HS_CAN_$_SwToFieldCalRstCmd_$$__Off_ 0
#define TX_HUT6_HS_CAN_$_SwToFieldCalRstCmd_$$__On_ 1
#define TX_HUT6_HS_CAN_$_SwToFieldCalRstCmd_SendType 1
#define TX_HUT6_HS_CAN_$_AutoViewChgCmd_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_AutoViewChgCmd_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_AutoViewChgCmd_SendType 1
#define TX_HUT6_HS_CAN_$_MdlColrChgCmd_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_MdlColrChgCmd_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_MdlColrChgCmd_SendType 1
#define TX_HUT6_HS_CAN_$_CarMdlTrsprcySwtCmd_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_CarMdlTrsprcySwtCmd_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_CarMdlTrsprcySwtCmd_SendType 1
#define TX_HUT6_HS_CAN_$_CarMdlDispCmd_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_CarMdlDispCmd_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_CarMdlDispCmd_SendType 1
#define TX_HUT6_HS_CAN_$_AutoAVMSwSet_Cmd_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_AutoAVMSwSet_Cmd_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_AutoAVMSwSet_Cmd_SendType 1
#define TX_HUT6_HS_CAN_$_FPAS_AutoModSwt_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_FPAS_AutoModSwt_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_FPAS_AutoModSwt_SendType 1
#define TX_HUT6_HS_CAN_$_MEBSwtSet_$$__No_Request_ 0
#define TX_HUT6_HS_CAN_$_MEBSwtSet_$$__Request__ 1
#define TX_HUT6_HS_CAN_$_MEBSwtSet_SendType 1
#define TX_HUT6_HS_CAN_$_WshSoftSwt_$$__No_request_ 0
#define TX_HUT6_HS_CAN_$_WshSoftSwt_$$__Request_ 1
#define TX_HUT6_HS_CAN_$_WshSoftSwt_SendType 1
#define TX_HUT6_HS_CAN_$_View_SoftswitchCmd_$$__No_request_ 0
#define TX_HUT6_HS_CAN_$_View_SoftswitchCmd_$$__Request_ 1
#define TX_HUT6_HS_CAN_$_View_SoftswitchCmd_SendType 1
#pragma warning(default : 4005)

void TX_HUT6_HS_CAN_Init(TX_HUT6_HS_CAN * pMsg);
int TX_HUT6_HS_CAN_Transmit(TX_HUT6_HS_CAN * pMsg);
int TX_HUT6_HS_CAN_Transmit_raw(TX_HUT6_HS_CAN * pMsg);
int TX_HUT6_HS_CAN_UpdateBytesFromSignals(TX_HUT6_HS_CAN * pMsg);
int TX_HUT6_HS_CAN_UpdateBytesFromRawSignals(TX_HUT6_HS_CAN * pMsg);
#define TX_HUT6_HS_CAN_LaneCalActvtCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 0, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_LaneCalActvtCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 0, dval)
#define TX_HUT6_HS_CAN_SetSignal_LaneCalActvtCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 0, nval)
#define TX_HUT6_HS_CAN_MODChgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 1, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_MODChgReq_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 1, dval)
#define TX_HUT6_HS_CAN_SetSignal_MODChgReq_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 1, nval)
#define TX_HUT6_HS_CAN_Radar_DispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 2, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_Radar_DispCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 2, dval)
#define TX_HUT6_HS_CAN_SetSignal_Radar_DispCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 2, nval)
#define TX_HUT6_HS_CAN_Guid_Ovl_Display_Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 3, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_Guid_Ovl_Display_Cmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 3, dval)
#define TX_HUT6_HS_CAN_SetSignal_Guid_Ovl_Display_Cmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 3, nval)
#define TX_HUT6_HS_CAN_Sgl_View_Sel_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 4, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_Sgl_View_Sel_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 4, dval)
#define TX_HUT6_HS_CAN_SetSignal_Sgl_View_Sel_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 4, nval)
#define TX_HUT6_HS_CAN_SwToFieldCalRstCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 5, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_SwToFieldCalRstCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 5, dval)
#define TX_HUT6_HS_CAN_SetSignal_SwToFieldCalRstCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 5, nval)
#define TX_HUT6_HS_CAN_AutoViewChgCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 6, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_AutoViewChgCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 6, dval)
#define TX_HUT6_HS_CAN_SetSignal_AutoViewChgCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 6, nval)
#define TX_HUT6_HS_CAN_MdlColrChgCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 7, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_MdlColrChgCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 7, dval)
#define TX_HUT6_HS_CAN_SetSignal_MdlColrChgCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 7, nval)
#define TX_HUT6_HS_CAN_CarMdlTrsprcySwtCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 8, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_CarMdlTrsprcySwtCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 8, dval)
#define TX_HUT6_HS_CAN_SetSignal_CarMdlTrsprcySwtCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 8, nval)
#define TX_HUT6_HS_CAN_CarMdlDispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 9, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_CarMdlDispCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 9, dval)
#define TX_HUT6_HS_CAN_SetSignal_CarMdlDispCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 9, nval)
#define TX_HUT6_HS_CAN_AutoAVMSwSet_Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 10, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_AutoAVMSwSet_Cmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 10, dval)
#define TX_HUT6_HS_CAN_SetSignal_AutoAVMSwSet_Cmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 10, nval)
#define TX_HUT6_HS_CAN_FPAS_AutoModSwt_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 11, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_FPAS_AutoModSwt_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 11, dval)
#define TX_HUT6_HS_CAN_SetSignal_FPAS_AutoModSwt_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 11, nval)
#define TX_HUT6_HS_CAN_MEBSwtSet_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 12, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_MEBSwtSet_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 12, dval)
#define TX_HUT6_HS_CAN_SetSignal_MEBSwtSet_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 12, nval)
#define TX_HUT6_HS_CAN_WshSoftSwt_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 13, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_WshSoftSwt_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 13, dval)
#define TX_HUT6_HS_CAN_SetSignal_WshSoftSwt_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 13, nval)
#define TX_HUT6_HS_CAN_View_SoftswitchCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX_HUT6_HS_CAN_Index, 14, dPhysicalValue);
#define TX_HUT6_HS_CAN_SetSignal_View_SoftswitchCmd_Physical(dval) SpySetTxSignal(TX_HUT6_HS_CAN_Index, 14, dval)
#define TX_HUT6_HS_CAN_SetSignal_View_SoftswitchCmd_Raw(nval) SpySetTxSignalRaw(TX_HUT6_HS_CAN_Index, 14, nval)
int TX_HUT6_HS_CAN_TransmitFast();
#define TX_HUT6_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_HUT6_HS_CAN_Index, 0)
#define TX_HUT6_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_HUT6_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_8_1___MCU_____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_8_1___MCU_____HS_CAN;


void TX_4_8_1___MCU_____HS_CAN_Init(TX_4_8_1___MCU_____HS_CAN * pMsg);
int TX_4_8_1___MCU_____HS_CAN_Transmit(TX_4_8_1___MCU_____HS_CAN * pMsg);
int TX_4_8_1___MCU_____HS_CAN_Transmit_raw(TX_4_8_1___MCU_____HS_CAN * pMsg);
int TX_4_8_1___MCU_____HS_CAN_TransmitFast();
#define TX_4_8_1___MCU_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_8_1___MCU_____HS_CAN_Index, 0)
#define TX_4_8_1___MCU_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_8_1___MCU_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_8_2___CAL_____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_8_2___CAL_____HS_CAN;


void TX_4_8_2___CAL_____HS_CAN_Init(TX_4_8_2___CAL_____HS_CAN * pMsg);
int TX_4_8_2___CAL_____HS_CAN_Transmit(TX_4_8_2___CAL_____HS_CAN * pMsg);
int TX_4_8_2___CAL_____HS_CAN_Transmit_raw(TX_4_8_2___CAL_____HS_CAN * pMsg);
int TX_4_8_2___CAL_____HS_CAN_TransmitFast();
#define TX_4_8_2___CAL_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_8_2___CAL_____HS_CAN_Index, 0)
#define TX_4_8_2___CAL_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_8_2___CAL_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_8_3___SOC_____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_8_3___SOC_____HS_CAN;


void TX_4_8_3___SOC_____HS_CAN_Init(TX_4_8_3___SOC_____HS_CAN * pMsg);
int TX_4_8_3___SOC_____HS_CAN_Transmit(TX_4_8_3___SOC_____HS_CAN * pMsg);
int TX_4_8_3___SOC_____HS_CAN_Transmit_raw(TX_4_8_3___SOC_____HS_CAN * pMsg);
int TX_4_8_3___SOC_____HS_CAN_TransmitFast();
#define TX_4_8_3___SOC_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_8_3___SOC_____HS_CAN_Index, 0)
#define TX_4_8_3___SOC_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_8_3___SOC_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_1________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_1________HS_CAN;


void TX_1________HS_CAN_Init(TX_1________HS_CAN * pMsg);
int TX_1________HS_CAN_Transmit(TX_1________HS_CAN * pMsg);
int TX_1________HS_CAN_Transmit_raw(TX_1________HS_CAN * pMsg);
int TX_1________HS_CAN_TransmitFast();
#define TX_1________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_1________HS_CAN_Index, 0)
#define TX_1________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_1________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_4_0___SOC_____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_4_0___SOC_____HS_CAN;


void TX_4_0___SOC_____HS_CAN_Init(TX_4_0___SOC_____HS_CAN * pMsg);
int TX_4_0___SOC_____HS_CAN_Transmit(TX_4_0___SOC_____HS_CAN * pMsg);
int TX_4_0___SOC_____HS_CAN_Transmit_raw(TX_4_0___SOC_____HS_CAN * pMsg);
int TX_4_0___SOC_____HS_CAN_TransmitFast();
#define TX_4_0___SOC_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_4_0___SOC_____HS_CAN_Index, 0)
#define TX_4_0___SOC_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_4_0___SOC_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_01___CHB027_2__IPAS_____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_01___CHB027_2__IPAS_____HS_CAN;


void TX_9_01___CHB027_2__IPAS_____HS_CAN_Init(TX_9_01___CHB027_2__IPAS_____HS_CAN * pMsg);
int TX_9_01___CHB027_2__IPAS_____HS_CAN_Transmit(TX_9_01___CHB027_2__IPAS_____HS_CAN * pMsg);
int TX_9_01___CHB027_2__IPAS_____HS_CAN_Transmit_raw(TX_9_01___CHB027_2__IPAS_____HS_CAN * pMsg);
int TX_9_01___CHB027_2__IPAS_____HS_CAN_TransmitFast();
#define TX_9_01___CHB027_2__IPAS_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_01___CHB027_2__IPAS_____HS_CAN_Index, 0)
#define TX_9_01___CHB027_2__IPAS_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_01___CHB027_2__IPAS_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_02___CHB027_2__HAP____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_02___CHB027_2__HAP____HS_CAN;


void TX_9_02___CHB027_2__HAP____HS_CAN_Init(TX_9_02___CHB027_2__HAP____HS_CAN * pMsg);
int TX_9_02___CHB027_2__HAP____HS_CAN_Transmit(TX_9_02___CHB027_2__HAP____HS_CAN * pMsg);
int TX_9_02___CHB027_2__HAP____HS_CAN_Transmit_raw(TX_9_02___CHB027_2__HAP____HS_CAN * pMsg);
int TX_9_02___CHB027_2__HAP____HS_CAN_TransmitFast();
#define TX_9_02___CHB027_2__HAP____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_02___CHB027_2__HAP____HS_CAN_Index, 0)
#define TX_9_02___CHB027_2__HAP____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_02___CHB027_2__HAP____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_03___CHB027_4__IPAS_____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_03___CHB027_4__IPAS_____HS_CAN;


void TX_9_03___CHB027_4__IPAS_____HS_CAN_Init(TX_9_03___CHB027_4__IPAS_____HS_CAN * pMsg);
int TX_9_03___CHB027_4__IPAS_____HS_CAN_Transmit(TX_9_03___CHB027_4__IPAS_____HS_CAN * pMsg);
int TX_9_03___CHB027_4__IPAS_____HS_CAN_Transmit_raw(TX_9_03___CHB027_4__IPAS_____HS_CAN * pMsg);
int TX_9_03___CHB027_4__IPAS_____HS_CAN_TransmitFast();
#define TX_9_03___CHB027_4__IPAS_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_03___CHB027_4__IPAS_____HS_CAN_Index, 0)
#define TX_9_03___CHB027_4__IPAS_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_03___CHB027_4__IPAS_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_04___CHB027_4__HAP____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_04___CHB027_4__HAP____HS_CAN;


void TX_9_04___CHB027_4__HAP____HS_CAN_Init(TX_9_04___CHB027_4__HAP____HS_CAN * pMsg);
int TX_9_04___CHB027_4__HAP____HS_CAN_Transmit(TX_9_04___CHB027_4__HAP____HS_CAN * pMsg);
int TX_9_04___CHB027_4__HAP____HS_CAN_Transmit_raw(TX_9_04___CHB027_4__HAP____HS_CAN * pMsg);
int TX_9_04___CHB027_4__HAP____HS_CAN_TransmitFast();
#define TX_9_04___CHB027_4__HAP____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_04___CHB027_4__HAP____HS_CAN_Index, 0)
#define TX_9_04___CHB027_4__HAP____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_04___CHB027_4__HAP____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_05___CHB037_2__IPAS_____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_05___CHB037_2__IPAS_____HS_CAN;


void TX_9_05___CHB037_2__IPAS_____HS_CAN_Init(TX_9_05___CHB037_2__IPAS_____HS_CAN * pMsg);
int TX_9_05___CHB037_2__IPAS_____HS_CAN_Transmit(TX_9_05___CHB037_2__IPAS_____HS_CAN * pMsg);
int TX_9_05___CHB037_2__IPAS_____HS_CAN_Transmit_raw(TX_9_05___CHB037_2__IPAS_____HS_CAN * pMsg);
int TX_9_05___CHB037_2__IPAS_____HS_CAN_TransmitFast();
#define TX_9_05___CHB037_2__IPAS_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_05___CHB037_2__IPAS_____HS_CAN_Index, 0)
#define TX_9_05___CHB037_2__IPAS_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_05___CHB037_2__IPAS_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_06___CHB037_2__HAP____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_06___CHB037_2__HAP____HS_CAN;


void TX_9_06___CHB037_2__HAP____HS_CAN_Init(TX_9_06___CHB037_2__HAP____HS_CAN * pMsg);
int TX_9_06___CHB037_2__HAP____HS_CAN_Transmit(TX_9_06___CHB037_2__HAP____HS_CAN * pMsg);
int TX_9_06___CHB037_2__HAP____HS_CAN_Transmit_raw(TX_9_06___CHB037_2__HAP____HS_CAN * pMsg);
int TX_9_06___CHB037_2__HAP____HS_CAN_TransmitFast();
#define TX_9_06___CHB037_2__HAP____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_06___CHB037_2__HAP____HS_CAN_Index, 0)
#define TX_9_06___CHB037_2__HAP____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_06___CHB037_2__HAP____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_07___CHB037_4__IPAS_____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_07___CHB037_4__IPAS_____HS_CAN;


void TX_9_07___CHB037_4__IPAS_____HS_CAN_Init(TX_9_07___CHB037_4__IPAS_____HS_CAN * pMsg);
int TX_9_07___CHB037_4__IPAS_____HS_CAN_Transmit(TX_9_07___CHB037_4__IPAS_____HS_CAN * pMsg);
int TX_9_07___CHB037_4__IPAS_____HS_CAN_Transmit_raw(TX_9_07___CHB037_4__IPAS_____HS_CAN * pMsg);
int TX_9_07___CHB037_4__IPAS_____HS_CAN_TransmitFast();
#define TX_9_07___CHB037_4__IPAS_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_07___CHB037_4__IPAS_____HS_CAN_Index, 0)
#define TX_9_07___CHB037_4__IPAS_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_07___CHB037_4__IPAS_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_9_08___CHB037_4__HAP____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_9_08___CHB037_4__HAP____HS_CAN;


void TX_9_08___CHB037_4__HAP____HS_CAN_Init(TX_9_08___CHB037_4__HAP____HS_CAN * pMsg);
int TX_9_08___CHB037_4__HAP____HS_CAN_Transmit(TX_9_08___CHB037_4__HAP____HS_CAN * pMsg);
int TX_9_08___CHB037_4__HAP____HS_CAN_Transmit_raw(TX_9_08___CHB037_4__HAP____HS_CAN * pMsg);
int TX_9_08___CHB037_4__HAP____HS_CAN_TransmitFast();
#define TX_9_08___CHB037_4__HAP____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_9_08___CHB037_4__HAP____HS_CAN_Index, 0)
#define TX_9_08___CHB037_4__HAP____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_9_08___CHB037_4__HAP____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX_31_01_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} TX_31_01_________HS_CAN;


void TX_31_01_________HS_CAN_Init(TX_31_01_________HS_CAN * pMsg);
int TX_31_01_________HS_CAN_Transmit(TX_31_01_________HS_CAN * pMsg);
int TX_31_01_________HS_CAN_Transmit_raw(TX_31_01_________HS_CAN * pMsg);
int TX_31_01_________HS_CAN_TransmitFast();
#define TX_31_01_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX_31_01_________HS_CAN_Index, 0)
#define TX_31_01_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX_31_01_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int TX________HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double MemoryAddr; /// Min: 0 Max: 4294967295 Units: 
    DWORD MemoryAddr_raw;
    double MemoryLen; /// Min: 0 Max: 65535 Units: 
    WORD MemoryLen_raw;
} TX________HS_CAN;


void TX________HS_CAN_Init(TX________HS_CAN * pMsg);
int TX________HS_CAN_Transmit(TX________HS_CAN * pMsg);
int TX________HS_CAN_Transmit_raw(TX________HS_CAN * pMsg);
int TX________HS_CAN_UpdateBytesFromSignals(TX________HS_CAN * pMsg);
int TX________HS_CAN_UpdateBytesFromRawSignals(TX________HS_CAN * pMsg);
#define TX________HS_CAN_MemoryAddr_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX________HS_CAN_Index, 0, dPhysicalValue);
#define TX________HS_CAN_SetSignal_MemoryAddr_Physical(dval) SpySetTxSignal(TX________HS_CAN_Index, 0, dval)
#define TX________HS_CAN_SetSignal_MemoryAddr_Raw(nval) SpySetTxSignalRaw(TX________HS_CAN_Index, 0, nval)
#define TX________HS_CAN_MemoryLen_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 2, TX________HS_CAN_Index, 1, dPhysicalValue);
#define TX________HS_CAN_SetSignal_MemoryLen_Physical(dval) SpySetTxSignal(TX________HS_CAN_Index, 1, dval)
#define TX________HS_CAN_SetSignal_MemoryLen_Raw(nval) SpySetTxSignalRaw(TX________HS_CAN_Index, 1, nval)
int TX________HS_CAN_TransmitFast();
#define TX________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, TX________HS_CAN_Index, 0)
#define TX________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(TX________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_ReqVIN_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} MG_ReqVIN_HS_CAN;


void MG_ReqVIN_HS_CAN_Init(MG_ReqVIN_HS_CAN * pMsg);
int MG_ReqVIN_HS_CAN_Transmit(MG_ReqVIN_HS_CAN * pMsg);
int MG_ReqVIN_HS_CAN_Transmit_raw(MG_ReqVIN_HS_CAN * pMsg);
#define MG_ReqVIN_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_ReqVIN_HS_CAN_Index, 0)
#define MG_ReqVIN_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_ReqVIN_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_F190_HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} MG_F190_HS_CAN;


void MG_F190_HS_CAN_Init(MG_F190_HS_CAN * pMsg);
int MG_F190_HS_CAN_Transmit(MG_F190_HS_CAN * pMsg);
int MG_F190_HS_CAN_Transmit_raw(MG_F190_HS_CAN * pMsg);
#define MG_F190_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_F190_HS_CAN_Index, 0)
#define MG_F190_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_F190_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_1_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double key; /// Min: 0 Max: 4294967295 Units: 
    DWORD key_raw;
} MG_1_________HS_CAN;


void MG_1_________HS_CAN_Init(MG_1_________HS_CAN * pMsg);
int MG_1_________HS_CAN_Transmit(MG_1_________HS_CAN * pMsg);
int MG_1_________HS_CAN_Transmit_raw(MG_1_________HS_CAN * pMsg);
int MG_1_________HS_CAN_UpdateBytesFromSignals(MG_1_________HS_CAN * pMsg);
int MG_1_________HS_CAN_UpdateBytesFromRawSignals(MG_1_________HS_CAN * pMsg);
#define MG_1_________HS_CAN_key_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_1_________HS_CAN_Index, 0, dPhysicalValue);
#define MG_1_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_1_________HS_CAN_Index, 0)
#define MG_1_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_1_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_DiagReqFC_HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} MG_DiagReqFC_HS_CAN;


void MG_DiagReqFC_HS_CAN_Init(MG_DiagReqFC_HS_CAN * pMsg);
int MG_DiagReqFC_HS_CAN_Transmit(MG_DiagReqFC_HS_CAN * pMsg);
int MG_DiagReqFC_HS_CAN_Transmit_raw(MG_DiagReqFC_HS_CAN * pMsg);
#define MG_DiagReqFC_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_DiagReqFC_HS_CAN_Index, 0)
#define MG_DiagReqFC_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_DiagReqFC_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_MCU____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double MCU__; /// Min: 0 Max: 0 Units: 
    BYTE MCU___raw;
} MG_MCU____HS_CAN;


void MG_MCU____HS_CAN_Init(MG_MCU____HS_CAN * pMsg);
int MG_MCU____HS_CAN_Transmit(MG_MCU____HS_CAN * pMsg);
int MG_MCU____HS_CAN_Transmit_raw(MG_MCU____HS_CAN * pMsg);
int MG_MCU____HS_CAN_UpdateBytesFromSignals(MG_MCU____HS_CAN * pMsg);
int MG_MCU____HS_CAN_UpdateBytesFromRawSignals(MG_MCU____HS_CAN * pMsg);
#define MG_MCU____HS_CAN_MCU___PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_MCU____HS_CAN_Index, 0, dPhysicalValue);
int MG_MCU____HS_CAN_GetSignal_MCU___TextW(LPWSTR szData, int nSize);
int MG_MCU____HS_CAN_SetSignal_MCU___TextW(MG_MCU____HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_MCU____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_MCU____HS_CAN_Index, 0)
#define MG_MCU____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_MCU____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_DSP____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double DSP__; /// Min: 0 Max: 0 Units: 
    BYTE DSP___raw;
} MG_DSP____HS_CAN;


void MG_DSP____HS_CAN_Init(MG_DSP____HS_CAN * pMsg);
int MG_DSP____HS_CAN_Transmit(MG_DSP____HS_CAN * pMsg);
int MG_DSP____HS_CAN_Transmit_raw(MG_DSP____HS_CAN * pMsg);
int MG_DSP____HS_CAN_UpdateBytesFromSignals(MG_DSP____HS_CAN * pMsg);
int MG_DSP____HS_CAN_UpdateBytesFromRawSignals(MG_DSP____HS_CAN * pMsg);
#define MG_DSP____HS_CAN_DSP___PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_DSP____HS_CAN_Index, 0, dPhysicalValue);
int MG_DSP____HS_CAN_GetSignal_DSP___TextW(LPWSTR szData, int nSize);
int MG_DSP____HS_CAN_SetSignal_DSP___TextW(MG_DSP____HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_DSP____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_DSP____HS_CAN_Index, 0)
#define MG_DSP____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_DSP____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_FBL____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FBL__; /// Min: 0 Max: 0 Units: 
    BYTE FBL___raw;
} MG_FBL____HS_CAN;


void MG_FBL____HS_CAN_Init(MG_FBL____HS_CAN * pMsg);
int MG_FBL____HS_CAN_Transmit(MG_FBL____HS_CAN * pMsg);
int MG_FBL____HS_CAN_Transmit_raw(MG_FBL____HS_CAN * pMsg);
int MG_FBL____HS_CAN_UpdateBytesFromSignals(MG_FBL____HS_CAN * pMsg);
int MG_FBL____HS_CAN_UpdateBytesFromRawSignals(MG_FBL____HS_CAN * pMsg);
#define MG_FBL____HS_CAN_FBL___PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FBL____HS_CAN_Index, 0, dPhysicalValue);
int MG_FBL____HS_CAN_GetSignal_FBL___TextW(LPWSTR szData, int nSize);
int MG_FBL____HS_CAN_SetSignal_FBL___TextW(MG_FBL____HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_FBL____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_FBL____HS_CAN_Index, 0)
#define MG_FBL____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_FBL____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_HW____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double HW__; /// Min: 0 Max: 0 Units: 
    BYTE HW___raw;
} MG_HW____HS_CAN;


void MG_HW____HS_CAN_Init(MG_HW____HS_CAN * pMsg);
int MG_HW____HS_CAN_Transmit(MG_HW____HS_CAN * pMsg);
int MG_HW____HS_CAN_Transmit_raw(MG_HW____HS_CAN * pMsg);
int MG_HW____HS_CAN_UpdateBytesFromSignals(MG_HW____HS_CAN * pMsg);
int MG_HW____HS_CAN_UpdateBytesFromRawSignals(MG_HW____HS_CAN * pMsg);
#define MG_HW____HS_CAN_HW___PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HW____HS_CAN_Index, 0, dPhysicalValue);
int MG_HW____HS_CAN_GetSignal_HW___TextW(LPWSTR szData, int nSize);
int MG_HW____HS_CAN_SetSignal_HW___TextW(MG_HW____HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_HW____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_HW____HS_CAN_Index, 0)
#define MG_HW____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_HW____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double SW__1; /// Min: 0 Max: 0 Units: 
    BYTE SW__1_raw;
} MG_________HS_CAN;


void MG_________HS_CAN_Init(MG_________HS_CAN * pMsg);
int MG_________HS_CAN_Transmit(MG_________HS_CAN * pMsg);
int MG_________HS_CAN_Transmit_raw(MG_________HS_CAN * pMsg);
int MG_________HS_CAN_UpdateBytesFromSignals(MG_________HS_CAN * pMsg);
int MG_________HS_CAN_UpdateBytesFromRawSignals(MG_________HS_CAN * pMsg);
#define MG_________HS_CAN_SW__1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_________HS_CAN_Index, 0, dPhysicalValue);
int MG_________HS_CAN_GetSignal_SW__1_TextW(LPWSTR szData, int nSize);
int MG_________HS_CAN_SetSignal_SW__1_TextW(MG_________HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_________HS_CAN_Index, 0)
#define MG_________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_MCU_____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double MCU____; /// Min: 0 Max: 0 Units: 
    BYTE MCU_____raw;
} MG_MCU_____HS_CAN;


void MG_MCU_____HS_CAN_Init(MG_MCU_____HS_CAN * pMsg);
int MG_MCU_____HS_CAN_Transmit(MG_MCU_____HS_CAN * pMsg);
int MG_MCU_____HS_CAN_Transmit_raw(MG_MCU_____HS_CAN * pMsg);
int MG_MCU_____HS_CAN_UpdateBytesFromSignals(MG_MCU_____HS_CAN * pMsg);
int MG_MCU_____HS_CAN_UpdateBytesFromRawSignals(MG_MCU_____HS_CAN * pMsg);
#define MG_MCU_____HS_CAN_MCU_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_MCU_____HS_CAN_Index, 0, dPhysicalValue);
int MG_MCU_____HS_CAN_GetSignal_MCU_____TextW(LPWSTR szData, int nSize);
int MG_MCU_____HS_CAN_SetSignal_MCU_____TextW(MG_MCU_____HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_MCU_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_MCU_____HS_CAN_Index, 0)
#define MG_MCU_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_MCU_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_DSP_____HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double DSP____; /// Min: 0 Max: 16777215 Units: 
    DWORD DSP_____raw;
} MG_DSP_____HS_CAN;


void MG_DSP_____HS_CAN_Init(MG_DSP_____HS_CAN * pMsg);
int MG_DSP_____HS_CAN_Transmit(MG_DSP_____HS_CAN * pMsg);
int MG_DSP_____HS_CAN_Transmit_raw(MG_DSP_____HS_CAN * pMsg);
int MG_DSP_____HS_CAN_UpdateBytesFromSignals(MG_DSP_____HS_CAN * pMsg);
int MG_DSP_____HS_CAN_UpdateBytesFromRawSignals(MG_DSP_____HS_CAN * pMsg);
#define MG_DSP_____HS_CAN_DSP_____PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_DSP_____HS_CAN_Index, 0, dPhysicalValue);
#define MG_DSP_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_DSP_____HS_CAN_Index, 0)
#define MG_DSP_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_DSP_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG______HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ___; /// Min: 0 Max: 0 Units: 
    BYTE ____raw;
} MG______HS_CAN;


void MG______HS_CAN_Init(MG______HS_CAN * pMsg);
int MG______HS_CAN_Transmit(MG______HS_CAN * pMsg);
int MG______HS_CAN_Transmit_raw(MG______HS_CAN * pMsg);
int MG______HS_CAN_UpdateBytesFromSignals(MG______HS_CAN * pMsg);
int MG______HS_CAN_UpdateBytesFromRawSignals(MG______HS_CAN * pMsg);
#define MG______HS_CAN_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG______HS_CAN_Index, 0, dPhysicalValue);
int MG______HS_CAN_GetSignal_____TextW(LPWSTR szData, int nSize);
int MG______HS_CAN_SetSignal_____TextW(MG______HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG______HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG______HS_CAN_Index, 0)
#define MG______HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG______HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ___; /// Min: 0 Max: 0 Units: 
    uint64 ____raw;
} MG_____HS_CAN;


void MG_____HS_CAN_Init(MG_____HS_CAN * pMsg);
int MG_____HS_CAN_Transmit(MG_____HS_CAN * pMsg);
int MG_____HS_CAN_Transmit_raw(MG_____HS_CAN * pMsg);
int MG_____HS_CAN_UpdateBytesFromSignals(MG_____HS_CAN * pMsg);
int MG_____HS_CAN_UpdateBytesFromRawSignals(MG_____HS_CAN * pMsg);
#define MG_____HS_CAN_____PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_____HS_CAN_Index, 0, dPhysicalValue);
int MG_____HS_CAN_GetSignal_____TextW(LPWSTR szData, int nSize);
int MG_____HS_CAN_SetSignal_____TextW(MG_____HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_____HS_CAN_Index, 0)
#define MG_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG__________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double _275____; /// Min: 0 Max: 15 Units: 
    BYTE _275_____raw;
} MG__________HS_CAN;

#pragma warning(disable : 4005)
#define MG__________HS_CAN_$__________$$_____ 0
#define MG__________HS_CAN_$__________$$______ 1
#define MG__________HS_CAN_$__________$$__ 15
#define MG__________HS_CAN_$__________$$_____ 2
#define MG__________HS_CAN_$__________$$___ 3
#define MG__________HS_CAN_$__275_____$$_____ 0
#define MG__________HS_CAN_$__275_____$$_____ 1
#define MG__________HS_CAN_$__275_____$$__ 15
#pragma warning(default : 4005)

void MG__________HS_CAN_Init(MG__________HS_CAN * pMsg);
int MG__________HS_CAN_Transmit(MG__________HS_CAN * pMsg);
int MG__________HS_CAN_Transmit_raw(MG__________HS_CAN * pMsg);
int MG__________HS_CAN_UpdateBytesFromSignals(MG__________HS_CAN * pMsg);
int MG__________HS_CAN_UpdateBytesFromRawSignals(MG__________HS_CAN * pMsg);
#define MG__________HS_CAN__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_Index, 0, dPhysicalValue);
#define MG__________HS_CAN__275_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_Index, 1, dPhysicalValue);
#define MG__________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG__________HS_CAN_Index, 0)
#define MG__________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG__________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG________HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double _275____; /// Min: 0 Max: 15 Units: 
    BYTE _275_____raw;
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
} MG________HS_CAN;

#pragma warning(disable : 4005)
#define MG________HS_CAN_$__275_____$$_____ 0
#define MG________HS_CAN_$__275_____$$_____ 1
#define MG________HS_CAN_$__275_____$$__ 15
#define MG________HS_CAN_$__________$$_____ 0
#define MG________HS_CAN_$__________$$______ 1
#define MG________HS_CAN_$__________$$_____ 2
#define MG________HS_CAN_$__________$$___ 3
#define MG________HS_CAN_$__________$$__ 15
#pragma warning(default : 4005)

void MG________HS_CAN_Init(MG________HS_CAN * pMsg);
int MG________HS_CAN_Transmit(MG________HS_CAN * pMsg);
int MG________HS_CAN_Transmit_raw(MG________HS_CAN * pMsg);
int MG________HS_CAN_UpdateBytesFromSignals(MG________HS_CAN * pMsg);
int MG________HS_CAN_UpdateBytesFromRawSignals(MG________HS_CAN * pMsg);
#define MG________HS_CAN__275_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_Index, 0, dPhysicalValue);
#define MG________HS_CAN__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_Index, 1, dPhysicalValue);
#define MG________HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG________HS_CAN_Index, 0)
#define MG________HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG________HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG__________HS_CAN_in48_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG__________HS_CAN_in48;

#pragma warning(disable : 4005)
#define MG__________HS_CAN_in48_$__________$$_____ 0
#define MG__________HS_CAN_in48_$__________$$_____ 1
#define MG__________HS_CAN_in48_$__________$$__ 15
#define MG__________HS_CAN_in48_$________$$_____ 0
#define MG__________HS_CAN_in48_$________$$______ 1
#define MG__________HS_CAN_in48_$________$$__ 15
#define MG__________HS_CAN_in48_$_Deser_____$$_____ 0
#define MG__________HS_CAN_in48_$_Deser_____$$_____ 1
#define MG__________HS_CAN_in48_$_Deser_____$$__ 15
#define MG__________HS_CAN_in48_$_Serdis_____$$_____ 0
#define MG__________HS_CAN_in48_$_Serdis_____$$_____ 1
#define MG__________HS_CAN_in48_$_Serdis_____$$__ 15
#define MG__________HS_CAN_in48_$_ISP_____$$_____ 0
#define MG__________HS_CAN_in48_$_ISP_____$$_____ 1
#define MG__________HS_CAN_in48_$_ISP_____$$__ 15
#define MG__________HS_CAN_in48_$_ISP_____sig5_$$___ 0
#define MG__________HS_CAN_in48_$_ISP_____sig5_$$___ 1
#define MG__________HS_CAN_in48_$_ISP_____sig5_$$__ 3
#define MG__________HS_CAN_in48_$_______$$___ 0
#define MG__________HS_CAN_in48_$_______$$___ 1
#define MG__________HS_CAN_in48_$_______$$__ 3
#pragma warning(default : 4005)

void MG__________HS_CAN_in48_Init(MG__________HS_CAN_in48 * pMsg);
int MG__________HS_CAN_in48_Transmit(MG__________HS_CAN_in48 * pMsg);
int MG__________HS_CAN_in48_Transmit_raw(MG__________HS_CAN_in48 * pMsg);
int MG__________HS_CAN_in48_UpdateBytesFromSignals(MG__________HS_CAN_in48 * pMsg);
int MG__________HS_CAN_in48_UpdateBytesFromRawSignals(MG__________HS_CAN_in48 * pMsg);
#define MG__________HS_CAN_in48__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in48_Index, 0, dPhysicalValue);
#define MG__________HS_CAN_in48________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in48_Index, 1, dPhysicalValue);
#define MG__________HS_CAN_in48_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in48_Index, 2, dPhysicalValue);
#define MG__________HS_CAN_in48_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in48_Index, 3, dPhysicalValue);
#define MG__________HS_CAN_in48_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in48_Index, 4, dPhysicalValue);
#define MG__________HS_CAN_in48_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in48_Index, 5, dPhysicalValue);
#define MG__________HS_CAN_in48_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in48_Index, 6, dPhysicalValue);
#define MG__________HS_CAN_in48_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG__________HS_CAN_in48_Index, 0)
#define MG__________HS_CAN_in48_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG__________HS_CAN_in48_Index, 0, name, outDoubleValuePtr)
extern int MG__________HS_CAN_in47_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG__________HS_CAN_in47;

#pragma warning(disable : 4005)
#define MG__________HS_CAN_in47_$__________$$_____ 0
#define MG__________HS_CAN_in47_$__________$$_____ 1
#define MG__________HS_CAN_in47_$__________$$__ 15
#define MG__________HS_CAN_in47_$________$$_____ 0
#define MG__________HS_CAN_in47_$________$$______ 1
#define MG__________HS_CAN_in47_$________$$__ 15
#define MG__________HS_CAN_in47_$_Deser_____$$_____ 0
#define MG__________HS_CAN_in47_$_Deser_____$$_____ 1
#define MG__________HS_CAN_in47_$_Deser_____$$__ 15
#define MG__________HS_CAN_in47_$_Serdis_____$$_____ 0
#define MG__________HS_CAN_in47_$_Serdis_____$$_____ 1
#define MG__________HS_CAN_in47_$_Serdis_____$$__ 15
#define MG__________HS_CAN_in47_$_ISP_____$$_____ 0
#define MG__________HS_CAN_in47_$_ISP_____$$_____ 1
#define MG__________HS_CAN_in47_$_ISP_____$$__ 15
#define MG__________HS_CAN_in47_$_ISP_____sig5_$$___ 0
#define MG__________HS_CAN_in47_$_ISP_____sig5_$$___ 1
#define MG__________HS_CAN_in47_$_ISP_____sig5_$$__ 3
#define MG__________HS_CAN_in47_$_______$$___ 0
#define MG__________HS_CAN_in47_$_______$$___ 1
#define MG__________HS_CAN_in47_$_______$$__ 3
#pragma warning(default : 4005)

void MG__________HS_CAN_in47_Init(MG__________HS_CAN_in47 * pMsg);
int MG__________HS_CAN_in47_Transmit(MG__________HS_CAN_in47 * pMsg);
int MG__________HS_CAN_in47_Transmit_raw(MG__________HS_CAN_in47 * pMsg);
int MG__________HS_CAN_in47_UpdateBytesFromSignals(MG__________HS_CAN_in47 * pMsg);
int MG__________HS_CAN_in47_UpdateBytesFromRawSignals(MG__________HS_CAN_in47 * pMsg);
#define MG__________HS_CAN_in47__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in47_Index, 0, dPhysicalValue);
#define MG__________HS_CAN_in47________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in47_Index, 1, dPhysicalValue);
#define MG__________HS_CAN_in47_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in47_Index, 2, dPhysicalValue);
#define MG__________HS_CAN_in47_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in47_Index, 3, dPhysicalValue);
#define MG__________HS_CAN_in47_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in47_Index, 4, dPhysicalValue);
#define MG__________HS_CAN_in47_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in47_Index, 5, dPhysicalValue);
#define MG__________HS_CAN_in47_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in47_Index, 6, dPhysicalValue);
#define MG__________HS_CAN_in47_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG__________HS_CAN_in47_Index, 0)
#define MG__________HS_CAN_in47_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG__________HS_CAN_in47_Index, 0, name, outDoubleValuePtr)
extern int MG__________HS_CAN_in50_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG__________HS_CAN_in50;

#pragma warning(disable : 4005)
#define MG__________HS_CAN_in50_$__________$$_____ 0
#define MG__________HS_CAN_in50_$__________$$_____ 1
#define MG__________HS_CAN_in50_$__________$$__ 15
#define MG__________HS_CAN_in50_$________$$_____ 0
#define MG__________HS_CAN_in50_$________$$______ 1
#define MG__________HS_CAN_in50_$________$$__ 15
#define MG__________HS_CAN_in50_$_Deser_____$$_____ 0
#define MG__________HS_CAN_in50_$_Deser_____$$_____ 1
#define MG__________HS_CAN_in50_$_Deser_____$$__ 15
#define MG__________HS_CAN_in50_$_Serdis_____$$_____ 0
#define MG__________HS_CAN_in50_$_Serdis_____$$_____ 1
#define MG__________HS_CAN_in50_$_Serdis_____$$__ 15
#define MG__________HS_CAN_in50_$_ISP_____$$_____ 0
#define MG__________HS_CAN_in50_$_ISP_____$$_____ 1
#define MG__________HS_CAN_in50_$_ISP_____$$__ 15
#define MG__________HS_CAN_in50_$_ISP_____sig5_$$___ 0
#define MG__________HS_CAN_in50_$_ISP_____sig5_$$___ 1
#define MG__________HS_CAN_in50_$_ISP_____sig5_$$__ 3
#define MG__________HS_CAN_in50_$_______$$___ 0
#define MG__________HS_CAN_in50_$_______$$___ 1
#define MG__________HS_CAN_in50_$_______$$__ 3
#pragma warning(default : 4005)

void MG__________HS_CAN_in50_Init(MG__________HS_CAN_in50 * pMsg);
int MG__________HS_CAN_in50_Transmit(MG__________HS_CAN_in50 * pMsg);
int MG__________HS_CAN_in50_Transmit_raw(MG__________HS_CAN_in50 * pMsg);
int MG__________HS_CAN_in50_UpdateBytesFromSignals(MG__________HS_CAN_in50 * pMsg);
int MG__________HS_CAN_in50_UpdateBytesFromRawSignals(MG__________HS_CAN_in50 * pMsg);
#define MG__________HS_CAN_in50__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in50_Index, 0, dPhysicalValue);
#define MG__________HS_CAN_in50________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in50_Index, 1, dPhysicalValue);
#define MG__________HS_CAN_in50_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in50_Index, 2, dPhysicalValue);
#define MG__________HS_CAN_in50_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in50_Index, 3, dPhysicalValue);
#define MG__________HS_CAN_in50_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in50_Index, 4, dPhysicalValue);
#define MG__________HS_CAN_in50_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in50_Index, 5, dPhysicalValue);
#define MG__________HS_CAN_in50_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in50_Index, 6, dPhysicalValue);
#define MG__________HS_CAN_in50_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG__________HS_CAN_in50_Index, 0)
#define MG__________HS_CAN_in50_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG__________HS_CAN_in50_Index, 0, name, outDoubleValuePtr)
extern int MG__________HS_CAN_in52_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG__________HS_CAN_in52;

#pragma warning(disable : 4005)
#define MG__________HS_CAN_in52_$__________$$_____ 0
#define MG__________HS_CAN_in52_$__________$$_____ 1
#define MG__________HS_CAN_in52_$__________$$__ 15
#define MG__________HS_CAN_in52_$________$$_____ 0
#define MG__________HS_CAN_in52_$________$$______ 1
#define MG__________HS_CAN_in52_$________$$__ 15
#define MG__________HS_CAN_in52_$_Deser_____$$_____ 0
#define MG__________HS_CAN_in52_$_Deser_____$$_____ 1
#define MG__________HS_CAN_in52_$_Deser_____$$__ 15
#define MG__________HS_CAN_in52_$_Serdis_____$$_____ 0
#define MG__________HS_CAN_in52_$_Serdis_____$$_____ 1
#define MG__________HS_CAN_in52_$_Serdis_____$$__ 15
#define MG__________HS_CAN_in52_$_ISP_____$$_____ 0
#define MG__________HS_CAN_in52_$_ISP_____$$_____ 1
#define MG__________HS_CAN_in52_$_ISP_____$$__ 15
#define MG__________HS_CAN_in52_$_ISP_____sig5_$$___ 0
#define MG__________HS_CAN_in52_$_ISP_____sig5_$$___ 1
#define MG__________HS_CAN_in52_$_ISP_____sig5_$$__ 3
#define MG__________HS_CAN_in52_$_______$$___ 0
#define MG__________HS_CAN_in52_$_______$$___ 1
#define MG__________HS_CAN_in52_$_______$$__ 3
#pragma warning(default : 4005)

void MG__________HS_CAN_in52_Init(MG__________HS_CAN_in52 * pMsg);
int MG__________HS_CAN_in52_Transmit(MG__________HS_CAN_in52 * pMsg);
int MG__________HS_CAN_in52_Transmit_raw(MG__________HS_CAN_in52 * pMsg);
int MG__________HS_CAN_in52_UpdateBytesFromSignals(MG__________HS_CAN_in52 * pMsg);
int MG__________HS_CAN_in52_UpdateBytesFromRawSignals(MG__________HS_CAN_in52 * pMsg);
#define MG__________HS_CAN_in52__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in52_Index, 0, dPhysicalValue);
#define MG__________HS_CAN_in52________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in52_Index, 1, dPhysicalValue);
#define MG__________HS_CAN_in52_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in52_Index, 2, dPhysicalValue);
#define MG__________HS_CAN_in52_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in52_Index, 3, dPhysicalValue);
#define MG__________HS_CAN_in52_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in52_Index, 4, dPhysicalValue);
#define MG__________HS_CAN_in52_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in52_Index, 5, dPhysicalValue);
#define MG__________HS_CAN_in52_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG__________HS_CAN_in52_Index, 6, dPhysicalValue);
#define MG__________HS_CAN_in52_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG__________HS_CAN_in52_Index, 0)
#define MG__________HS_CAN_in52_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG__________HS_CAN_in52_Index, 0, name, outDoubleValuePtr)
extern int MG________HS_CAN_in54_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG________HS_CAN_in54;

#pragma warning(disable : 4005)
#define MG________HS_CAN_in54_$__________$$_____ 0
#define MG________HS_CAN_in54_$__________$$_____ 1
#define MG________HS_CAN_in54_$__________$$__ 15
#define MG________HS_CAN_in54_$________$$_____ 0
#define MG________HS_CAN_in54_$________$$______ 1
#define MG________HS_CAN_in54_$________$$__ 15
#define MG________HS_CAN_in54_$_Deser_____$$_____ 0
#define MG________HS_CAN_in54_$_Deser_____$$_____ 1
#define MG________HS_CAN_in54_$_Deser_____$$__ 15
#define MG________HS_CAN_in54_$_Serdis_____$$_____ 0
#define MG________HS_CAN_in54_$_Serdis_____$$_____ 1
#define MG________HS_CAN_in54_$_Serdis_____$$__ 15
#define MG________HS_CAN_in54_$_ISP_____$$_____ 0
#define MG________HS_CAN_in54_$_ISP_____$$_____ 1
#define MG________HS_CAN_in54_$_ISP_____$$__ 15
#define MG________HS_CAN_in54_$_ISP_____sig5_$$___ 0
#define MG________HS_CAN_in54_$_ISP_____sig5_$$___ 1
#define MG________HS_CAN_in54_$_ISP_____sig5_$$__ 3
#define MG________HS_CAN_in54_$_______$$___ 0
#define MG________HS_CAN_in54_$_______$$___ 1
#define MG________HS_CAN_in54_$_______$$__ 3
#pragma warning(default : 4005)

void MG________HS_CAN_in54_Init(MG________HS_CAN_in54 * pMsg);
int MG________HS_CAN_in54_Transmit(MG________HS_CAN_in54 * pMsg);
int MG________HS_CAN_in54_Transmit_raw(MG________HS_CAN_in54 * pMsg);
int MG________HS_CAN_in54_UpdateBytesFromSignals(MG________HS_CAN_in54 * pMsg);
int MG________HS_CAN_in54_UpdateBytesFromRawSignals(MG________HS_CAN_in54 * pMsg);
#define MG________HS_CAN_in54__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in54_Index, 0, dPhysicalValue);
#define MG________HS_CAN_in54________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in54_Index, 1, dPhysicalValue);
#define MG________HS_CAN_in54_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in54_Index, 2, dPhysicalValue);
#define MG________HS_CAN_in54_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in54_Index, 3, dPhysicalValue);
#define MG________HS_CAN_in54_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in54_Index, 4, dPhysicalValue);
#define MG________HS_CAN_in54_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in54_Index, 5, dPhysicalValue);
#define MG________HS_CAN_in54_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in54_Index, 6, dPhysicalValue);
#define MG________HS_CAN_in54_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG________HS_CAN_in54_Index, 0)
#define MG________HS_CAN_in54_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG________HS_CAN_in54_Index, 0, name, outDoubleValuePtr)
extern int MG________HS_CAN_in56_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG________HS_CAN_in56;

#pragma warning(disable : 4005)
#define MG________HS_CAN_in56_$__________$$_____ 0
#define MG________HS_CAN_in56_$__________$$_____ 1
#define MG________HS_CAN_in56_$__________$$__ 15
#define MG________HS_CAN_in56_$________$$_____ 0
#define MG________HS_CAN_in56_$________$$______ 1
#define MG________HS_CAN_in56_$________$$__ 15
#define MG________HS_CAN_in56_$_Deser_____$$_____ 0
#define MG________HS_CAN_in56_$_Deser_____$$_____ 1
#define MG________HS_CAN_in56_$_Deser_____$$__ 15
#define MG________HS_CAN_in56_$_Serdis_____$$_____ 0
#define MG________HS_CAN_in56_$_Serdis_____$$_____ 1
#define MG________HS_CAN_in56_$_Serdis_____$$__ 15
#define MG________HS_CAN_in56_$_ISP_____$$_____ 0
#define MG________HS_CAN_in56_$_ISP_____$$_____ 1
#define MG________HS_CAN_in56_$_ISP_____$$__ 15
#define MG________HS_CAN_in56_$_ISP_____sig5_$$___ 0
#define MG________HS_CAN_in56_$_ISP_____sig5_$$___ 1
#define MG________HS_CAN_in56_$_ISP_____sig5_$$__ 3
#define MG________HS_CAN_in56_$_______$$___ 0
#define MG________HS_CAN_in56_$_______$$___ 1
#define MG________HS_CAN_in56_$_______$$__ 3
#pragma warning(default : 4005)

void MG________HS_CAN_in56_Init(MG________HS_CAN_in56 * pMsg);
int MG________HS_CAN_in56_Transmit(MG________HS_CAN_in56 * pMsg);
int MG________HS_CAN_in56_Transmit_raw(MG________HS_CAN_in56 * pMsg);
int MG________HS_CAN_in56_UpdateBytesFromSignals(MG________HS_CAN_in56 * pMsg);
int MG________HS_CAN_in56_UpdateBytesFromRawSignals(MG________HS_CAN_in56 * pMsg);
#define MG________HS_CAN_in56__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in56_Index, 0, dPhysicalValue);
#define MG________HS_CAN_in56________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in56_Index, 1, dPhysicalValue);
#define MG________HS_CAN_in56_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in56_Index, 2, dPhysicalValue);
#define MG________HS_CAN_in56_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in56_Index, 3, dPhysicalValue);
#define MG________HS_CAN_in56_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in56_Index, 4, dPhysicalValue);
#define MG________HS_CAN_in56_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in56_Index, 5, dPhysicalValue);
#define MG________HS_CAN_in56_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in56_Index, 6, dPhysicalValue);
#define MG________HS_CAN_in56_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG________HS_CAN_in56_Index, 0)
#define MG________HS_CAN_in56_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG________HS_CAN_in56_Index, 0, name, outDoubleValuePtr)
extern int MG________HS_CAN_in58_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG________HS_CAN_in58;

#pragma warning(disable : 4005)
#define MG________HS_CAN_in58_$__________$$_____ 0
#define MG________HS_CAN_in58_$__________$$_____ 1
#define MG________HS_CAN_in58_$__________$$__ 15
#define MG________HS_CAN_in58_$________$$_____ 0
#define MG________HS_CAN_in58_$________$$______ 1
#define MG________HS_CAN_in58_$________$$__ 15
#define MG________HS_CAN_in58_$_Deser_____$$_____ 0
#define MG________HS_CAN_in58_$_Deser_____$$_____ 1
#define MG________HS_CAN_in58_$_Deser_____$$__ 15
#define MG________HS_CAN_in58_$_Serdis_____$$_____ 0
#define MG________HS_CAN_in58_$_Serdis_____$$_____ 1
#define MG________HS_CAN_in58_$_Serdis_____$$__ 15
#define MG________HS_CAN_in58_$_ISP_____$$_____ 0
#define MG________HS_CAN_in58_$_ISP_____$$_____ 1
#define MG________HS_CAN_in58_$_ISP_____$$__ 15
#define MG________HS_CAN_in58_$_ISP_____sig5_$$___ 0
#define MG________HS_CAN_in58_$_ISP_____sig5_$$___ 1
#define MG________HS_CAN_in58_$_ISP_____sig5_$$__ 3
#define MG________HS_CAN_in58_$_______$$___ 0
#define MG________HS_CAN_in58_$_______$$___ 1
#define MG________HS_CAN_in58_$_______$$__ 3
#pragma warning(default : 4005)

void MG________HS_CAN_in58_Init(MG________HS_CAN_in58 * pMsg);
int MG________HS_CAN_in58_Transmit(MG________HS_CAN_in58 * pMsg);
int MG________HS_CAN_in58_Transmit_raw(MG________HS_CAN_in58 * pMsg);
int MG________HS_CAN_in58_UpdateBytesFromSignals(MG________HS_CAN_in58 * pMsg);
int MG________HS_CAN_in58_UpdateBytesFromRawSignals(MG________HS_CAN_in58 * pMsg);
#define MG________HS_CAN_in58__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in58_Index, 0, dPhysicalValue);
#define MG________HS_CAN_in58________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in58_Index, 1, dPhysicalValue);
#define MG________HS_CAN_in58_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in58_Index, 2, dPhysicalValue);
#define MG________HS_CAN_in58_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in58_Index, 3, dPhysicalValue);
#define MG________HS_CAN_in58_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in58_Index, 4, dPhysicalValue);
#define MG________HS_CAN_in58_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in58_Index, 5, dPhysicalValue);
#define MG________HS_CAN_in58_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in58_Index, 6, dPhysicalValue);
#define MG________HS_CAN_in58_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG________HS_CAN_in58_Index, 0)
#define MG________HS_CAN_in58_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG________HS_CAN_in58_Index, 0, name, outDoubleValuePtr)
extern int MG________HS_CAN_in60_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ________; /// Min: 0 Max: 15 Units: 
    BYTE _________raw;
    double ______; /// Min: 0 Max: 15 Units: 
    BYTE _______raw;
    double Deser____; /// Min: 0 Max: 15 Units: 
    BYTE Deser_____raw;
    double Serdis____; /// Min: 0 Max: 15 Units: 
    BYTE Serdis_____raw;
    double ISP____; /// Min: 0 Max: 15 Units: 
    BYTE ISP_____raw;
    double ISP_____sig5; /// Min: 0 Max: 3 Units: 
    BYTE ISP_____sig5_raw;
    double _____; /// Min: 0 Max: 3 Units: 
    BYTE ______raw;
} MG________HS_CAN_in60;

#pragma warning(disable : 4005)
#define MG________HS_CAN_in60_$__________$$_____ 0
#define MG________HS_CAN_in60_$__________$$_____ 1
#define MG________HS_CAN_in60_$__________$$__ 15
#define MG________HS_CAN_in60_$________$$_____ 0
#define MG________HS_CAN_in60_$________$$______ 1
#define MG________HS_CAN_in60_$________$$__ 15
#define MG________HS_CAN_in60_$_Deser_____$$_____ 0
#define MG________HS_CAN_in60_$_Deser_____$$_____ 1
#define MG________HS_CAN_in60_$_Deser_____$$__ 15
#define MG________HS_CAN_in60_$_Serdis_____$$_____ 0
#define MG________HS_CAN_in60_$_Serdis_____$$_____ 1
#define MG________HS_CAN_in60_$_Serdis_____$$__ 15
#define MG________HS_CAN_in60_$_ISP_____$$_____ 0
#define MG________HS_CAN_in60_$_ISP_____$$_____ 1
#define MG________HS_CAN_in60_$_ISP_____$$__ 15
#define MG________HS_CAN_in60_$_ISP_____sig5_$$___ 0
#define MG________HS_CAN_in60_$_ISP_____sig5_$$___ 1
#define MG________HS_CAN_in60_$_ISP_____sig5_$$__ 3
#define MG________HS_CAN_in60_$_______$$___ 0
#define MG________HS_CAN_in60_$_______$$___ 1
#define MG________HS_CAN_in60_$_______$$__ 3
#pragma warning(default : 4005)

void MG________HS_CAN_in60_Init(MG________HS_CAN_in60 * pMsg);
int MG________HS_CAN_in60_Transmit(MG________HS_CAN_in60 * pMsg);
int MG________HS_CAN_in60_Transmit_raw(MG________HS_CAN_in60 * pMsg);
int MG________HS_CAN_in60_UpdateBytesFromSignals(MG________HS_CAN_in60 * pMsg);
int MG________HS_CAN_in60_UpdateBytesFromRawSignals(MG________HS_CAN_in60 * pMsg);
#define MG________HS_CAN_in60__________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in60_Index, 0, dPhysicalValue);
#define MG________HS_CAN_in60________PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in60_Index, 1, dPhysicalValue);
#define MG________HS_CAN_in60_Deser_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in60_Index, 2, dPhysicalValue);
#define MG________HS_CAN_in60_Serdis_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in60_Index, 3, dPhysicalValue);
#define MG________HS_CAN_in60_ISP_____PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in60_Index, 4, dPhysicalValue);
#define MG________HS_CAN_in60_ISP_____sig5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in60_Index, 5, dPhysicalValue);
#define MG________HS_CAN_in60_______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG________HS_CAN_in60_Index, 6, dPhysicalValue);
#define MG________HS_CAN_in60_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG________HS_CAN_in60_Index, 0)
#define MG________HS_CAN_in60_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG________HS_CAN_in60_Index, 0, name, outDoubleValuePtr)
extern int MG_AVM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double AutoAVMSwtSet_Sts; /// Min: 0 Max: 1 Units: 
    BYTE AutoAVMSwtSet_Sts_raw;
    double AVM_CurrSts; /// Min: 0 Max: 3 Units: 
    BYTE AVM_CurrSts_raw;
    double GuidOvlSts; /// Min: 0 Max: 3 Units: 
    BYTE GuidOvlSts_raw;
    double FrntCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE FrntCamInpFaild_raw;
    double RearCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE RearCamInpFaild_raw;
    double LeCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE LeCamInpFaild_raw;
    double RiCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE RiCamInpFaild_raw;
    double EolNotCmpltd; /// Min: 0 Max: 1 Units: 
    BYTE EolNotCmpltd_raw;
    double OvlOpFaild; /// Min: 0 Max: 1 Units: 
    BYTE OvlOpFaild_raw;
    double LaneCalSts; /// Min: 0 Max: 3 Units: 
    BYTE LaneCalSts_raw;
    double RadarDispSts; /// Min: 0 Max: 3 Units: 
    BYTE RadarDispSts_raw;
    double LaneCalFltSts; /// Min: 0 Max: 7 Units: 
    BYTE LaneCalFltSts_raw;
    double AutoViewChgFctSts; /// Min: 0 Max: 1 Units: 
    BYTE AutoViewChgFctSts_raw;
    double CarMdlTrsprcySts; /// Min: 0 Max: 3 Units: 
    BYTE CarMdlTrsprcySts_raw;
    double CarMdlDispSts; /// Min: 0 Max: 1 Units: 
    BYTE CarMdlDispSts_raw;
    double CurrCalResultSts; /// Min: 0 Max: 1 Units: 
    BYTE CurrCalResultSts_raw;
    double MdlColrSts; /// Min: 0 Max: 15 Units: 
    BYTE MdlColrSts_raw;
    double SigViewIndcn; /// Min: 0 Max: 63 Units: 
    BYTE SigViewIndcn_raw;
    double HAP_DispCmd; /// Min: 0 Max: 1 Units: 
    BYTE HAP_DispCmd_raw;
    double MOD_AlarmSts; /// Min: 0 Max: 1 Units: 
    BYTE MOD_AlarmSts_raw;
    double AVM_3DAngSts; /// Min: 0 Max: 360 Units: deg
    WORD AVM_3DAngSts_raw;
    double MOD_WorkSts; /// Min: 0 Max: 1 Units: 
    BYTE MOD_WorkSts_raw;
    double HAP_Hmi_Index; /// Min: 0 Max: 7 Units: 
    BYTE HAP_Hmi_Index_raw;
    double DVRWorkSts; /// Min: 0 Max: 3 Units: 
    BYTE DVRWorkSts_raw;
} MG_AVM1_HS_CAN;

#define MG_AVM1_HS_CAN_SendType 0
#define MG_AVM1_HS_CAN_SendRate 50
#define MG_AVM1_HS_CAN_SendRateFast 0
#define MG_AVM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_AVM1_HS_CAN_$_AutoAVMSwtSet_Sts_$$__Close_ 0
#define MG_AVM1_HS_CAN_$_AutoAVMSwtSet_Sts_$$__Open_ 1
#define MG_AVM1_HS_CAN_$_AutoAVMSwtSet_Sts_SendType 0
#define MG_AVM1_HS_CAN_$_AVM_CurrSts_$$__STANDBY_State_OFF__ 0
#define MG_AVM1_HS_CAN_$_AVM_CurrSts_$$__NORMAL_State_ON__ 1
#define MG_AVM1_HS_CAN_$_AVM_CurrSts_$$__AVM_no_video_______ 2
#define MG_AVM1_HS_CAN_$_AVM_CurrSts_$$__Reserved_ 3
#define MG_AVM1_HS_CAN_$_AVM_CurrSts_SendType 0
#define MG_AVM1_HS_CAN_$_GuidOvlSts_$$__Around_View_and_Single_View_ 0
#define MG_AVM1_HS_CAN_$_GuidOvlSts_$$__Only_Around_View__ 1
#define MG_AVM1_HS_CAN_$_GuidOvlSts_$$__Only_Single_View__ 2
#define MG_AVM1_HS_CAN_$_GuidOvlSts_$$__No_Guidance__ 3
#define MG_AVM1_HS_CAN_$_GuidOvlSts_SendType 0
#define MG_AVM1_HS_CAN_$_FrntCamInpFaild_$$__False_ 0
#define MG_AVM1_HS_CAN_$_FrntCamInpFaild_$$__True_ 1
#define MG_AVM1_HS_CAN_$_FrntCamInpFaild_SendType 0
#define MG_AVM1_HS_CAN_$_RearCamInpFaild_$$__False_ 0
#define MG_AVM1_HS_CAN_$_RearCamInpFaild_$$__True_ 1
#define MG_AVM1_HS_CAN_$_RearCamInpFaild_SendType 0
#define MG_AVM1_HS_CAN_$_LeCamInpFaild_$$__False_ 0
#define MG_AVM1_HS_CAN_$_LeCamInpFaild_$$__True_ 1
#define MG_AVM1_HS_CAN_$_LeCamInpFaild_SendType 0
#define MG_AVM1_HS_CAN_$_RiCamInpFaild_$$__False_ 0
#define MG_AVM1_HS_CAN_$_RiCamInpFaild_$$__True_ 1
#define MG_AVM1_HS_CAN_$_RiCamInpFaild_SendType 0
#define MG_AVM1_HS_CAN_$_EolNotCmpltd_$$__False_ 0
#define MG_AVM1_HS_CAN_$_EolNotCmpltd_$$__True_ 1
#define MG_AVM1_HS_CAN_$_EolNotCmpltd_SendType 0
#define MG_AVM1_HS_CAN_$_OvlOpFaild_$$__False_ 0
#define MG_AVM1_HS_CAN_$_OvlOpFaild_$$__True_ 1
#define MG_AVM1_HS_CAN_$_OvlOpFaild_SendType 0
#define MG_AVM1_HS_CAN_$_LaneCalSts_$$__No_Commands_ 0
#define MG_AVM1_HS_CAN_$_LaneCalSts_$$__In_Calibration_process_ 1
#define MG_AVM1_HS_CAN_$_LaneCalSts_$$__Calibration_success_ 2
#define MG_AVM1_HS_CAN_$_LaneCalSts_$$__Calibration_failure_ 3
#define MG_AVM1_HS_CAN_$_LaneCalSts_SendType 0
#define MG_AVM1_HS_CAN_$_RadarDispSts_$$__Both_Around_View_and_Single_View 0
#define MG_AVM1_HS_CAN_$_RadarDispSts_$$__Only_Around_View 1
#define MG_AVM1_HS_CAN_$_RadarDispSts_$$__Only_Single_View 2
#define MG_AVM1_HS_CAN_$_RadarDispSts_$$__No_Display_ 3
#define MG_AVM1_HS_CAN_$_RadarDispSts_SendType 0
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_$$__No_fault_ 0
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_$$__Front_view_Calibration_abnormal_ 1
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_$$__Rear_view_Calibration_abnormal_ 2
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_$$__left_view_Calibration_abnormal_ 3
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_$$__Right_view_Calibration_abnormal_ 4
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_$$__Calibration_data_storage_failed_ 5
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_$$__Reserved_ 6
#define MG_AVM1_HS_CAN_$_LaneCalFltSts_SendType 0
#define MG_AVM1_HS_CAN_$_AutoViewChgFctSts_$$__Closed_ 0
#define MG_AVM1_HS_CAN_$_AutoViewChgFctSts_$$__Open_ 1
#define MG_AVM1_HS_CAN_$_AutoViewChgFctSts_SendType 0
#define MG_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Opaque_ 0
#define MG_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Translucent_ 1
#define MG_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Completely_transparent_ 2
#define MG_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Reserved_ 3
#define MG_AVM1_HS_CAN_$_CarMdlTrsprcySts_SendType 0
#define MG_AVM1_HS_CAN_$_CarMdlDispSts_$$__2D_mode_ 0
#define MG_AVM1_HS_CAN_$_CarMdlDispSts_$$__3D_mode_ 1
#define MG_AVM1_HS_CAN_$_CarMdlDispSts_SendType 0
#define MG_AVM1_HS_CAN_$_CurrCalResultSts_$$__Use_Factory_Calibration_Result_ 0
#define MG_AVM1_HS_CAN_$_CurrCalResultSts_$$__Use_Lane_Calibration_Result_ 1
#define MG_AVM1_HS_CAN_$_CurrCalResultSts_SendType 0
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Silvery_ 0
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Red_ 1
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Gray_ 2
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__White_ 3
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Black_ 4
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Brown_ 5
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Blue_ 6
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Orange_ 7
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Green_ 8
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Gold_ 9
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Purple_ 10
#define MG_AVM1_HS_CAN_$_MdlColrSts_$$__Reserved_ 11
#define MG_AVM1_HS_CAN_$_MdlColrSts_SendType 0
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$_Reversed 25
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__No_Commands_ 0
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_to_Center_View_ 1
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_to_Center_View__ 2
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_to_Center_View_ 3
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_to_Center_View_ 4
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_Front_to_Center_View_ 5
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_Front_to_Center_View_ 6
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_Rear_to_Center_View_ 7
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_Rear_to_Center_View_ 8
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_View_ 9
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_View_ 10
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_View_ 11
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_View_ 12
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_Turn_3D_View_ 13
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_Turn_3D_View_ 14
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_Overlook_View_ 15
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_Overlook_View_ 16
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_180_Deg_View_ 17
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_180_Deg_View_ 18
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_Wheel_View_ 19
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_Wheel_View_ 20
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_Wash_View_ 21
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_Wash_View_ 22
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__Free_3D_View_ 23
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$_Left_and_Right_View 24
#define MG_AVM1_HS_CAN_$_SigViewIndcn_$$__3D_Car_Model_Round_View_ 63
#define MG_AVM1_HS_CAN_$_SigViewIndcn_SendType 0
#define MG_AVM1_HS_CAN_$_HAP_DispCmd_$$__OFF_ 0
#define MG_AVM1_HS_CAN_$_HAP_DispCmd_$$__ON_ 1
#define MG_AVM1_HS_CAN_$_HAP_DispCmd_SendType 0
#define MG_AVM1_HS_CAN_$_MOD_AlarmSts_$$__OFF_ 0
#define MG_AVM1_HS_CAN_$_MOD_AlarmSts_$$__ON_ 1
#define MG_AVM1_HS_CAN_$_MOD_AlarmSts_SendType 0
#define MG_AVM1_HS_CAN_$_AVM_3DAngSts_$$__Not_active__ 0
#define MG_AVM1_HS_CAN_$_AVM_3DAngSts_$$__0_360___ 1
#define MG_AVM1_HS_CAN_$_AVM_3DAngSts_$$__reserved__ 362
#define MG_AVM1_HS_CAN_$_AVM_3DAngSts_$$__invalid_ 511
#define MG_AVM1_HS_CAN_$_AVM_3DAngSts_SendType 0
#define MG_AVM1_HS_CAN_$_MOD_WorkSts_$$__OFF_ 0
#define MG_AVM1_HS_CAN_$_MOD_WorkSts_$$__ON_ 1
#define MG_AVM1_HS_CAN_$_MOD_WorkSts_SendType 0
#define MG_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Reserved_ 0
#define MG_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Main_Screen_ 1
#define MG_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__EOL_Test_ 2
#define MG_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__P2P_Screen_ 3
#define MG_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Assist_Screen_ 4
#define MG_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Reserved_ 5
#define MG_AVM1_HS_CAN_$_HAP_Hmi_Index_SendType 0
#define MG_AVM1_HS_CAN_$_DVRWorkSts_$$__DVR_STANDBY_ 0
#define MG_AVM1_HS_CAN_$_DVRWorkSts_$$__DVR_ACTIVE_ 1
#define MG_AVM1_HS_CAN_$_DVRWorkSts_$$__DVR_FAILED_ 2
#define MG_AVM1_HS_CAN_$_DVRWorkSts_$$__Reseeved_ 3
#define MG_AVM1_HS_CAN_$_DVRWorkSts_SendType 0
#pragma warning(default : 4005)

void MG_AVM1_HS_CAN_Init(MG_AVM1_HS_CAN * pMsg);
int MG_AVM1_HS_CAN_Transmit(MG_AVM1_HS_CAN * pMsg);
int MG_AVM1_HS_CAN_Transmit_raw(MG_AVM1_HS_CAN * pMsg);
int MG_AVM1_HS_CAN_UpdateBytesFromSignals(MG_AVM1_HS_CAN * pMsg);
int MG_AVM1_HS_CAN_UpdateBytesFromRawSignals(MG_AVM1_HS_CAN * pMsg);
#define MG_AVM1_HS_CAN_AutoAVMSwtSet_Sts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 0, dPhysicalValue);
#define MG_AVM1_HS_CAN_AVM_CurrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 1, dPhysicalValue);
#define MG_AVM1_HS_CAN_GuidOvlSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 2, dPhysicalValue);
#define MG_AVM1_HS_CAN_FrntCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 3, dPhysicalValue);
#define MG_AVM1_HS_CAN_RearCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 4, dPhysicalValue);
#define MG_AVM1_HS_CAN_LeCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 5, dPhysicalValue);
#define MG_AVM1_HS_CAN_RiCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 6, dPhysicalValue);
#define MG_AVM1_HS_CAN_EolNotCmpltd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 7, dPhysicalValue);
#define MG_AVM1_HS_CAN_OvlOpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 8, dPhysicalValue);
#define MG_AVM1_HS_CAN_LaneCalSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 9, dPhysicalValue);
#define MG_AVM1_HS_CAN_RadarDispSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 10, dPhysicalValue);
#define MG_AVM1_HS_CAN_LaneCalFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 11, dPhysicalValue);
#define MG_AVM1_HS_CAN_AutoViewChgFctSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 12, dPhysicalValue);
#define MG_AVM1_HS_CAN_CarMdlTrsprcySts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 13, dPhysicalValue);
#define MG_AVM1_HS_CAN_CarMdlDispSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 14, dPhysicalValue);
#define MG_AVM1_HS_CAN_CurrCalResultSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 15, dPhysicalValue);
#define MG_AVM1_HS_CAN_MdlColrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 16, dPhysicalValue);
#define MG_AVM1_HS_CAN_SigViewIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 17, dPhysicalValue);
#define MG_AVM1_HS_CAN_HAP_DispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 18, dPhysicalValue);
#define MG_AVM1_HS_CAN_MOD_AlarmSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 19, dPhysicalValue);
#define MG_AVM1_HS_CAN_AVM_3DAngSts_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 20, dPhysicalValue);
#define MG_AVM1_HS_CAN_MOD_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 21, dPhysicalValue);
#define MG_AVM1_HS_CAN_HAP_Hmi_Index_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 22, dPhysicalValue);
#define MG_AVM1_HS_CAN_DVRWorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_AVM1_HS_CAN_Index, 23, dPhysicalValue);
#define MG_AVM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_AVM1_HS_CAN_Index, 0)
#define MG_AVM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_AVM1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_65C_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double SlotNum; /// Min: 0 Max: 255 Units: 
    BYTE SlotNum_raw;
} MG_65C_HS_CAN;


void MG_65C_HS_CAN_Init(MG_65C_HS_CAN * pMsg);
int MG_65C_HS_CAN_Transmit(MG_65C_HS_CAN * pMsg);
int MG_65C_HS_CAN_Transmit_raw(MG_65C_HS_CAN * pMsg);
int MG_65C_HS_CAN_UpdateBytesFromSignals(MG_65C_HS_CAN * pMsg);
int MG_65C_HS_CAN_UpdateBytesFromRawSignals(MG_65C_HS_CAN * pMsg);
#define MG_65C_HS_CAN_SlotNum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65C_HS_CAN_Index, 0, dPhysicalValue);
#define MG_65C_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_65C_HS_CAN_Index, 0)
#define MG_65C_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_65C_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_65D_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Slot1_Coordinate_A_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot1_Coordinate_A_X_raw;
    double Slot1_Coordinate_A_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot1_Coordinate_A_Y_raw;
    double Slot1_Coordinate_C_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot1_Coordinate_C_X_raw;
    double Slot1_Coordinate_C_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot1_Coordinate_C_Y_raw;
    double Slot2_Coordinate_A_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot2_Coordinate_A_X_raw;
    double Slot2_Coordinate_A_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot2_Coordinate_A_Y_raw;
    double Slot2_Coordinate_C_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot2_Coordinate_C_X_raw;
    double Slot2_Coordinate_C_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot2_Coordinate_C_Y_raw;
} MG_65D_HS_CAN;


void MG_65D_HS_CAN_Init(MG_65D_HS_CAN * pMsg);
int MG_65D_HS_CAN_Transmit(MG_65D_HS_CAN * pMsg);
int MG_65D_HS_CAN_Transmit_raw(MG_65D_HS_CAN * pMsg);
int MG_65D_HS_CAN_UpdateBytesFromSignals(MG_65D_HS_CAN * pMsg);
int MG_65D_HS_CAN_UpdateBytesFromRawSignals(MG_65D_HS_CAN * pMsg);
#define MG_65D_HS_CAN_Slot1_Coordinate_A_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 0, dPhysicalValue);
#define MG_65D_HS_CAN_Slot1_Coordinate_A_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 1, dPhysicalValue);
#define MG_65D_HS_CAN_Slot1_Coordinate_C_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 2, dPhysicalValue);
#define MG_65D_HS_CAN_Slot1_Coordinate_C_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 3, dPhysicalValue);
#define MG_65D_HS_CAN_Slot2_Coordinate_A_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 4, dPhysicalValue);
#define MG_65D_HS_CAN_Slot2_Coordinate_A_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 5, dPhysicalValue);
#define MG_65D_HS_CAN_Slot2_Coordinate_C_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 6, dPhysicalValue);
#define MG_65D_HS_CAN_Slot2_Coordinate_C_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65D_HS_CAN_Index, 7, dPhysicalValue);
#define MG_65D_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_65D_HS_CAN_Index, 0)
#define MG_65D_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_65D_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_65E_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Slot3_Coordinate_A_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot3_Coordinate_A_X_raw;
    double Slot3_Coordinate_A_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot3_Coordinate_A_Y_raw;
    double Slot3_Coordinate_C_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot3_Coordinate_C_X_raw;
    double Slot3_Coordinate_C_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot3_Coordinate_C_Y_raw;
    double Slot4_Coordinate_A_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot4_Coordinate_A_X_raw;
    double Slot4_Coordinate_A_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot4_Coordinate_A_Y_raw;
    double Slot4_Coordinate_C_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot4_Coordinate_C_X_raw;
    double Slot4_Coordinate_C_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot4_Coordinate_C_Y_raw;
} MG_65E_HS_CAN;


void MG_65E_HS_CAN_Init(MG_65E_HS_CAN * pMsg);
int MG_65E_HS_CAN_Transmit(MG_65E_HS_CAN * pMsg);
int MG_65E_HS_CAN_Transmit_raw(MG_65E_HS_CAN * pMsg);
int MG_65E_HS_CAN_UpdateBytesFromSignals(MG_65E_HS_CAN * pMsg);
int MG_65E_HS_CAN_UpdateBytesFromRawSignals(MG_65E_HS_CAN * pMsg);
#define MG_65E_HS_CAN_Slot3_Coordinate_A_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 0, dPhysicalValue);
#define MG_65E_HS_CAN_Slot3_Coordinate_A_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 1, dPhysicalValue);
#define MG_65E_HS_CAN_Slot3_Coordinate_C_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 2, dPhysicalValue);
#define MG_65E_HS_CAN_Slot3_Coordinate_C_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 3, dPhysicalValue);
#define MG_65E_HS_CAN_Slot4_Coordinate_A_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 4, dPhysicalValue);
#define MG_65E_HS_CAN_Slot4_Coordinate_A_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 5, dPhysicalValue);
#define MG_65E_HS_CAN_Slot4_Coordinate_C_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 6, dPhysicalValue);
#define MG_65E_HS_CAN_Slot4_Coordinate_C_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65E_HS_CAN_Index, 7, dPhysicalValue);
#define MG_65E_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_65E_HS_CAN_Index, 0)
#define MG_65E_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_65E_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_65F_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Slot5_Coordinate_A_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot5_Coordinate_A_X_raw;
    double Slot5_Coordinate_A_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot5_Coordinate_A_Y_raw;
    double Slot5_Coordinate_C_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot5_Coordinate_C_X_raw;
    double Slot5_Coordinate_C_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot5_Coordinate_C_Y_raw;
    double Slot6_Coordinate_A_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot6_Coordinate_A_X_raw;
    double Slot6_Coordinate_A_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot6_Coordinate_A_Y_raw;
    double Slot6_Coordinate_C_X; /// Min: 0 Max: 255 Units: 
    BYTE Slot6_Coordinate_C_X_raw;
    double Slot6_Coordinate_C_Y; /// Min: 0 Max: 255 Units: 
    BYTE Slot6_Coordinate_C_Y_raw;
} MG_65F_HS_CAN;


void MG_65F_HS_CAN_Init(MG_65F_HS_CAN * pMsg);
int MG_65F_HS_CAN_Transmit(MG_65F_HS_CAN * pMsg);
int MG_65F_HS_CAN_Transmit_raw(MG_65F_HS_CAN * pMsg);
int MG_65F_HS_CAN_UpdateBytesFromSignals(MG_65F_HS_CAN * pMsg);
int MG_65F_HS_CAN_UpdateBytesFromRawSignals(MG_65F_HS_CAN * pMsg);
#define MG_65F_HS_CAN_Slot5_Coordinate_A_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 0, dPhysicalValue);
#define MG_65F_HS_CAN_Slot5_Coordinate_A_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 1, dPhysicalValue);
#define MG_65F_HS_CAN_Slot5_Coordinate_C_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 2, dPhysicalValue);
#define MG_65F_HS_CAN_Slot5_Coordinate_C_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 3, dPhysicalValue);
#define MG_65F_HS_CAN_Slot6_Coordinate_A_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 4, dPhysicalValue);
#define MG_65F_HS_CAN_Slot6_Coordinate_A_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 5, dPhysicalValue);
#define MG_65F_HS_CAN_Slot6_Coordinate_C_X_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 6, dPhysicalValue);
#define MG_65F_HS_CAN_Slot6_Coordinate_C_Y_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_65F_HS_CAN_Index, 7, dPhysicalValue);
#define MG_65F_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_65F_HS_CAN_Index, 0)
#define MG_65F_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_65F_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_MCU_____HS_CAN_in64_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ____; /// Min: 0 Max: 0 Units: 
    BYTE _____raw;
} MG_MCU_____HS_CAN_in64;


void MG_MCU_____HS_CAN_in64_Init(MG_MCU_____HS_CAN_in64 * pMsg);
int MG_MCU_____HS_CAN_in64_Transmit(MG_MCU_____HS_CAN_in64 * pMsg);
int MG_MCU_____HS_CAN_in64_Transmit_raw(MG_MCU_____HS_CAN_in64 * pMsg);
int MG_MCU_____HS_CAN_in64_UpdateBytesFromSignals(MG_MCU_____HS_CAN_in64 * pMsg);
int MG_MCU_____HS_CAN_in64_UpdateBytesFromRawSignals(MG_MCU_____HS_CAN_in64 * pMsg);
#define MG_MCU_____HS_CAN_in64______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_MCU_____HS_CAN_in64_Index, 0, dPhysicalValue);
int MG_MCU_____HS_CAN_in64_GetSignal______TextW(LPWSTR szData, int nSize);
int MG_MCU_____HS_CAN_in64_SetSignal______TextW(MG_MCU_____HS_CAN_in64* pMsg, LPCWSTR szData, int nSize);
#define MG_MCU_____HS_CAN_in64_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_MCU_____HS_CAN_in64_Index, 0)
#define MG_MCU_____HS_CAN_in64_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_MCU_____HS_CAN_in64_Index, 0, name, outDoubleValuePtr)
extern int MG_CAL_____HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ____; /// Min: 0 Max: 0 Units: 
    BYTE _____raw;
} MG_CAL_____HS_CAN;


void MG_CAL_____HS_CAN_Init(MG_CAL_____HS_CAN * pMsg);
int MG_CAL_____HS_CAN_Transmit(MG_CAL_____HS_CAN * pMsg);
int MG_CAL_____HS_CAN_Transmit_raw(MG_CAL_____HS_CAN * pMsg);
int MG_CAL_____HS_CAN_UpdateBytesFromSignals(MG_CAL_____HS_CAN * pMsg);
int MG_CAL_____HS_CAN_UpdateBytesFromRawSignals(MG_CAL_____HS_CAN * pMsg);
#define MG_CAL_____HS_CAN______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_CAL_____HS_CAN_Index, 0, dPhysicalValue);
int MG_CAL_____HS_CAN_GetSignal______TextW(LPWSTR szData, int nSize);
int MG_CAL_____HS_CAN_SetSignal______TextW(MG_CAL_____HS_CAN* pMsg, LPCWSTR szData, int nSize);
#define MG_CAL_____HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_CAL_____HS_CAN_Index, 0)
#define MG_CAL_____HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_CAL_____HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_DSP_____HS_CAN_in69_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ____; /// Min: 0 Max: 0 Units: 
    BYTE _____raw;
} MG_DSP_____HS_CAN_in69;


void MG_DSP_____HS_CAN_in69_Init(MG_DSP_____HS_CAN_in69 * pMsg);
int MG_DSP_____HS_CAN_in69_Transmit(MG_DSP_____HS_CAN_in69 * pMsg);
int MG_DSP_____HS_CAN_in69_Transmit_raw(MG_DSP_____HS_CAN_in69 * pMsg);
int MG_DSP_____HS_CAN_in69_UpdateBytesFromSignals(MG_DSP_____HS_CAN_in69 * pMsg);
int MG_DSP_____HS_CAN_in69_UpdateBytesFromRawSignals(MG_DSP_____HS_CAN_in69 * pMsg);
#define MG_DSP_____HS_CAN_in69______PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_DSP_____HS_CAN_in69_Index, 0, dPhysicalValue);
int MG_DSP_____HS_CAN_in69_GetSignal______TextW(LPWSTR szData, int nSize);
int MG_DSP_____HS_CAN_in69_SetSignal______TextW(MG_DSP_____HS_CAN_in69* pMsg, LPCWSTR szData, int nSize);
#define MG_DSP_____HS_CAN_in69_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_DSP_____HS_CAN_in69_Index, 0)
#define MG_DSP_____HS_CAN_in69_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_DSP_____HS_CAN_in69_Index, 0, name, outDoubleValuePtr)
extern int MG_APS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_APS1; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_APS1_raw;
    double APS_BrkFctnMod; /// Min: 0 Max: 7 Units: 
    BYTE APS_BrkFctnMod_raw;
    double APS_ESP_TgtGearReq; /// Min: 0 Max: 7 Units: 
    BYTE APS_ESP_TgtGearReq_raw;
    double APS_ReqEPSTgtAngValid; /// Min: 0 Max: 1 Units: 
    BYTE APS_ReqEPSTgtAngValid_raw;
    double APS_ReqCtrlEPS; /// Min: 0 Max: 1 Units: 
    BYTE APS_ReqCtrlEPS_raw;
    double APS_ReqEPSTgtAng; /// Min: -3276.8 Max: 3276.7 Units: deg
    WORD APS_ReqEPSTgtAng_raw;
    double APS_ESP_SpdLimn; /// Min: 0 Max: 25.5 Units: kmh
    BYTE APS_ESP_SpdLimn_raw;
    double APS_ReqCtrlEPSVld; /// Min: 0 Max: 1 Units: 
    BYTE APS_ReqCtrlEPSVld_raw;
    double APS_BrkModSts; /// Min: 0 Max: 7 Units: 
    BYTE APS_BrkModSts_raw;
    double APS_ESP_BrkDistance; /// Min: 0 Max: 4095 Units: cm
    WORD APS_ESP_BrkDistance_raw;
    double APS_BrkCategory; /// Min: 0 Max: 3 Units: 
    BYTE APS_BrkCategory_raw;
    double APS_EPS_WorkSts; /// Min: 0 Max: 3 Units: 
    BYTE APS_EPS_WorkSts_raw;
    double RollingCounter_APS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_APS1_raw;
} MG_APS1_HS_CAN;

#define MG_APS1_HS_CAN_SendType 0
#define MG_APS1_HS_CAN_SendRate 20
#define MG_APS1_HS_CAN_SendRateFast 0
#define MG_APS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_APS1_HS_CAN_$_Checksum_APS1_$$__Valid_Value_ 0
#define MG_APS1_HS_CAN_$_Checksum_APS1_SendType 0
#define MG_APS1_HS_CAN_$_APS_BrkFctnMod_$$__ParkAssist_NoSignal_ 0
#define MG_APS1_HS_CAN_$_APS_BrkFctnMod_$$__Reserved_ 1
#define MG_APS1_HS_CAN_$_APS_BrkFctnMod_$$__Reserved_ 2
#define MG_APS1_HS_CAN_$_APS_BrkFctnMod_$$__ParkAssist_AutomaticPark_ 3
#define MG_APS1_HS_CAN_$_APS_BrkFctnMod_$$__Reserved_ 4
#define MG_APS1_HS_CAN_$_APS_BrkFctnMod_SendType 0
#define MG_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__No_request_ 0
#define MG_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__P__ 1
#define MG_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__R_ 2
#define MG_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__N_ 3
#define MG_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__D_ 4
#define MG_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__Reserved_ 5
#define MG_APS1_HS_CAN_$_APS_ESP_TgtGearReq_SendType 0
#define MG_APS1_HS_CAN_$_APS_ReqEPSTgtAngValid_$$__Invalid_ 0
#define MG_APS1_HS_CAN_$_APS_ReqEPSTgtAngValid_$$__Valid_ 1
#define MG_APS1_HS_CAN_$_APS_ReqEPSTgtAngValid_SendType 0
#define MG_APS1_HS_CAN_$_APS_ReqCtrlEPS_$$__No_request_ 0
#define MG_APS1_HS_CAN_$_APS_ReqCtrlEPS_$$__Request_ 1
#define MG_APS1_HS_CAN_$_APS_ReqCtrlEPS_SendType 0
#define MG_APS1_HS_CAN_$_APS_ReqEPSTgtAng_$$__Valid_value_ 0
#define MG_APS1_HS_CAN_$_APS_ReqEPSTgtAng_SendType 0
#define MG_APS1_HS_CAN_$_APS_ESP_SpdLimn_$$__Valid_Value_ 0
#define MG_APS1_HS_CAN_$_APS_ESP_SpdLimn_SendType 0
#define MG_APS1_HS_CAN_$_APS_ReqCtrlEPSVld_$$__Invalid_ 0
#define MG_APS1_HS_CAN_$_APS_ReqCtrlEPSVld_$$__Valid_ 1
#define MG_APS1_HS_CAN_$_APS_ReqCtrlEPSVld_SendType 0
#define MG_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Int_ 0
#define MG_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Standby_ 1
#define MG_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Active_ 2
#define MG_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_ManeuverFinished_ 3
#define MG_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Suspend__Reserved__ 4
#define MG_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Abort_ 5
#define MG_APS1_HS_CAN_$_APS_BrkModSts_$$__Reserved__ 6
#define MG_APS1_HS_CAN_$_APS_BrkModSts_SendType 0
#define MG_APS1_HS_CAN_$_APS_ESP_BrkDistance_$$__Valid_value_ 0
#define MG_APS1_HS_CAN_$_APS_ESP_BrkDistance_SendType 0
#define MG_APS1_HS_CAN_$_APS_BrkCategory_$$__ParkAssist_Idle_ 0
#define MG_APS1_HS_CAN_$_APS_BrkCategory_$$__ParkAssist_Comfort_ 1
#define MG_APS1_HS_CAN_$_APS_BrkCategory_$$__ParkAssist_Emergency_ 2
#define MG_APS1_HS_CAN_$_APS_BrkCategory_$$__Reserved_ 3
#define MG_APS1_HS_CAN_$_APS_BrkCategory_SendType 0
#define MG_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Disable_ 0
#define MG_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Enable_ 1
#define MG_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Active_ 2
#define MG_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Failed_ 3
#define MG_APS1_HS_CAN_$_APS_EPS_WorkSts_SendType 0
#define MG_APS1_HS_CAN_$_RollingCounter_APS1_$$__Valid_value_ 0
#define MG_APS1_HS_CAN_$_RollingCounter_APS1_$$__Invalid_value_ 15
#define MG_APS1_HS_CAN_$_RollingCounter_APS1_SendType 0
#pragma warning(default : 4005)

void MG_APS1_HS_CAN_Init(MG_APS1_HS_CAN * pMsg);
int MG_APS1_HS_CAN_Transmit(MG_APS1_HS_CAN * pMsg);
int MG_APS1_HS_CAN_Transmit_raw(MG_APS1_HS_CAN * pMsg);
int MG_APS1_HS_CAN_UpdateBytesFromSignals(MG_APS1_HS_CAN * pMsg);
int MG_APS1_HS_CAN_UpdateBytesFromRawSignals(MG_APS1_HS_CAN * pMsg);
#define MG_APS1_HS_CAN_Checksum_APS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 0, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_BrkFctnMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 1, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_ESP_TgtGearReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 2, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_ReqEPSTgtAngValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 3, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_ReqCtrlEPS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 4, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_ReqEPSTgtAng_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 5, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_ESP_SpdLimn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 6, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_ReqCtrlEPSVld_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 7, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_BrkModSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 8, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_ESP_BrkDistance_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 9, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_BrkCategory_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 10, dPhysicalValue);
#define MG_APS1_HS_CAN_APS_EPS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 11, dPhysicalValue);
#define MG_APS1_HS_CAN_RollingCounter_APS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS1_HS_CAN_Index, 12, dPhysicalValue);
#define MG_APS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_APS1_HS_CAN_Index, 0)
#define MG_APS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_APS1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_APS3_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FAPA_FRSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_FRSideSnsrFltSts_raw;
    double FAPA_FLSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_FLSideSnsrFltSts_raw;
    double FAPA_RRSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_RRSideSnsrFltSts_raw;
    double FAPA_RLSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_RLSideSnsrFltSts_raw;
    double FAPA_ObjRiSideAr1; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr1_raw;
    double FAPA_ObjRiSideAr2; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr2_raw;
    double FAPA_ObjRiSideAr3; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr3_raw;
    double FAPA_ObjRiSideAr4; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr4_raw;
    double FAPA_ObjRiSideAr5; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr5_raw;
    double FAPA_ObjLeSideAr1; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr1_raw;
    double FAPA_ObjLeSideAr2; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr2_raw;
    double FAPA_ObjLeSideAr3; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr3_raw;
    double FAPA_ObjLeSideAr4; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr4_raw;
    double FAPA_ObjLeSideAr5; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr5_raw;
    double SDW_SoundIndcn; /// Min: 0 Max: 7 Units: 
    BYTE SDW_SoundIndcn_raw;
    double SDWActive; /// Min: 0 Max: 1 Units: 
    BYTE SDWActive_raw;
} MG_APS3_HS_CAN;

#define MG_APS3_HS_CAN_SendType 0
#define MG_APS3_HS_CAN_SendRate 100
#define MG_APS3_HS_CAN_SendRateFast 0
#define MG_APS3_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_APS3_HS_CAN_$_FAPA_FRSideSnsrFltSts_$$__Sensor_normal_ 0
#define MG_APS3_HS_CAN_$_FAPA_FRSideSnsrFltSts_$$__Sensor_fault_ 1
#define MG_APS3_HS_CAN_$_FAPA_FRSideSnsrFltSts_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_FLSideSnsrFltSts_$$__Sensor_normal_ 0
#define MG_APS3_HS_CAN_$_FAPA_FLSideSnsrFltSts_$$__Sensor_fault_ 1
#define MG_APS3_HS_CAN_$_FAPA_FLSideSnsrFltSts_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_RRSideSnsrFltSts_$$__Sensor_normal_ 0
#define MG_APS3_HS_CAN_$_FAPA_RRSideSnsrFltSts_$$__Sensor_fault_ 1
#define MG_APS3_HS_CAN_$_FAPA_RRSideSnsrFltSts_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_RLSideSnsrFltSts_$$__Sensor_normal_ 0
#define MG_APS3_HS_CAN_$_FAPA_RLSideSnsrFltSts_$$__Sensor_fault_ 1
#define MG_APS3_HS_CAN_$_FAPA_RLSideSnsrFltSts_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_SendType 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$__No_object_ 0
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_1__0_10cm_ 1
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_2__11_20cm_ 2
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_3__21_30cm_ 3
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_4__31_40cm_ 4
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_5__41_50cm_ 5
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_6__51_60cm_ 6
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$__Reserved_ 7
#define MG_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_SendType 0
#define MG_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_0___No_warning_ 0
#define MG_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_1___Long_beep_ 1
#define MG_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_2___1_5_Hz_ 2
#define MG_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_3___3Hz_ 3
#define MG_APS3_HS_CAN_$_SDW_SoundIndcn_SendType 0
#define MG_APS3_HS_CAN_$_SDWActive_$$__Inactive_ 0
#define MG_APS3_HS_CAN_$_SDWActive_$$__Active_ 1
#define MG_APS3_HS_CAN_$_SDWActive_SendType 0
#pragma warning(default : 4005)

void MG_APS3_HS_CAN_Init(MG_APS3_HS_CAN * pMsg);
int MG_APS3_HS_CAN_Transmit(MG_APS3_HS_CAN * pMsg);
int MG_APS3_HS_CAN_Transmit_raw(MG_APS3_HS_CAN * pMsg);
int MG_APS3_HS_CAN_UpdateBytesFromSignals(MG_APS3_HS_CAN * pMsg);
int MG_APS3_HS_CAN_UpdateBytesFromRawSignals(MG_APS3_HS_CAN * pMsg);
#define MG_APS3_HS_CAN_FAPA_FRSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 0, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_FLSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 1, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_RRSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 2, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_RLSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 3, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjRiSideAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 4, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjRiSideAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 5, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjRiSideAr3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 6, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjRiSideAr4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 7, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjRiSideAr5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 8, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjLeSideAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 9, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjLeSideAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 10, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjLeSideAr3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 11, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjLeSideAr4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 12, dPhysicalValue);
#define MG_APS3_HS_CAN_FAPA_ObjLeSideAr5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 13, dPhysicalValue);
#define MG_APS3_HS_CAN_SDW_SoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 14, dPhysicalValue);
#define MG_APS3_HS_CAN_SDWActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS3_HS_CAN_Index, 15, dPhysicalValue);
#define MG_APS3_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_APS3_HS_CAN_Index, 0)
#define MG_APS3_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_APS3_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_APS4_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_APS4; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_APS4_raw;
    double MEB_BrkgReqValue; /// Min: -10 Max: 2.75 Units: m/s^2
    BYTE MEB_BrkgReqValue_raw;
    double MEB_BrkgReq; /// Min: 0 Max: 1 Units: 
    BYTE MEB_BrkgReq_raw;
    double MEBErrSts; /// Min: 0 Max: 1 Units: 
    BYTE MEBErrSts_raw;
    double HAP_TCU_PrkgModeVald; /// Min: 0 Max: 1 Units: 
    BYTE HAP_TCU_PrkgModeVald_raw;
    double HAP_TCU_PrkgMode; /// Min: 0 Max: 3 Units: 
    BYTE HAP_TCU_PrkgMode_raw;
    double APS_PrkgMod; /// Min: 0 Max: 3 Units: 
    BYTE APS_PrkgMod_raw;
    double APS_WorkSts; /// Min: 0 Max: 7 Units: 
    BYTE APS_WorkSts_raw;
    double APS_ProcBar; /// Min: 0 Max: 127 Units: %
    BYTE APS_ProcBar_raw;
    double APS_SwtSts; /// Min: 0 Max: 1 Units: 
    BYTE APS_SwtSts_raw;
    double APS_SysSoundIndcn; /// Min: 0 Max: 7 Units: 
    BYTE APS_SysSoundIndcn_raw;
    double TurnLightsCmd; /// Min: 0 Max: 3 Units: 
    BYTE TurnLightsCmd_raw;
    double APS_SlotDisp; /// Min: 0 Max: 7 Units: 
    BYTE APS_SlotDisp_raw;
    double APS_PrkgTyp; /// Min: 0 Max: 3 Units: 
    BYTE APS_PrkgTyp_raw;
    double APS_TextDisp; /// Min: 0 Max: 63 Units: 
    BYTE APS_TextDisp_raw;
    double RollingCounter_APS4; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_APS4_raw;
} MG_APS4_HS_CAN;

#define MG_APS4_HS_CAN_SendType 0
#define MG_APS4_HS_CAN_SendRate 20
#define MG_APS4_HS_CAN_SendRateFast 0
#define MG_APS4_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_APS4_HS_CAN_$_Checksum_APS4_$$__Valid_Value_ 0
#define MG_APS4_HS_CAN_$_Checksum_APS4_SendType 0
#define MG_APS4_HS_CAN_$_MEB_BrkgReqValue_$$__Valid_value_ 0
#define MG_APS4_HS_CAN_$_MEB_BrkgReqValue_SendType 0
#define MG_APS4_HS_CAN_$_MEB_BrkgReq_$$__No_Request_ 0
#define MG_APS4_HS_CAN_$_MEB_BrkgReq_$$__Request_ 1
#define MG_APS4_HS_CAN_$_MEB_BrkgReq_SendType 0
#define MG_APS4_HS_CAN_$_MEBErrSts_$$__No_Error_ 0
#define MG_APS4_HS_CAN_$_MEBErrSts_$$__Error_ 1
#define MG_APS4_HS_CAN_$_MEBErrSts_SendType 0
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgModeVald_$$__valid_ 0
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgModeVald_$$__Invalid_ 1
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgModeVald_SendType 0
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__None_ 0
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__Parking_in_car_ 1
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__Remote_Parking_ 2
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__Reserved__ 3
#define MG_APS4_HS_CAN_$_HAP_TCU_PrkgMode_SendType 0
#define MG_APS4_HS_CAN_$_APS_PrkgMod_$$__None_ 0
#define MG_APS4_HS_CAN_$_APS_PrkgMod_$$__Parking_in_ 1
#define MG_APS4_HS_CAN_$_APS_PrkgMod_$$__Parking_out_ 2
#define MG_APS4_HS_CAN_$_APS_PrkgMod_$$__Reserved_ 3
#define MG_APS4_HS_CAN_$_APS_PrkgMod_SendType 0
#define MG_APS4_HS_CAN_$_APS_WorkSts_$$__Disable_ 0
#define MG_APS4_HS_CAN_$_APS_WorkSts_$$__Standby_ 1
#define MG_APS4_HS_CAN_$_APS_WorkSts_$$__Searching_ 2
#define MG_APS4_HS_CAN_$_APS_WorkSts_$$__Guidance_ 3
#define MG_APS4_HS_CAN_$_APS_WorkSts_$$__Failed_ 4
#define MG_APS4_HS_CAN_$_APS_WorkSts_$$__Wait_for_Engine_restart_ 5
#define MG_APS4_HS_CAN_$_APS_WorkSts_$$__Reserved_ 6
#define MG_APS4_HS_CAN_$_APS_WorkSts_SendType 0
#define MG_APS4_HS_CAN_$_APS_ProcBar_$$__0_100_ 0
#define MG_APS4_HS_CAN_$_APS_ProcBar_$$__Reserved_ 101
#define MG_APS4_HS_CAN_$_APS_ProcBar_$$__No_Display_ 127
#define MG_APS4_HS_CAN_$_APS_ProcBar_SendType 0
#define MG_APS4_HS_CAN_$_APS_SwtSts_$$__no_press_ 0
#define MG_APS4_HS_CAN_$_APS_SwtSts_$$__press_ 1
#define MG_APS4_HS_CAN_$_APS_SwtSts_SendType 0
#define MG_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_0___No_Warning_ 0
#define MG_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_1___APS_failed_tone_ 1
#define MG_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_2___APS_successful_tone_ 2
#define MG_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_3___APS_warning_tone_ 3
#define MG_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_4___APS_request_tone_ 4
#define MG_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Reserved_ 5
#define MG_APS4_HS_CAN_$_APS_SysSoundIndcn_SendType 0
#define MG_APS4_HS_CAN_$_TurnLightsCmd_$$__No_Request_ 0
#define MG_APS4_HS_CAN_$_TurnLightsCmd_$$__LeftLight_On_ 1
#define MG_APS4_HS_CAN_$_TurnLightsCmd_$$__RightLight_On_ 2
#define MG_APS4_HS_CAN_$_TurnLightsCmd_$$__hazardLight_ON_ 3
#define MG_APS4_HS_CAN_$_TurnLightsCmd_SendType 0
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__No_parking_slot_ 0
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__Left_parallel_parking_slot_ 1
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__Left_vertical_parking_slot_ 2
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__Left_T_shape_parking_slot_ 3
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__Right_parallel_parking_slot_ 4
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__Right_vertical_parking_slot_ 5
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__Right_T_shape_parking_slot_ 6
#define MG_APS4_HS_CAN_$_APS_SlotDisp_$$__Reserved_ 7
#define MG_APS4_HS_CAN_$_APS_SlotDisp_SendType 0
#define MG_APS4_HS_CAN_$_APS_PrkgTyp_$$__None_ 0
#define MG_APS4_HS_CAN_$_APS_PrkgTyp_$$__Parallel_parking_ 1
#define MG_APS4_HS_CAN_$_APS_PrkgTyp_$$__Vertical_parking_ 2
#define MG_APS4_HS_CAN_$_APS_PrkgTyp_$$__Reserved_ 3
#define MG_APS4_HS_CAN_$_APS_PrkgTyp_SendType 0
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__No_Request_ 0
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Wrong_gear_position_to_start_parking_ 1
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Turn_D_to_search_for_slot_ 2
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_close_the_trunk_ 3
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_close_the_door_ 4
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_fasten_the_seat_belt_ 5
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_unfold_the_Mirror_ 6
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high_need__23km_h_ 7
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__System_error_Parking_sys_exits_ 8
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__control_unit_error_parking_sys_exits_ 9
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_brake_ 10
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_parking_mode_ 11
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_internal_parking_ 12
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_Slot_and_parking_mode_ 13
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_Slot_and__internal_park_ing_ 14
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_keep_braking_ 15
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Hands_off_the_steering_wheel_ 16
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Release_the_brake_ 17
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Auto_parking_be_ready_to_brake_ 18
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__parking_suspended_close_trunk_ 19
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__parking_suspended_close_door__ 20
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__parking_suspended_fasten_seat_belt_ 21
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Obstacles_Detected_ 22
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__brake_recovered_confirm_to_continue_ 23
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_sys_exits_ 24
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__parking_finished_ 25
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__interfered_by_driver_parking_quited_ 26
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__too_many_parking_times_parking_sys_exits_ 27
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_time_too_long_Parking_sys_exits_ 28
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__EPB_Applied_Parking_sys_exits_ 29
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_Clean_the_Camera_ 30
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Select_the_parking_mode_APA3__ 31
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Searching_the_right_slot_ 32
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Searching_the_left_slot_ 33
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_turn_D_to_search_for_parking_slot_ 34
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high__need__30km_h_ 35
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high_sys_exits_ 36
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Select_parking_type_ 37
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Long_press_switch_2s_to_enter_auto_parking_ 38
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_suspended__Please_release_the_gas_pedal_ 39
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_brake__And_long_press_switch_2s_to_continue_auto_parking_ 40
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_is_not_available_ 41
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_select_the_parking_direction_by_turning_the_turn_switch_ 42
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_brake__And_long_press_switch_2s_to_enter_auto_parking_ 43
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_sys_exits_ 44
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_suspended__fold_the_Mirror_ 45
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 46
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__path_is_smooth_ 48
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_park_out_ 49
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_park_out_direction_ 50
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_get_off_the_car_with_keys_to_start_remote_parking_ 51
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_confirm_to_start_parking_ 52
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__please_keep_in_safe_distance_ 53
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__remote_connection_error_parking_sys_exits_ 54
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 55
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_study_begin_please_drive_the_car_ 64
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_ 65
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Confirm_study_finished_ 66
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_Path_too_long_ 67
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_Speed_too_high_ 68
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_com_munication_error_ 69
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_Path_error_ 70
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_learn_time_too_long_ 71
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_inter_nal_error_ 72
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 73
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_ 80
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_Succeed_ 81
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_Path_too_short_ 82
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_communication_error_ 83
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_Path_error_ 84
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_Path_error_limit_storage_room_ 85
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_internal_error_ 86
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 87
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_drive_to_path_start_point_ 96
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_matche_please_stop_ 97
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Please_select_play_back_mode_ 98
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_communication_error_ 99
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_path_error_ 100
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_long_time_no_action_ 101
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_internal_error_ 102
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 103
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__RDAS_Open__Turn_R_ 112
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__RDAS_running__be_ready_to_brake_ 113
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Near_the_bourn_ 114
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Arrive_at_the_bourn_ 115
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high_RDAS_sys_exits_ 116
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__System_error_RDAS_sys_exits_ 117
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__control_unit_error_RDAS_sys_exits_ 118
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__interfered_by_driver_parking_quited_ 119
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_for_RDAS_ 120
#define MG_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 128
#define MG_APS4_HS_CAN_$_APS_TextDisp_SendType 0
#define MG_APS4_HS_CAN_$_RollingCounter_APS4_$$__Valid_value_ 0
#define MG_APS4_HS_CAN_$_RollingCounter_APS4_$$__Invalid_value_ 15
#define MG_APS4_HS_CAN_$_RollingCounter_APS4_SendType 0
#pragma warning(default : 4005)

void MG_APS4_HS_CAN_Init(MG_APS4_HS_CAN * pMsg);
int MG_APS4_HS_CAN_Transmit(MG_APS4_HS_CAN * pMsg);
int MG_APS4_HS_CAN_Transmit_raw(MG_APS4_HS_CAN * pMsg);
int MG_APS4_HS_CAN_UpdateBytesFromSignals(MG_APS4_HS_CAN * pMsg);
int MG_APS4_HS_CAN_UpdateBytesFromRawSignals(MG_APS4_HS_CAN * pMsg);
#define MG_APS4_HS_CAN_Checksum_APS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 0, dPhysicalValue);
#define MG_APS4_HS_CAN_MEB_BrkgReqValue_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 1, dPhysicalValue);
#define MG_APS4_HS_CAN_MEB_BrkgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 2, dPhysicalValue);
#define MG_APS4_HS_CAN_MEBErrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 3, dPhysicalValue);
#define MG_APS4_HS_CAN_HAP_TCU_PrkgModeVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 4, dPhysicalValue);
#define MG_APS4_HS_CAN_HAP_TCU_PrkgMode_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 5, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_PrkgMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 6, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 7, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_ProcBar_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 8, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_SwtSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 9, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_SysSoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 10, dPhysicalValue);
#define MG_APS4_HS_CAN_TurnLightsCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 11, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_SlotDisp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 12, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_PrkgTyp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 13, dPhysicalValue);
#define MG_APS4_HS_CAN_APS_TextDisp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 14, dPhysicalValue);
#define MG_APS4_HS_CAN_RollingCounter_APS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_APS4_HS_CAN_Index, 15, dPhysicalValue);
#define MG_APS4_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_APS4_HS_CAN_Index, 0)
#define MG_APS4_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_APS4_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_HAP1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RmtPrkgReq; /// Min: 0 Max: 1 Units: 
    BYTE RmtPrkgReq_raw;
    double LParaPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE LParaPrkgOutVald_raw;
    double RParaPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE RParaPrkgOutVald_raw;
    double HeadVertPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE HeadVertPrkgOutVald_raw;
    double TailVertPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE TailVertPrkgOutVald_raw;
    double HAP_SwtDispCtrlCmd; /// Min: 0 Max: 7 Units: 
    BYTE HAP_SwtDispCtrlCmd_raw;
    double PASSwtReq; /// Min: 0 Max: 3 Units: 
    BYTE PASSwtReq_raw;
    double HAP_PrkgModCurrSts; /// Min: 0 Max: 15 Units: 
    BYTE HAP_PrkgModCurrSts_raw;
    double APS_MovgDirc; /// Min: 0 Max: 3 Units: 
    BYTE APS_MovgDirc_raw;
} MG_HAP1_HS_CAN;

#define MG_HAP1_HS_CAN_SendType 0
#define MG_HAP1_HS_CAN_SendRate 20
#define MG_HAP1_HS_CAN_SendRateFast 0
#define MG_HAP1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_HAP1_HS_CAN_$_RmtPrkgReq_$$__No_Request_ 0
#define MG_HAP1_HS_CAN_$_RmtPrkgReq_$$__Request_to_parking_in_ 1
#define MG_HAP1_HS_CAN_$_RmtPrkgReq_SendType 0
#define MG_HAP1_HS_CAN_$_LParaPrkgOutVald_$$__valid_ 0
#define MG_HAP1_HS_CAN_$_LParaPrkgOutVald_$$__Invalid_ 1
#define MG_HAP1_HS_CAN_$_LParaPrkgOutVald_SendType 0
#define MG_HAP1_HS_CAN_$_RParaPrkgOutVald_$$__valid_ 0
#define MG_HAP1_HS_CAN_$_RParaPrkgOutVald_$$__Invalid_ 1
#define MG_HAP1_HS_CAN_$_RParaPrkgOutVald_SendType 0
#define MG_HAP1_HS_CAN_$_HeadVertPrkgOutVald_$$__valid_ 0
#define MG_HAP1_HS_CAN_$_HeadVertPrkgOutVald_$$__Invalid_ 1
#define MG_HAP1_HS_CAN_$_HeadVertPrkgOutVald_SendType 0
#define MG_HAP1_HS_CAN_$_TailVertPrkgOutVald_$$__valid_ 0
#define MG_HAP1_HS_CAN_$_TailVertPrkgOutVald_$$__Invalid_ 1
#define MG_HAP1_HS_CAN_$_TailVertPrkgOutVald_SendType 0
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__no_display_ 0
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__park_out_direction_Select_menu_ 1
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__continue_park_menu_ 2
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__Study_finish_button_ 3
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__RDAS_distance_arrow_ 4
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__RDAS_active_distance_arrow_steering_ 5
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__Reserved_ 6
#define MG_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_SendType 0
#define MG_HAP1_HS_CAN_$_PASSwtReq_$$__NO_request_ 0
#define MG_HAP1_HS_CAN_$_PASSwtReq_$$__Request_to_close_ 1
#define MG_HAP1_HS_CAN_$_PASSwtReq_$$__Request_to_open_ 2
#define MG_HAP1_HS_CAN_$_PASSwtReq_$$__Reserved_ 3
#define MG_HAP1_HS_CAN_$_PASSwtReq_SendType 0
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__No_display_ 0
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_parallel_park_in_ 1
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_parallel_park_in_ 2
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_vert_park_in_ 3
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_vert_park_in_ 4
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_Tshape_park_in_ 5
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_Tshape_park_in_ 6
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_parallel_park_out_ 7
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_parallel_park_out_ 8
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Front_vert_park_out_ 9
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Rear_vert_park_out_ 10
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__reserved_ 11
#define MG_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_SendType 0
#define MG_HAP1_HS_CAN_$_APS_MovgDirc_$$__No_Display_ 0
#define MG_HAP1_HS_CAN_$_APS_MovgDirc_$$__Moving_forward_ 1
#define MG_HAP1_HS_CAN_$_APS_MovgDirc_$$__Moving_backward_ 2
#define MG_HAP1_HS_CAN_$_APS_MovgDirc_$$__Reserved__ 3
#define MG_HAP1_HS_CAN_$_APS_MovgDirc_SendType 0
#pragma warning(default : 4005)

void MG_HAP1_HS_CAN_Init(MG_HAP1_HS_CAN * pMsg);
int MG_HAP1_HS_CAN_Transmit(MG_HAP1_HS_CAN * pMsg);
int MG_HAP1_HS_CAN_Transmit_raw(MG_HAP1_HS_CAN * pMsg);
int MG_HAP1_HS_CAN_UpdateBytesFromSignals(MG_HAP1_HS_CAN * pMsg);
int MG_HAP1_HS_CAN_UpdateBytesFromRawSignals(MG_HAP1_HS_CAN * pMsg);
#define MG_HAP1_HS_CAN_RmtPrkgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 0, dPhysicalValue);
#define MG_HAP1_HS_CAN_LParaPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 1, dPhysicalValue);
#define MG_HAP1_HS_CAN_RParaPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 2, dPhysicalValue);
#define MG_HAP1_HS_CAN_HeadVertPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 3, dPhysicalValue);
#define MG_HAP1_HS_CAN_TailVertPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 4, dPhysicalValue);
#define MG_HAP1_HS_CAN_HAP_SwtDispCtrlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 5, dPhysicalValue);
#define MG_HAP1_HS_CAN_PASSwtReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 6, dPhysicalValue);
#define MG_HAP1_HS_CAN_HAP_PrkgModCurrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 7, dPhysicalValue);
#define MG_HAP1_HS_CAN_APS_MovgDirc_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP1_HS_CAN_Index, 8, dPhysicalValue);
#define MG_HAP1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_HAP1_HS_CAN_Index, 0)
#define MG_HAP1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_HAP1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_HAP2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double APA_MenuDispCtrlCmd; /// Min: 0 Max: 15 Units: 
    BYTE APA_MenuDispCtrlCmd_raw;
    double APA_FuncSts; /// Min: 0 Max: 3 Units: 
    BYTE APA_FuncSts_raw;
    double HAP_TextIconDispCtrl; /// Min: 0 Max: 3 Units: 
    BYTE HAP_TextIconDispCtrl_raw;
    double OrvmCtrlCmd; /// Min: 0 Max: 3 Units: 
    BYTE OrvmCtrlCmd_raw;
} MG_HAP2_HS_CAN;

#define MG_HAP2_HS_CAN_SendType 0
#define MG_HAP2_HS_CAN_SendRate 100
#define MG_HAP2_HS_CAN_SendRateFast 0
#define MG_HAP2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__No_Disp_avm_menu_ 0
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_in_indicate_menu_ 1
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_in_mode_select_menu_ 2
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_out_indicate_menu_ 3
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_out_confirm_menu_ 4
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__parking_in_confirm_menu_ 5
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_in_process_ 6
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__remote_park_in_process_ 7
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_out_process_ 8
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__Reserved_ 9
#define MG_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_SendType 0
#define MG_HAP2_HS_CAN_$_APA_FuncSts_$$__APA_Function_standby_ 0
#define MG_HAP2_HS_CAN_$_APA_FuncSts_$$__APA_Function_active_ 1
#define MG_HAP2_HS_CAN_$_APA_FuncSts_$$__APA_Function_disable_ 2
#define MG_HAP2_HS_CAN_$_APA_FuncSts_$$__Reserved_ 3
#define MG_HAP2_HS_CAN_$_APA_FuncSts_SendType 0
#define MG_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__No_display_ 0
#define MG_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__Display_according_to_text_info_ 1
#define MG_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__Display_parking_mode__ 2
#define MG_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__Reserved_ 3
#define MG_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_SendType 0
#define MG_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__NO_request_ 0
#define MG_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__Request_to_Fold_ 1
#define MG_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__Request_to_Unfold_ 2
#define MG_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__Reserved_ 3
#define MG_HAP2_HS_CAN_$_OrvmCtrlCmd_SendType 0
#pragma warning(default : 4005)

void MG_HAP2_HS_CAN_Init(MG_HAP2_HS_CAN * pMsg);
int MG_HAP2_HS_CAN_Transmit(MG_HAP2_HS_CAN * pMsg);
int MG_HAP2_HS_CAN_Transmit_raw(MG_HAP2_HS_CAN * pMsg);
int MG_HAP2_HS_CAN_UpdateBytesFromSignals(MG_HAP2_HS_CAN * pMsg);
int MG_HAP2_HS_CAN_UpdateBytesFromRawSignals(MG_HAP2_HS_CAN * pMsg);
#define MG_HAP2_HS_CAN_APA_MenuDispCtrlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP2_HS_CAN_Index, 0, dPhysicalValue);
#define MG_HAP2_HS_CAN_APA_FuncSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP2_HS_CAN_Index, 1, dPhysicalValue);
#define MG_HAP2_HS_CAN_HAP_TextIconDispCtrl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP2_HS_CAN_Index, 2, dPhysicalValue);
#define MG_HAP2_HS_CAN_OrvmCtrlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_HAP2_HS_CAN_Index, 3, dPhysicalValue);
#define MG_HAP2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_HAP2_HS_CAN_Index, 0)
#define MG_HAP2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_HAP2_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_FPAS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FPAS_FLCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FLCornrSnsrFltSts_raw;
    double FPAS_FLMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FLMiddlSnsrFltSts_raw;
    double FPAS_FRMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FRMiddlSnsrFltSts_raw;
    double FPAS_FRCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FRCornrSnsrFltSts_raw;
    double FPAS_WorkSts; /// Min: 0 Max: 3 Units: 
    BYTE FPAS_WorkSts_raw;
    double FPAS_SoundIndcn; /// Min: 0 Max: 3 Units: 
    BYTE FPAS_SoundIndcn_raw;
    double FPAS_ObjFLCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLCornrAr1_raw;
    double FPAS_ObjFLCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLCornrAr2_raw;
    double FPAS_ObjFLMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLMidlAr1_raw;
    double FPAS_ObjFLMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLMidlAr2_raw;
    double FPAS_ObjFRMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRMidlAr1_raw;
    double FPAS_ObjFRMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRMidlAr2_raw;
    double FPAS_ObjFRCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRCornrAr1_raw;
    double FPAS_ObjFRCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRCornrAr2_raw;
    double FPAS_DispCmd; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_DispCmd_raw;
    double FPAS_AutoStgySts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_AutoStgySts_raw;
    double FPAS_MEBWorkSts; /// Min: 0 Max: 3 Units: 
    BYTE FPAS_MEBWorkSts_raw;
} MG_FPAS1_HS_CAN;

#define MG_FPAS1_HS_CAN_SendType 0
#define MG_FPAS1_HS_CAN_SendRate 100
#define MG_FPAS1_HS_CAN_SendRateFast 0
#define MG_FPAS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_FPAS1_HS_CAN_$_FPAS_FLCornrSnsrFltSts_$$__Sensor_normal_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_FLCornrSnsrFltSts_$$__Sensor_fault_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_FLCornrSnsrFltSts_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_FLMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_FLMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_FLMiddlSnsrFltSts_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_FRMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_FRMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_FRMiddlSnsrFltSts_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_FRCornrSnsrFltSts_$$__Sensor_normal_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_FRCornrSnsrFltSts_$$__Sensor_fault_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_FRCornrSnsrFltSts_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Disable_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Enable_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Active_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Failed_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_WorkSts_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_zero__No_warning_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_one__Long_beep_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_two_1_5_Hz_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_three_3Hz_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_SoundIndcn_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$__Reserved_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$__Reserved_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_7__61_70cm_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_8__71_80cm_ 8
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_9__81_90cm_ 9
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_10__91_100cm_ 10
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$__Reserved_ 11
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_7__61_70cm_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_8__71_80cm_ 8
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_9__81_90cm_ 9
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_10__91_100cm_ 10
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$__Reserved_ 11
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_7__61_70cm_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_8__71_80cm_ 8
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_9__81_90cm_ 9
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_10__91_100cm_ 10
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$__Reserved_ 11
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_7__61_70cm_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_8__71_80cm_ 8
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_9__81_90cm_ 9
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_10__91_100cm_ 10
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$__Reserved_ 11
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$__Reserved_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$__No_object_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_1__0_10cm_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_2__11_20cm_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_3__21_30cm_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_4__31_40cm_ 4
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_5__41_50cm_ 5
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_6__51_60cm_ 6
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$__Reserved_ 7
#define MG_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_DispCmd_$$__OFF_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_DispCmd_$$__ON_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_DispCmd_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_AutoStgySts_$$__not_available_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_AutoStgySts_$$__available_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_AutoStgySts_SendType 0
#define MG_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Off_ 0
#define MG_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Enable_ 1
#define MG_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Active_ 2
#define MG_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Failed_ 3
#define MG_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_SendType 0
#pragma warning(default : 4005)

void MG_FPAS1_HS_CAN_Init(MG_FPAS1_HS_CAN * pMsg);
int MG_FPAS1_HS_CAN_Transmit(MG_FPAS1_HS_CAN * pMsg);
int MG_FPAS1_HS_CAN_Transmit_raw(MG_FPAS1_HS_CAN * pMsg);
int MG_FPAS1_HS_CAN_UpdateBytesFromSignals(MG_FPAS1_HS_CAN * pMsg);
int MG_FPAS1_HS_CAN_UpdateBytesFromRawSignals(MG_FPAS1_HS_CAN * pMsg);
#define MG_FPAS1_HS_CAN_FPAS_FLCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 0, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_FLMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 1, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_FRMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 2, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_FRCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 3, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 4, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_SoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 5, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFLCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 6, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFLCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 7, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFLMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 8, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFLMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 9, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFRMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 10, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFRMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 11, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFRCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 12, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_ObjFRCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 13, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_DispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 14, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_AutoStgySts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 15, dPhysicalValue);
#define MG_FPAS1_HS_CAN_FPAS_MEBWorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_FPAS1_HS_CAN_Index, 16, dPhysicalValue);
#define MG_FPAS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_FPAS1_HS_CAN_Index, 0)
#define MG_FPAS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_FPAS1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_RPAS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RPAS_RLCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RLCornrSnsrFltSts_raw;
    double RPAS_RLMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RLMiddlSnsrFltSts_raw;
    double RPAS_RRMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RRMiddlSnsrFltSts_raw;
    double RPAS_RRCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RRCornrSnsrFltSts_raw;
    double RPAS_WorkSts; /// Min: 0 Max: 3 Units: 
    BYTE RPAS_WorkSts_raw;
    double RPAS_SoundIndcn; /// Min: 0 Max: 3 Units: 
    BYTE RPAS_SoundIndcn_raw;
    double RPAS_ObjRRCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRCornrAr1_raw;
    double RPAS_ObjRRCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRCornrAr2_raw;
    double RPAS_ObjRRMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRMidlAr1_raw;
    double RPAS_ObjRRMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRMidlAr2_raw;
    double RPAS_ObjRLMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLMidlAr1_raw;
    double RPAS_ObjRLMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLMidlAr2_raw;
    double RPAS_ObjRLCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLCornrAr1_raw;
    double RPAS_ObjRLCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLCornrAr2_raw;
    double RPAS_MEBWorkSts; /// Min: 0 Max: 3 Units: 
    BYTE RPAS_MEBWorkSts_raw;
    double MEB_EnableSts; /// Min: 0 Max: 1 Units: 
    BYTE MEB_EnableSts_raw;
} MG_RPAS1_HS_CAN;

#define MG_RPAS1_HS_CAN_SendType 0
#define MG_RPAS1_HS_CAN_SendRate 100
#define MG_RPAS1_HS_CAN_SendRateFast 0
#define MG_RPAS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define MG_RPAS1_HS_CAN_$_RPAS_RLCornrSnsrFltSts_$$__Sensor_normal_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_RLCornrSnsrFltSts_$$__Sensor_fault_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_RLCornrSnsrFltSts_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_RLMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_RLMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_RLMiddlSnsrFltSts_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_RRMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_RRMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_RRMiddlSnsrFltSts_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_RRCornrSnsrFltSts_$$__Sensor_normal_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_RRCornrSnsrFltSts_$$__Sensor_fault_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_RRCornrSnsrFltSts_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Disable_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Enable_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Active_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Failed_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_WorkSts_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_zero_No_warning_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_one__Long_beep_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_two_1_5_Hz_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_three__3Hz_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_SoundIndcn_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Reserved_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Reserved_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_7__61_70cm_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_8__71_80cm_ 8
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_9__81_90cm_ 9
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_10__91_100cm_ 10
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_11__101_110cm_ 11
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_12__111_120cm_ 12
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_13__121_130cm_ 13
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_14__131_140cm_ 14
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_15__141_150cm_ 15
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_7__61_70cm_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_8__71_80cm_ 8
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_9__81_90cm_ 9
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_10__91_100cm_ 10
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_11__101_110cm_ 11
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_12__111_120cm_ 12
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_13__121_130cm_ 13
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_14__131_140cm_ 14
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_15__141_150cm_ 15
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_7__61_70cm_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_8__71_80cm_ 8
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_9__81_90cm_ 9
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_10__91_100cm_ 10
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_11__101_110cm_ 11
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_12__111_120cm_ 12
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_13__121_130cm_ 13
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_14__131_140cm_ 14
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_15__141_150cm_ 15
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_7__61_70cm_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_8__71_80cm_ 8
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_9__81_90cm_ 9
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_10__91_100cm_ 10
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_11__101_110cm_ 11
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_12__111_120cm_ 12
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_13__121_130cm_ 13
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_14__131_140cm_ 14
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_15__141_150cm_ 15
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Reserved_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__No_object_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_1__0_10cm_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_2__11_20cm_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_3__21_30cm_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_4__31_40cm_ 4
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_5__41_50cm_ 5
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_6__51_60cm_ 6
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Reserved_ 7
#define MG_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_SendType 0
#define MG_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Off_ 0
#define MG_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Enable_ 1
#define MG_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Active_ 2
#define MG_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Failed_ 3
#define MG_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_SendType 0
#define MG_RPAS1_HS_CAN_$_MEB_EnableSts_$$__Disable_ 0
#define MG_RPAS1_HS_CAN_$_MEB_EnableSts_$$__Enable_ 1
#define MG_RPAS1_HS_CAN_$_MEB_EnableSts_SendType 0
#pragma warning(default : 4005)

void MG_RPAS1_HS_CAN_Init(MG_RPAS1_HS_CAN * pMsg);
int MG_RPAS1_HS_CAN_Transmit(MG_RPAS1_HS_CAN * pMsg);
int MG_RPAS1_HS_CAN_Transmit_raw(MG_RPAS1_HS_CAN * pMsg);
int MG_RPAS1_HS_CAN_UpdateBytesFromSignals(MG_RPAS1_HS_CAN * pMsg);
int MG_RPAS1_HS_CAN_UpdateBytesFromRawSignals(MG_RPAS1_HS_CAN * pMsg);
#define MG_RPAS1_HS_CAN_RPAS_RLCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 0, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_RLMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 1, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_RRMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 2, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_RRCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 3, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 4, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_SoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 5, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRRCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 6, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRRCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 7, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRRMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 8, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRRMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 9, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRLMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 10, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRLMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 11, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRLCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 12, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_ObjRLCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 13, dPhysicalValue);
#define MG_RPAS1_HS_CAN_RPAS_MEBWorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 14, dPhysicalValue);
#define MG_RPAS1_HS_CAN_MEB_EnableSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_RPAS1_HS_CAN_Index, 15, dPhysicalValue);
#define MG_RPAS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_RPAS1_HS_CAN_Index, 0)
#define MG_RPAS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_RPAS1_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG_F1B0_Read_HS_CAN_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Tire_size; /// Min: 0 Max: 3 Units: 
    BYTE Tire_size_raw;
    double Transmission_type; /// Min: 0 Max: 3 Units: 
    BYTE Transmission_type_raw;
    double DriveType; /// Min: 0 Max: 3 Units: 
    BYTE DriveType_raw;
    double DriveHandle_Config; /// Min: 0 Max: 1 Units: 
    BYTE DriveHandle_Config_raw;
    double Vehicle_information; /// Min: 0 Max: 15 Units: 
    BYTE Vehicle_information_raw;
    double Trailer; /// Min: 0 Max: 1 Units: 
    BYTE Trailer_raw;
    double Mirror_mode; /// Min: 0 Max: 3 Units: 
    BYTE Mirror_mode_raw;
    double Surface_modelling; /// Min: 0 Max: 3 Units: 
    BYTE Surface_modelling_raw;
    double RadarType; /// Min: 0 Max: 3 Units: 
    BYTE RadarType_raw;
    double type__of_power; /// Min: 0 Max: 1 Units: 
    BYTE type__of_power_raw;
    double Restyle_Vehicle_information; /// Min: 0 Max: 15 Units: 
    BYTE Restyle_Vehicle_information_raw;
    double Parking_Type; /// Min: 0 Max: 15 Units: 
    BYTE Parking_Type_raw;
} MG_F1B0_Read_HS_CAN;


void MG_F1B0_Read_HS_CAN_Init(MG_F1B0_Read_HS_CAN * pMsg);
int MG_F1B0_Read_HS_CAN_Transmit(MG_F1B0_Read_HS_CAN * pMsg);
int MG_F1B0_Read_HS_CAN_Transmit_raw(MG_F1B0_Read_HS_CAN * pMsg);
int MG_F1B0_Read_HS_CAN_UpdateBytesFromSignals(MG_F1B0_Read_HS_CAN * pMsg);
int MG_F1B0_Read_HS_CAN_UpdateBytesFromRawSignals(MG_F1B0_Read_HS_CAN * pMsg);
#define MG_F1B0_Read_HS_CAN_Tire_size_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 0, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_Transmission_type_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 1, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_DriveType_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 2, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_DriveHandle_Config_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 3, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_Vehicle_information_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 4, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_Trailer_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 5, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_Mirror_mode_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 6, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_Surface_modelling_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 7, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_RadarType_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 8, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_type__of_power_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 9, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_Restyle_Vehicle_information_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 10, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_Parking_Type_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 1, MG_F1B0_Read_HS_CAN_Index, 11, dPhysicalValue);
#define MG_F1B0_Read_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG_F1B0_Read_HS_CAN_Index, 0)
#define MG_F1B0_Read_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG_F1B0_Read_HS_CAN_Index, 0, name, outDoubleValuePtr)
extern int MG__________HS_CAN_in68_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} MG__________HS_CAN_in68;


void MG__________HS_CAN_in68_Init(MG__________HS_CAN_in68 * pMsg);
int MG__________HS_CAN_in68_Transmit(MG__________HS_CAN_in68 * pMsg);
int MG__________HS_CAN_in68_Transmit_raw(MG__________HS_CAN_in68 * pMsg);
#define MG__________HS_CAN_in68_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, MG__________HS_CAN_in68_Index, 0)
#define MG__________HS_CAN_in68_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(MG__________HS_CAN_in68_Index, 0, name, outDoubleValuePtr)
extern int DB_Report_Message_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double MISC3_AIN; /// Min: 0 Max: 1023 Units: 
    WORD MISC3_AIN_raw;
    double MISC4_AIN; /// Min: 0 Max: 1023 Units: 
    WORD MISC4_AIN_raw;
    double MISC5_AIN; /// Min: 0 Max: 1023 Units: 
    WORD MISC5_AIN_raw;
    double MISC6_AIN; /// Min: 0 Max: 1023 Units: 
    WORD MISC6_AIN_raw;
    double MISC1; /// Min: 0 Max: 1 Units: 
    BYTE MISC1_raw;
    double MISC2; /// Min: 0 Max: 1 Units: 
    BYTE MISC2_raw;
    double MISC3; /// Min: 0 Max: 1 Units: 
    BYTE MISC3_raw;
    double MISC4; /// Min: 0 Max: 1 Units: 
    BYTE MISC4_raw;
    double MISC5; /// Min: 0 Max: 1 Units: 
    BYTE MISC5_raw;
    double MISC6; /// Min: 0 Max: 1 Units: 
    BYTE MISC6_raw;
    double LED1; /// Min: 0 Max: 1 Units: 
    BYTE LED1_raw;
    double LED2; /// Min: 0 Max: 1 Units: 
    BYTE LED2_raw;
    double LIN1; /// Min: 0 Max: 1 Units: 
    BYTE LIN1_raw;
    double LIN2; /// Min: 0 Max: 1 Units: 
    BYTE LIN2_raw;
} DB_Report_Message_neoVI;


void DB_Report_Message_neoVI_Init(DB_Report_Message_neoVI * pMsg);
int DB_Report_Message_neoVI_Transmit(DB_Report_Message_neoVI * pMsg);
int DB_Report_Message_neoVI_Transmit_raw(DB_Report_Message_neoVI * pMsg);
int DB_Report_Message_neoVI_UpdateBytesFromSignals(DB_Report_Message_neoVI * pMsg);
int DB_Report_Message_neoVI_UpdateBytesFromRawSignals(DB_Report_Message_neoVI * pMsg);
#define DB_Report_Message_neoVI_MISC3_AIN_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC4_AIN_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC5_AIN_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC6_AIN_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 4, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 5, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 6, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 7, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 8, dPhysicalValue);
#define DB_Report_Message_neoVI_MISC6_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 9, dPhysicalValue);
#define DB_Report_Message_neoVI_LED1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 10, dPhysicalValue);
#define DB_Report_Message_neoVI_LED2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 11, dPhysicalValue);
#define DB_Report_Message_neoVI_LIN1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 12, dPhysicalValue);
#define DB_Report_Message_neoVI_LIN2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_neoVI_Index, 13, dPhysicalValue);
#define DB_Report_Message_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message_neoVI_Index, 0)
#define DB_Report_Message_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__PWM__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double PWM_In_1; /// Min: 0 Max: 4294967295 Units: 
    DWORD PWM_In_1_raw;
} DB_Report_Message__PWM__neoVI;


void DB_Report_Message__PWM__neoVI_Init(DB_Report_Message__PWM__neoVI * pMsg);
int DB_Report_Message__PWM__neoVI_Transmit(DB_Report_Message__PWM__neoVI * pMsg);
int DB_Report_Message__PWM__neoVI_Transmit_raw(DB_Report_Message__PWM__neoVI * pMsg);
int DB_Report_Message__PWM__neoVI_UpdateBytesFromSignals(DB_Report_Message__PWM__neoVI * pMsg);
int DB_Report_Message__PWM__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__PWM__neoVI * pMsg);
#define DB_Report_Message__PWM__neoVI_PWM_In_1_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__PWM__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__PWM__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__PWM__neoVI_Index, 0)
#define DB_Report_Message__PWM__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__PWM__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__VCAN_RF__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double MISC1_AIN; /// Min: 0 Max: 41.55477149999999 Units: V
    WORD MISC1_AIN_raw;
    double MISC_1; /// Min: 0 Max: 1 Units: 
    BYTE MISC_1_raw;
    double MISC_2; /// Min: 0 Max: 1 Units: 
    BYTE MISC_2_raw;
    double MISC_3; /// Min: 0 Max: 1 Units: 
    BYTE MISC_3_raw;
    double MISC_4; /// Min: 0 Max: 1 Units: 
    BYTE MISC_4_raw;
    double Vehicle_Battery_Voltage; /// Min: 0 Max: 43.18778320312499 Units: V
    WORD Vehicle_Battery_Voltage_raw;
    double Temperature; /// Min: -215 Max: 114.677734375 Units: C
    WORD Temperature_raw;
    double Hardware_Revision; /// Min: 3 Max: 10.9921875 Units: 
    WORD Hardware_Revision_raw;
    double RTC_Battery_Measure_Enabled; /// Min: 0 Max: 1 Units: 
    BYTE RTC_Battery_Measure_Enabled_raw;
    double RTC_Battery_Voltage; /// Min: 0 Max: 3.29677734375 Units: V
    WORD RTC_Battery_Voltage_raw;
} DB_Report_Message__VCAN_RF__neoVI;


void DB_Report_Message__VCAN_RF__neoVI_Init(DB_Report_Message__VCAN_RF__neoVI * pMsg);
int DB_Report_Message__VCAN_RF__neoVI_Transmit(DB_Report_Message__VCAN_RF__neoVI * pMsg);
int DB_Report_Message__VCAN_RF__neoVI_Transmit_raw(DB_Report_Message__VCAN_RF__neoVI * pMsg);
int DB_Report_Message__VCAN_RF__neoVI_UpdateBytesFromSignals(DB_Report_Message__VCAN_RF__neoVI * pMsg);
int DB_Report_Message__VCAN_RF__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__VCAN_RF__neoVI * pMsg);
#define DB_Report_Message__VCAN_RF__neoVI_MISC1_AIN_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_MISC_1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_MISC_2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_MISC_3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_MISC_4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 4, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_Vehicle_Battery_Voltage_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 5, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_Temperature_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 6, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_Hardware_Revision_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 7, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_RTC_Battery_Measure_Enabled_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 8, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_RTC_Battery_Voltage_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__VCAN_RF__neoVI_Index, 9, dPhysicalValue);
#define DB_Report_Message__VCAN_RF__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__VCAN_RF__neoVI_Index, 0)
#define DB_Report_Message__VCAN_RF__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__VCAN_RF__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__neoVI_Fire2__neoVI_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RTC_Battery; /// Min: 0 Max: 0 Units: V
    uint64 RTC_Battery_raw;
    double Temperature; /// Min: 0 Max: 0 Units: C
    uint64 Temperature_raw;
    double Vehicle_Battery; /// Min: 0 Max: 0 Units: V
    uint64 Vehicle_Battery_raw;
    double EMISC1_AIN; /// Min: 0 Max: 665.51513385 Units: V
    WORD EMISC1_AIN_raw;
    double EMISC2_AIN; /// Min: 0 Max: 665.51513385 Units: V
    WORD EMISC2_AIN_raw;
    double EMISC1_DIN; /// Min: 0 Max: 1 Units: 
    BYTE EMISC1_DIN_raw;
    double EMISC2_DIN; /// Min: 0 Max: 1 Units: 
    BYTE EMISC2_DIN_raw;
    double MISC5_DIN; /// Min: 0 Max: 1 Units: 
    BYTE MISC5_DIN_raw;
    double MISC6_DIN; /// Min: 0 Max: 1 Units: 
    BYTE MISC6_DIN_raw;
    double LED1; /// Min: 0 Max: 1 Units: 
    BYTE LED1_raw;
    double LED2; /// Min: 0 Max: 1 Units: 
    BYTE LED2_raw;
} DB_Report_Message__neoVI_Fire2__neoVI;


void DB_Report_Message__neoVI_Fire2__neoVI_Init(DB_Report_Message__neoVI_Fire2__neoVI * pMsg);
int DB_Report_Message__neoVI_Fire2__neoVI_Transmit(DB_Report_Message__neoVI_Fire2__neoVI * pMsg);
int DB_Report_Message__neoVI_Fire2__neoVI_Transmit_raw(DB_Report_Message__neoVI_Fire2__neoVI * pMsg);
int DB_Report_Message__neoVI_Fire2__neoVI_UpdateBytesFromSignals(DB_Report_Message__neoVI_Fire2__neoVI * pMsg);
int DB_Report_Message__neoVI_Fire2__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__neoVI_Fire2__neoVI * pMsg);
#define DB_Report_Message__neoVI_Fire2__neoVI_RTC_Battery_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_Temperature_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_Vehicle_Battery_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_EMISC1_AIN_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_EMISC2_AIN_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 4, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_EMISC1_DIN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 5, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_EMISC2_DIN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 6, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_MISC5_DIN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 7, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_MISC6_DIN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 8, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_LED1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 9, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_LED2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__neoVI_Fire2__neoVI_Index, 10, dPhysicalValue);
#define DB_Report_Message__neoVI_Fire2__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__neoVI_Fire2__neoVI_Index, 0)
#define DB_Report_Message__neoVI_Fire2__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__neoVI_Fire2__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__GPS_Latitude__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Latitude; /// Min: 0 Max: 0 Units: degrees
    uint64 Latitude_raw;
} DB_Report_Message__GPS_Latitude__neoVI;


void DB_Report_Message__GPS_Latitude__neoVI_Init(DB_Report_Message__GPS_Latitude__neoVI * pMsg);
int DB_Report_Message__GPS_Latitude__neoVI_Transmit(DB_Report_Message__GPS_Latitude__neoVI * pMsg);
int DB_Report_Message__GPS_Latitude__neoVI_Transmit_raw(DB_Report_Message__GPS_Latitude__neoVI * pMsg);
int DB_Report_Message__GPS_Latitude__neoVI_UpdateBytesFromSignals(DB_Report_Message__GPS_Latitude__neoVI * pMsg);
int DB_Report_Message__GPS_Latitude__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__GPS_Latitude__neoVI * pMsg);
#define DB_Report_Message__GPS_Latitude__neoVI_Latitude_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Latitude__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__GPS_Latitude__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__GPS_Latitude__neoVI_Index, 0)
#define DB_Report_Message__GPS_Latitude__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__GPS_Latitude__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__GPS_Longitude__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Longitude; /// Min: 0 Max: 0 Units: degrees
    uint64 Longitude_raw;
} DB_Report_Message__GPS_Longitude__neoVI;


void DB_Report_Message__GPS_Longitude__neoVI_Init(DB_Report_Message__GPS_Longitude__neoVI * pMsg);
int DB_Report_Message__GPS_Longitude__neoVI_Transmit(DB_Report_Message__GPS_Longitude__neoVI * pMsg);
int DB_Report_Message__GPS_Longitude__neoVI_Transmit_raw(DB_Report_Message__GPS_Longitude__neoVI * pMsg);
int DB_Report_Message__GPS_Longitude__neoVI_UpdateBytesFromSignals(DB_Report_Message__GPS_Longitude__neoVI * pMsg);
int DB_Report_Message__GPS_Longitude__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__GPS_Longitude__neoVI * pMsg);
#define DB_Report_Message__GPS_Longitude__neoVI_Longitude_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Longitude__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__GPS_Longitude__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__GPS_Longitude__neoVI_Index, 0)
#define DB_Report_Message__GPS_Longitude__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__GPS_Longitude__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__GPS_Flags__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Update_Count; /// Min: 0 Max: 255 Units: 
    BYTE Update_Count_raw;
    double GPS_Date_Available; /// Min: 0 Max: 1 Units: 
    BYTE GPS_Date_Available_raw;
    double GPS_Time_Available; /// Min: 0 Max: 1 Units: 
    BYTE GPS_Time_Available_raw;
    double GPS_Accuracy_Available; /// Min: 0 Max: 1 Units: 
    BYTE GPS_Accuracy_Available_raw;
    double GPS_Bearing_Available; /// Min: 0 Max: 1 Units: 
    BYTE GPS_Bearing_Available_raw;
    double GPS_Speed_Available; /// Min: 0 Max: 1 Units: 
    BYTE GPS_Speed_Available_raw;
    double GPS_Altitude_Available; /// Min: 0 Max: 1 Units: 
    BYTE GPS_Altitude_Available_raw;
    double GPS_Lat_Lon_Available; /// Min: 0 Max: 1 Units: 
    BYTE GPS_Lat_Lon_Available_raw;
} DB_Report_Message__GPS_Flags__neoVI;


void DB_Report_Message__GPS_Flags__neoVI_Init(DB_Report_Message__GPS_Flags__neoVI * pMsg);
int DB_Report_Message__GPS_Flags__neoVI_Transmit(DB_Report_Message__GPS_Flags__neoVI * pMsg);
int DB_Report_Message__GPS_Flags__neoVI_Transmit_raw(DB_Report_Message__GPS_Flags__neoVI * pMsg);
int DB_Report_Message__GPS_Flags__neoVI_UpdateBytesFromSignals(DB_Report_Message__GPS_Flags__neoVI * pMsg);
int DB_Report_Message__GPS_Flags__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__GPS_Flags__neoVI * pMsg);
#define DB_Report_Message__GPS_Flags__neoVI_Update_Count_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_GPS_Date_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_GPS_Time_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_GPS_Accuracy_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_GPS_Bearing_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 4, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_GPS_Speed_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 5, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_GPS_Altitude_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 6, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_GPS_Lat_Lon_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Flags__neoVI_Index, 7, dPhysicalValue);
#define DB_Report_Message__GPS_Flags__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__GPS_Flags__neoVI_Index, 0)
#define DB_Report_Message__GPS_Flags__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__GPS_Flags__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__GPS_Altitude__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Altitude_Ellipse; /// Min: 0 Max: 0 Units: meters
    uint64 Altitude_Ellipse_raw;
} DB_Report_Message__GPS_Altitude__neoVI;


void DB_Report_Message__GPS_Altitude__neoVI_Init(DB_Report_Message__GPS_Altitude__neoVI * pMsg);
int DB_Report_Message__GPS_Altitude__neoVI_Transmit(DB_Report_Message__GPS_Altitude__neoVI * pMsg);
int DB_Report_Message__GPS_Altitude__neoVI_Transmit_raw(DB_Report_Message__GPS_Altitude__neoVI * pMsg);
int DB_Report_Message__GPS_Altitude__neoVI_UpdateBytesFromSignals(DB_Report_Message__GPS_Altitude__neoVI * pMsg);
int DB_Report_Message__GPS_Altitude__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__GPS_Altitude__neoVI * pMsg);
#define DB_Report_Message__GPS_Altitude__neoVI_Altitude_Ellipse_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Altitude__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__GPS_Altitude__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__GPS_Altitude__neoVI_Index, 0)
#define DB_Report_Message__GPS_Altitude__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__GPS_Altitude__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__GPS_Speed_Bearing__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Speed; /// Min: 0 Max: 0 Units: m/s
    DWORD Speed_raw;
    double Bearing; /// Min: 0 Max: 0 Units: degrees
    DWORD Bearing_raw;
} DB_Report_Message__GPS_Speed_Bearing__neoVI;


void DB_Report_Message__GPS_Speed_Bearing__neoVI_Init(DB_Report_Message__GPS_Speed_Bearing__neoVI * pMsg);
int DB_Report_Message__GPS_Speed_Bearing__neoVI_Transmit(DB_Report_Message__GPS_Speed_Bearing__neoVI * pMsg);
int DB_Report_Message__GPS_Speed_Bearing__neoVI_Transmit_raw(DB_Report_Message__GPS_Speed_Bearing__neoVI * pMsg);
int DB_Report_Message__GPS_Speed_Bearing__neoVI_UpdateBytesFromSignals(DB_Report_Message__GPS_Speed_Bearing__neoVI * pMsg);
int DB_Report_Message__GPS_Speed_Bearing__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__GPS_Speed_Bearing__neoVI * pMsg);
#define DB_Report_Message__GPS_Speed_Bearing__neoVI_Speed_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Speed_Bearing__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__GPS_Speed_Bearing__neoVI_Bearing_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Speed_Bearing__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__GPS_Speed_Bearing__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__GPS_Speed_Bearing__neoVI_Index, 0)
#define DB_Report_Message__GPS_Speed_Bearing__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__GPS_Speed_Bearing__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__GPS_Accuracy__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Accuracy; /// Min: 0 Max: 0 Units: meters
    DWORD Accuracy_raw;
} DB_Report_Message__GPS_Accuracy__neoVI;


void DB_Report_Message__GPS_Accuracy__neoVI_Init(DB_Report_Message__GPS_Accuracy__neoVI * pMsg);
int DB_Report_Message__GPS_Accuracy__neoVI_Transmit(DB_Report_Message__GPS_Accuracy__neoVI * pMsg);
int DB_Report_Message__GPS_Accuracy__neoVI_Transmit_raw(DB_Report_Message__GPS_Accuracy__neoVI * pMsg);
int DB_Report_Message__GPS_Accuracy__neoVI_UpdateBytesFromSignals(DB_Report_Message__GPS_Accuracy__neoVI * pMsg);
int DB_Report_Message__GPS_Accuracy__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__GPS_Accuracy__neoVI * pMsg);
#define DB_Report_Message__GPS_Accuracy__neoVI_Accuracy_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Accuracy__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__GPS_Accuracy__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__GPS_Accuracy__neoVI_Index, 0)
#define DB_Report_Message__GPS_Accuracy__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__GPS_Accuracy__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__GPS_Time__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Timestamp; /// Min: 0 Max: 18446744073709551615 Units: ms since 1/1/1970
    uint64 Timestamp_raw;
} DB_Report_Message__GPS_Time__neoVI;


void DB_Report_Message__GPS_Time__neoVI_Init(DB_Report_Message__GPS_Time__neoVI * pMsg);
int DB_Report_Message__GPS_Time__neoVI_Transmit(DB_Report_Message__GPS_Time__neoVI * pMsg);
int DB_Report_Message__GPS_Time__neoVI_Transmit_raw(DB_Report_Message__GPS_Time__neoVI * pMsg);
int DB_Report_Message__GPS_Time__neoVI_UpdateBytesFromSignals(DB_Report_Message__GPS_Time__neoVI * pMsg);
int DB_Report_Message__GPS_Time__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__GPS_Time__neoVI * pMsg);
#define DB_Report_Message__GPS_Time__neoVI_Timestamp_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__GPS_Time__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__GPS_Time__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__GPS_Time__neoVI_Index, 0)
#define DB_Report_Message__GPS_Time__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__GPS_Time__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__WirelessneoVI_Sectors__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double WiviStartSector; /// Min: -2147483648 Max: 2147483647 Units: 
    DWORD WiviStartSector_raw;
    double WiviEndSector; /// Min: -2147483648 Max: 2147483647 Units: 
    DWORD WiviEndSector_raw;
} DB_Report_Message__WirelessneoVI_Sectors__neoVI;


void DB_Report_Message__WirelessneoVI_Sectors__neoVI_Init(DB_Report_Message__WirelessneoVI_Sectors__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Sectors__neoVI_Transmit(DB_Report_Message__WirelessneoVI_Sectors__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Sectors__neoVI_Transmit_raw(DB_Report_Message__WirelessneoVI_Sectors__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Sectors__neoVI_UpdateBytesFromSignals(DB_Report_Message__WirelessneoVI_Sectors__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Sectors__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__WirelessneoVI_Sectors__neoVI * pMsg);
#define DB_Report_Message__WirelessneoVI_Sectors__neoVI_WiviStartSector_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Sectors__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Sectors__neoVI_WiviEndSector_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Sectors__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Sectors__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__WirelessneoVI_Sectors__neoVI_Index, 0)
#define DB_Report_Message__WirelessneoVI_Sectors__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__WirelessneoVI_Sectors__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__WirelessneoVI_Signals__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double WiviJob; /// Min: -128 Max: 127 Units: 
    BYTE WiviJob_raw;
    double WiviApkResponse; /// Min: -128 Max: 127 Units: 
    BYTE WiviApkResponse_raw;
    double WiviDataTransferMediumChoice; /// Min: -128 Max: 127 Units: 
    BYTE WiviDataTransferMediumChoice_raw;
    double WiviApkResponseTo; /// Min: -128 Max: 127 Units: 
    BYTE WiviApkResponseTo_raw;
    double WiviReserved0; /// Min: -128 Max: 127 Units: 
    BYTE WiviReserved0_raw;
    double WiviReserved1; /// Min: -128 Max: 127 Units: 
    BYTE WiviReserved1_raw;
} DB_Report_Message__WirelessneoVI_Signals__neoVI;


void DB_Report_Message__WirelessneoVI_Signals__neoVI_Init(DB_Report_Message__WirelessneoVI_Signals__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Signals__neoVI_Transmit(DB_Report_Message__WirelessneoVI_Signals__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Signals__neoVI_Transmit_raw(DB_Report_Message__WirelessneoVI_Signals__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Signals__neoVI_UpdateBytesFromSignals(DB_Report_Message__WirelessneoVI_Signals__neoVI * pMsg);
int DB_Report_Message__WirelessneoVI_Signals__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__WirelessneoVI_Signals__neoVI * pMsg);
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_WiviJob_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_WiviApkResponse_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_WiviDataTransferMediumChoice_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_WiviApkResponseTo_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_WiviReserved0_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 4, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_WiviReserved1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 5, dPhysicalValue);
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 0)
#define DB_Report_Message__WirelessneoVI_Signals__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__WirelessneoVI_Signals__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI;


void DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_Init(DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI * pMsg);
int DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_Transmit(DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI * pMsg);
int DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_Transmit_raw(DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI * pMsg);
#define DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_Index, 0)
#define DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Logger_temporarily_disconnected_from_SD_Card_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Logger_Message_Data_Lost_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} DB_neoVI_Logger_Message_Data_Lost_neoVI;


void DB_neoVI_Logger_Message_Data_Lost_neoVI_Init(DB_neoVI_Logger_Message_Data_Lost_neoVI * pMsg);
int DB_neoVI_Logger_Message_Data_Lost_neoVI_Transmit(DB_neoVI_Logger_Message_Data_Lost_neoVI * pMsg);
int DB_neoVI_Logger_Message_Data_Lost_neoVI_Transmit_raw(DB_neoVI_Logger_Message_Data_Lost_neoVI * pMsg);
#define DB_neoVI_Logger_Message_Data_Lost_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Logger_Message_Data_Lost_neoVI_Index, 0)
#define DB_neoVI_Logger_Message_Data_Lost_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Logger_Message_Data_Lost_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI;


void DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_Init(DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI * pMsg);
int DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_Transmit(DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI * pMsg);
int DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_Transmit_raw(DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI * pMsg);
#define DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_Index, 0)
#define DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Logger___Extractor_skipped_invalid_record_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Logger_woke_up_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double SleepFlags; /// Min: 0 Max: 65535 Units: 
    WORD SleepFlags_raw;
    double WakeupFlags; /// Min: 0 Max: 65535 Units: 
    WORD WakeupFlags_raw;
    double WakeUpSms; /// Min: 0 Max: 1 Units: 
    BYTE WakeUpSms_raw;
    double WakeupSlaveA; /// Min: 0 Max: 1 Units: 
    BYTE WakeupSlaveA_raw;
    double WakeupSlaveB; /// Min: 0 Max: 1 Units: 
    BYTE WakeupSlaveB_raw;
    double WakeupMainVnet; /// Min: 0 Max: 1 Units: 
    BYTE WakeupMainVnet_raw;
    double WakeupUsb; /// Min: 0 Max: 1 Units: 
    BYTE WakeupUsb_raw;
    double PowerBoot; /// Min: 0 Max: 1 Units: 
    BYTE PowerBoot_raw;
    double LowVbatSleep; /// Min: 0 Max: 1 Units: 
    BYTE LowVbatSleep_raw;
    double NoCmSleep; /// Min: 0 Max: 1 Units: 
    BYTE NoCmSleep_raw;
} DB_neoVI_Logger_woke_up_neoVI;


void DB_neoVI_Logger_woke_up_neoVI_Init(DB_neoVI_Logger_woke_up_neoVI * pMsg);
int DB_neoVI_Logger_woke_up_neoVI_Transmit(DB_neoVI_Logger_woke_up_neoVI * pMsg);
int DB_neoVI_Logger_woke_up_neoVI_Transmit_raw(DB_neoVI_Logger_woke_up_neoVI * pMsg);
int DB_neoVI_Logger_woke_up_neoVI_UpdateBytesFromSignals(DB_neoVI_Logger_woke_up_neoVI * pMsg);
int DB_neoVI_Logger_woke_up_neoVI_UpdateBytesFromRawSignals(DB_neoVI_Logger_woke_up_neoVI * pMsg);
#define DB_neoVI_Logger_woke_up_neoVI_SleepFlags_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 0, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_WakeupFlags_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 1, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_WakeUpSms_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 2, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_WakeupSlaveA_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 3, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_WakeupSlaveB_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 4, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_WakeupMainVnet_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 5, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_WakeupUsb_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 6, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_PowerBoot_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 7, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_LowVbatSleep_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 8, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_NoCmSleep_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Logger_woke_up_neoVI_Index, 9, dPhysicalValue);
#define DB_neoVI_Logger_woke_up_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Logger_woke_up_neoVI_Index, 0)
#define DB_neoVI_Logger_woke_up_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Logger_woke_up_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message_1_Analog_Card__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Channel_A; /// Min: -9980.46875 Max: 10000 Units: mV
    WORD Channel_A_raw;
    double Channel_B; /// Min: -9980.46875 Max: 10000 Units: mV
    WORD Channel_B_raw;
    double Channel_1_Differential_; /// Min: -42978.83555 Max: 42980.14719999999 Units: mV
    WORD Channel_1_Differential__raw;
    double Channel_2_Differential_; /// Min: -42978.83555 Max: 42980.14719999999 Units: mV
    WORD Channel_2_Differential__raw;
} DB_Report_Message_1_Analog_Card__neoVI;


void DB_Report_Message_1_Analog_Card__neoVI_Init(DB_Report_Message_1_Analog_Card__neoVI * pMsg);
int DB_Report_Message_1_Analog_Card__neoVI_Transmit(DB_Report_Message_1_Analog_Card__neoVI * pMsg);
int DB_Report_Message_1_Analog_Card__neoVI_Transmit_raw(DB_Report_Message_1_Analog_Card__neoVI * pMsg);
int DB_Report_Message_1_Analog_Card__neoVI_UpdateBytesFromSignals(DB_Report_Message_1_Analog_Card__neoVI * pMsg);
int DB_Report_Message_1_Analog_Card__neoVI_UpdateBytesFromRawSignals(DB_Report_Message_1_Analog_Card__neoVI * pMsg);
#define DB_Report_Message_1_Analog_Card__neoVI_Channel_A_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_1_Analog_Card__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message_1_Analog_Card__neoVI_Channel_B_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_1_Analog_Card__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message_1_Analog_Card__neoVI_Channel_1_Differential__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_1_Analog_Card__neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message_1_Analog_Card__neoVI_Channel_2_Differential__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_1_Analog_Card__neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message_1_Analog_Card__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message_1_Analog_Card__neoVI_Index, 0)
#define DB_Report_Message_1_Analog_Card__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message_1_Analog_Card__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message_2_Analog_Card__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Channel_3_Differential_; /// Min: -42978.83555 Max: 42980.14719999999 Units: mV
    WORD Channel_3_Differential__raw;
    double Channel_4_Differential_; /// Min: -42978.83555 Max: 42980.14719999999 Units: mV
    WORD Channel_4_Differential__raw;
    double Channel_5_Differential_; /// Min: -42978.83555 Max: 42980.14719999999 Units: mV
    WORD Channel_5_Differential__raw;
    double Channel_6_Differential_; /// Min: -42978.83555 Max: 42980.14719999999 Units: mV
    WORD Channel_6_Differential__raw;
} DB_Report_Message_2_Analog_Card__neoVI;


void DB_Report_Message_2_Analog_Card__neoVI_Init(DB_Report_Message_2_Analog_Card__neoVI * pMsg);
int DB_Report_Message_2_Analog_Card__neoVI_Transmit(DB_Report_Message_2_Analog_Card__neoVI * pMsg);
int DB_Report_Message_2_Analog_Card__neoVI_Transmit_raw(DB_Report_Message_2_Analog_Card__neoVI * pMsg);
int DB_Report_Message_2_Analog_Card__neoVI_UpdateBytesFromSignals(DB_Report_Message_2_Analog_Card__neoVI * pMsg);
int DB_Report_Message_2_Analog_Card__neoVI_UpdateBytesFromRawSignals(DB_Report_Message_2_Analog_Card__neoVI * pMsg);
#define DB_Report_Message_2_Analog_Card__neoVI_Channel_3_Differential__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_2_Analog_Card__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message_2_Analog_Card__neoVI_Channel_4_Differential__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_2_Analog_Card__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message_2_Analog_Card__neoVI_Channel_5_Differential__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_2_Analog_Card__neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message_2_Analog_Card__neoVI_Channel_6_Differential__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_2_Analog_Card__neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message_2_Analog_Card__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message_2_Analog_Card__neoVI_Index, 0)
#define DB_Report_Message_2_Analog_Card__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message_2_Analog_Card__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message_3_Analog_Card__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Channel_7_Differential_; /// Min: -42978.83555 Max: 42980.14719999999 Units: mV
    WORD Channel_7_Differential__raw;
} DB_Report_Message_3_Analog_Card__neoVI;


void DB_Report_Message_3_Analog_Card__neoVI_Init(DB_Report_Message_3_Analog_Card__neoVI * pMsg);
int DB_Report_Message_3_Analog_Card__neoVI_Transmit(DB_Report_Message_3_Analog_Card__neoVI * pMsg);
int DB_Report_Message_3_Analog_Card__neoVI_Transmit_raw(DB_Report_Message_3_Analog_Card__neoVI * pMsg);
int DB_Report_Message_3_Analog_Card__neoVI_UpdateBytesFromSignals(DB_Report_Message_3_Analog_Card__neoVI * pMsg);
int DB_Report_Message_3_Analog_Card__neoVI_UpdateBytesFromRawSignals(DB_Report_Message_3_Analog_Card__neoVI * pMsg);
#define DB_Report_Message_3_Analog_Card__neoVI_Channel_7_Differential__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_3_Analog_Card__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message_3_Analog_Card__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message_3_Analog_Card__neoVI_Index, 0)
#define DB_Report_Message_3_Analog_Card__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message_3_Analog_Card__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message_4_Analog_Card__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Timestamp; /// Min: 0 Max: 18446744073709551615 Units: 
    uint64 Timestamp_raw;
} DB_Report_Message_4_Analog_Card__neoVI;


void DB_Report_Message_4_Analog_Card__neoVI_Init(DB_Report_Message_4_Analog_Card__neoVI * pMsg);
int DB_Report_Message_4_Analog_Card__neoVI_Transmit(DB_Report_Message_4_Analog_Card__neoVI * pMsg);
int DB_Report_Message_4_Analog_Card__neoVI_Transmit_raw(DB_Report_Message_4_Analog_Card__neoVI * pMsg);
int DB_Report_Message_4_Analog_Card__neoVI_UpdateBytesFromSignals(DB_Report_Message_4_Analog_Card__neoVI * pMsg);
int DB_Report_Message_4_Analog_Card__neoVI_UpdateBytesFromRawSignals(DB_Report_Message_4_Analog_Card__neoVI * pMsg);
#define DB_Report_Message_4_Analog_Card__neoVI_Timestamp_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message_4_Analog_Card__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message_4_Analog_Card__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message_4_Analog_Card__neoVI_Index, 0)
#define DB_Report_Message_4_Analog_Card__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message_4_Analog_Card__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Time_Resync_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Timestamp; /// Min: -0 Max: 0 Units: ms
    uint64 Timestamp_raw;
} DB_Time_Resync_neoVI;


void DB_Time_Resync_neoVI_Init(DB_Time_Resync_neoVI * pMsg);
int DB_Time_Resync_neoVI_Transmit(DB_Time_Resync_neoVI * pMsg);
int DB_Time_Resync_neoVI_Transmit_raw(DB_Time_Resync_neoVI * pMsg);
int DB_Time_Resync_neoVI_UpdateBytesFromSignals(DB_Time_Resync_neoVI * pMsg);
int DB_Time_Resync_neoVI_UpdateBytesFromRawSignals(DB_Time_Resync_neoVI * pMsg);
#define DB_Time_Resync_neoVI_Timestamp_PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Time_Resync_neoVI_Index, 0, dPhysicalValue);
#define DB_Time_Resync_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Time_Resync_neoVI_Index, 0)
#define DB_Time_Resync_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Time_Resync_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_VNET_Clock_Edge_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} DB_VNET_Clock_Edge_neoVI;


void DB_VNET_Clock_Edge_neoVI_Init(DB_VNET_Clock_Edge_neoVI * pMsg);
int DB_VNET_Clock_Edge_neoVI_Transmit(DB_VNET_Clock_Edge_neoVI * pMsg);
int DB_VNET_Clock_Edge_neoVI_Transmit_raw(DB_VNET_Clock_Edge_neoVI * pMsg);
#define DB_VNET_Clock_Edge_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_VNET_Clock_Edge_neoVI_Index, 0)
#define DB_VNET_Clock_Edge_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_VNET_Clock_Edge_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_VNET_A_Stats_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double msgTotal; /// Min: 0 Max: 65535 Units: 
    WORD msgTotal_raw;
    double rxSize; /// Min: 0 Max: 255 Units: 
    BYTE rxSize_raw;
    double scCnt; /// Min: 0 Max: 255 Units: 
    BYTE scCnt_raw;
    double yields; /// Min: 0 Max: 65535 Units: 
    WORD yields_raw;
    double bytesRead; /// Min: 0 Max: 65535 Units: 
    WORD bytesRead_raw;
} DB_VNET_A_Stats_neoVI;


void DB_VNET_A_Stats_neoVI_Init(DB_VNET_A_Stats_neoVI * pMsg);
int DB_VNET_A_Stats_neoVI_Transmit(DB_VNET_A_Stats_neoVI * pMsg);
int DB_VNET_A_Stats_neoVI_Transmit_raw(DB_VNET_A_Stats_neoVI * pMsg);
int DB_VNET_A_Stats_neoVI_UpdateBytesFromSignals(DB_VNET_A_Stats_neoVI * pMsg);
int DB_VNET_A_Stats_neoVI_UpdateBytesFromRawSignals(DB_VNET_A_Stats_neoVI * pMsg);
#define DB_VNET_A_Stats_neoVI_msgTotal_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_VNET_A_Stats_neoVI_Index, 0, dPhysicalValue);
#define DB_VNET_A_Stats_neoVI_rxSize_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_VNET_A_Stats_neoVI_Index, 1, dPhysicalValue);
#define DB_VNET_A_Stats_neoVI_scCnt_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_VNET_A_Stats_neoVI_Index, 2, dPhysicalValue);
#define DB_VNET_A_Stats_neoVI_yields_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_VNET_A_Stats_neoVI_Index, 3, dPhysicalValue);
#define DB_VNET_A_Stats_neoVI_bytesRead_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_VNET_A_Stats_neoVI_Index, 4, dPhysicalValue);
#define DB_VNET_A_Stats_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_VNET_A_Stats_neoVI_Index, 0)
#define DB_VNET_A_Stats_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_VNET_A_Stats_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_VNET_A_Reboot_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} DB_VNET_A_Reboot_neoVI;


void DB_VNET_A_Reboot_neoVI_Init(DB_VNET_A_Reboot_neoVI * pMsg);
int DB_VNET_A_Reboot_neoVI_Transmit(DB_VNET_A_Reboot_neoVI * pMsg);
int DB_VNET_A_Reboot_neoVI_Transmit_raw(DB_VNET_A_Reboot_neoVI * pMsg);
#define DB_VNET_A_Reboot_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_VNET_A_Reboot_neoVI_Index, 0)
#define DB_VNET_A_Reboot_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_VNET_A_Reboot_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Went_To_Sleep_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} DB_neoVI_Went_To_Sleep_neoVI;


void DB_neoVI_Went_To_Sleep_neoVI_Init(DB_neoVI_Went_To_Sleep_neoVI * pMsg);
int DB_neoVI_Went_To_Sleep_neoVI_Transmit(DB_neoVI_Went_To_Sleep_neoVI * pMsg);
int DB_neoVI_Went_To_Sleep_neoVI_Transmit_raw(DB_neoVI_Went_To_Sleep_neoVI * pMsg);
#define DB_neoVI_Went_To_Sleep_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Went_To_Sleep_neoVI_Index, 0)
#define DB_neoVI_Went_To_Sleep_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Went_To_Sleep_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Device_subsystem_restarted__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
} DB_Device_subsystem_restarted__neoVI;


void DB_Device_subsystem_restarted__neoVI_Init(DB_Device_subsystem_restarted__neoVI * pMsg);
int DB_Device_subsystem_restarted__neoVI_Transmit(DB_Device_subsystem_restarted__neoVI * pMsg);
int DB_Device_subsystem_restarted__neoVI_Transmit_raw(DB_Device_subsystem_restarted__neoVI * pMsg);
#define DB_Device_subsystem_restarted__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Device_subsystem_restarted__neoVI_Index, 0)
#define DB_Device_subsystem_restarted__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Device_subsystem_restarted__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Ethernet_DAQ_Report_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Recording; /// Min: 0 Max: 1 Units: 
    BYTE Recording_raw;
    double FPGA_Alive; /// Min: 0 Max: 1 Units: 
    BYTE FPGA_Alive_raw;
    double Bad_Chip; /// Min: 0 Max: 1 Units: 
    BYTE Bad_Chip_raw;
    double Raw_MAC_Mode; /// Min: 0 Max: 1 Units: 
    BYTE Raw_MAC_Mode_raw;
    double IPv4_Filter; /// Min: 0 Max: 1 Units: 
    BYTE IPv4_Filter_raw;
    double RxOverflow; /// Min: 0 Max: 1 Units: 
    BYTE RxOverflow_raw;
    double CmdBusy; /// Min: 0 Max: 1 Units: 
    BYTE CmdBusy_raw;
    double LogTO; /// Min: 0 Max: 1 Units: 
    BYTE LogTO_raw;
    double SockActivityTO; /// Min: 0 Max: 1 Units: 
    BYTE SockActivityTO_raw;
    double FPGAComTO; /// Min: 0 Max: 255 Units: 
    BYTE FPGAComTO_raw;
    double SockConfigTO; /// Min: 0 Max: 255 Units: 
    BYTE SockConfigTO_raw;
    double SockDiscon; /// Min: 0 Max: 255 Units: 
    BYTE SockDiscon_raw;
    double WcfSM; /// Min: 0 Max: 255 Units: 
    BYTE WcfSM_raw;
    double TxMsgsPending; /// Min: 0 Max: 255 Units: 
    BYTE TxMsgsPending_raw;
} DB_Ethernet_DAQ_Report_neoVI;


void DB_Ethernet_DAQ_Report_neoVI_Init(DB_Ethernet_DAQ_Report_neoVI * pMsg);
int DB_Ethernet_DAQ_Report_neoVI_Transmit(DB_Ethernet_DAQ_Report_neoVI * pMsg);
int DB_Ethernet_DAQ_Report_neoVI_Transmit_raw(DB_Ethernet_DAQ_Report_neoVI * pMsg);
int DB_Ethernet_DAQ_Report_neoVI_UpdateBytesFromSignals(DB_Ethernet_DAQ_Report_neoVI * pMsg);
int DB_Ethernet_DAQ_Report_neoVI_UpdateBytesFromRawSignals(DB_Ethernet_DAQ_Report_neoVI * pMsg);
#define DB_Ethernet_DAQ_Report_neoVI_Recording_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 0, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_FPGA_Alive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 1, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_Bad_Chip_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 2, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_Raw_MAC_Mode_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 3, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_IPv4_Filter_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 4, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_RxOverflow_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 5, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_CmdBusy_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 6, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_LogTO_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 7, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_SockActivityTO_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 8, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_FPGAComTO_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 9, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_SockConfigTO_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 10, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_SockDiscon_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 11, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_WcfSM_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 12, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_TxMsgsPending_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_DAQ_Report_neoVI_Index, 13, dPhysicalValue);
#define DB_Ethernet_DAQ_Report_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Ethernet_DAQ_Report_neoVI_Index, 0)
#define DB_Ethernet_DAQ_Report_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Ethernet_DAQ_Report_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Status_Update_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Type; /// Min: 0 Max: 255 Units: 
    BYTE Type_raw;
    double ChangeCount; /// Min: 0 Max: 255 Units: 
    BYTE ChangeCount_raw;
} DB_neoVI_Status_Update_neoVI;


void DB_neoVI_Status_Update_neoVI_Init(DB_neoVI_Status_Update_neoVI * pMsg);
int DB_neoVI_Status_Update_neoVI_Transmit(DB_neoVI_Status_Update_neoVI * pMsg);
int DB_neoVI_Status_Update_neoVI_Transmit_raw(DB_neoVI_Status_Update_neoVI * pMsg);
int DB_neoVI_Status_Update_neoVI_UpdateBytesFromSignals(DB_neoVI_Status_Update_neoVI * pMsg);
int DB_neoVI_Status_Update_neoVI_UpdateBytesFromRawSignals(DB_neoVI_Status_Update_neoVI * pMsg);
#define DB_neoVI_Status_Update_neoVI_Type_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Status_Update_neoVI_Index, 0, dPhysicalValue);
#define DB_neoVI_Status_Update_neoVI_ChangeCount_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Status_Update_neoVI_Index, 1, dPhysicalValue);
#define DB_neoVI_Status_Update_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Status_Update_neoVI_Index, 0)
#define DB_neoVI_Status_Update_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Status_Update_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Scc_Status_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FvA; /// Min: 0 Max: 1 Units: 
    BYTE FvA_raw;
    double ScA; /// Min: 0 Max: 1 Units: 
    BYTE ScA_raw;
    double Atv; /// Min: 0 Max: 1 Units: 
    BYTE Atv_raw;
    double sip; /// Min: 0 Max: 1 Units: 
    BYTE sip_raw;
    double pt; /// Min: 0 Max: 4294967295 Units: 
    DWORD pt_raw;
    double Req; /// Min: 0 Max: 255 Units: 
    BYTE Req_raw;
} DB_Scc_Status_neoVI;


void DB_Scc_Status_neoVI_Init(DB_Scc_Status_neoVI * pMsg);
int DB_Scc_Status_neoVI_Transmit(DB_Scc_Status_neoVI * pMsg);
int DB_Scc_Status_neoVI_Transmit_raw(DB_Scc_Status_neoVI * pMsg);
int DB_Scc_Status_neoVI_UpdateBytesFromSignals(DB_Scc_Status_neoVI * pMsg);
int DB_Scc_Status_neoVI_UpdateBytesFromRawSignals(DB_Scc_Status_neoVI * pMsg);
#define DB_Scc_Status_neoVI_FvA_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Scc_Status_neoVI_Index, 0, dPhysicalValue);
#define DB_Scc_Status_neoVI_ScA_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Scc_Status_neoVI_Index, 1, dPhysicalValue);
#define DB_Scc_Status_neoVI_Atv_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Scc_Status_neoVI_Index, 2, dPhysicalValue);
#define DB_Scc_Status_neoVI_sip_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Scc_Status_neoVI_Index, 3, dPhysicalValue);
#define DB_Scc_Status_neoVI_pt_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Scc_Status_neoVI_Index, 4, dPhysicalValue);
#define DB_Scc_Status_neoVI_Req_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Scc_Status_neoVI_Index, 5, dPhysicalValue);
#define DB_Scc_Status_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Scc_Status_neoVI_Index, 0)
#define DB_Scc_Status_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Scc_Status_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double PWM1_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM1_IN_raw;
    double PWM2_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM2_IN_raw;
    double PWM3_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM3_IN_raw;
    double PWM4_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM4_IN_raw;
    double PWM5_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM5_IN_raw;
    double PWM6_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM6_IN_raw;
    double PWM7_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM7_IN_raw;
    double PWM8_IN; /// Min: 0 Max: 1 Units: 
    BYTE PWM8_IN_raw;
} DB_Report_Message__Analog_Card_PWM_Inputs__neoVI;


void DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Init(DB_Report_Message__Analog_Card_PWM_Inputs__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM_Inputs__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM_Inputs__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM_Inputs__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM_Inputs__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM1_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM2_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM3_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 2, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM4_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 3, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM5_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 4, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM6_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 5, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM7_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 6, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_PWM8_IN_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 7, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM_Inputs__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM1__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM1__neoVI;


void DB_Report_Message__Analog_Card_PWM1__neoVI_Init(DB_Report_Message__Analog_Card_PWM1__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM1__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM1__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM1__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM1__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM1__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM1__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM1__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM1__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM1__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM1__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM1__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM1__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM1__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM1__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM1__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM1__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM2__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM2__neoVI;


void DB_Report_Message__Analog_Card_PWM2__neoVI_Init(DB_Report_Message__Analog_Card_PWM2__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM2__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM2__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM2__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM2__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM2__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM2__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM2__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM2__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM2__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM2__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM2__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM2__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM2__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM2__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM2__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM2__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM3__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM3__neoVI;


void DB_Report_Message__Analog_Card_PWM3__neoVI_Init(DB_Report_Message__Analog_Card_PWM3__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM3__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM3__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM3__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM3__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM3__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM3__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM3__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM3__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM3__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM3__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM3__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM3__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM3__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM3__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM3__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM3__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM4__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM4__neoVI;


void DB_Report_Message__Analog_Card_PWM4__neoVI_Init(DB_Report_Message__Analog_Card_PWM4__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM4__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM4__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM4__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM4__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM4__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM4__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM4__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM4__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM4__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM4__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM4__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM4__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM4__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM4__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM4__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM4__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM5__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM5__neoVI;


void DB_Report_Message__Analog_Card_PWM5__neoVI_Init(DB_Report_Message__Analog_Card_PWM5__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM5__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM5__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM5__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM5__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM5__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM5__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM5__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM5__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM5__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM5__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM5__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM5__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM5__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM5__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM5__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM5__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM6__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM6__neoVI;


void DB_Report_Message__Analog_Card_PWM6__neoVI_Init(DB_Report_Message__Analog_Card_PWM6__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM6__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM6__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM6__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM6__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM6__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM6__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM6__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM6__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM6__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM6__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM6__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM6__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM6__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM6__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM6__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM6__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM7__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM7__neoVI;


void DB_Report_Message__Analog_Card_PWM7__neoVI_Init(DB_Report_Message__Analog_Card_PWM7__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM7__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM7__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM7__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM7__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM7__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM7__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM7__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM7__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM7__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM7__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM7__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM7__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM7__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM7__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM7__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM7__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Report_Message__Analog_Card_PWM8__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Pulse_Width_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Pulse_Width_ms__raw;
    double Period_ms_; /// Min: 0 Max: 0 Units: ms
    DWORD Period_ms__raw;
} DB_Report_Message__Analog_Card_PWM8__neoVI;


void DB_Report_Message__Analog_Card_PWM8__neoVI_Init(DB_Report_Message__Analog_Card_PWM8__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM8__neoVI_Transmit(DB_Report_Message__Analog_Card_PWM8__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM8__neoVI_Transmit_raw(DB_Report_Message__Analog_Card_PWM8__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM8__neoVI_UpdateBytesFromSignals(DB_Report_Message__Analog_Card_PWM8__neoVI * pMsg);
int DB_Report_Message__Analog_Card_PWM8__neoVI_UpdateBytesFromRawSignals(DB_Report_Message__Analog_Card_PWM8__neoVI * pMsg);
#define DB_Report_Message__Analog_Card_PWM8__neoVI_Pulse_Width_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM8__neoVI_Index, 0, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM8__neoVI_Period_ms__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Report_Message__Analog_Card_PWM8__neoVI_Index, 1, dPhysicalValue);
#define DB_Report_Message__Analog_Card_PWM8__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Report_Message__Analog_Card_PWM8__neoVI_Index, 0)
#define DB_Report_Message__Analog_Card_PWM8__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Report_Message__Analog_Card_PWM8__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Device_Status_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double HID_Temperature__C_; /// Min: 0 Max: 255.99609375 Units: deg C
    WORD HID_Temperature__C__raw;
    double HID_Bus_Voltage__V_; /// Min: 0 Max: 255.99609375 Units: V
    WORD HID_Bus_Voltage__V__raw;
    double VNET_Temperature__C_; /// Min: 0 Max: 255.99609375 Units: deg C
    WORD VNET_Temperature__C__raw;
    double VNET_Bus_Voltage__V_; /// Min: 0 Max: 255.99609375 Units: V
    WORD VNET_Bus_Voltage__V__raw;
} DB_neoVI_Device_Status_neoVI;


void DB_neoVI_Device_Status_neoVI_Init(DB_neoVI_Device_Status_neoVI * pMsg);
int DB_neoVI_Device_Status_neoVI_Transmit(DB_neoVI_Device_Status_neoVI * pMsg);
int DB_neoVI_Device_Status_neoVI_Transmit_raw(DB_neoVI_Device_Status_neoVI * pMsg);
int DB_neoVI_Device_Status_neoVI_UpdateBytesFromSignals(DB_neoVI_Device_Status_neoVI * pMsg);
int DB_neoVI_Device_Status_neoVI_UpdateBytesFromRawSignals(DB_neoVI_Device_Status_neoVI * pMsg);
#define DB_neoVI_Device_Status_neoVI_HID_Temperature__C__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_Index, 0, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_HID_Bus_Voltage__V__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_Index, 1, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_VNET_Temperature__C__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_Index, 2, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_VNET_Bus_Voltage__V__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_Index, 3, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Device_Status_neoVI_Index, 0)
#define DB_neoVI_Device_Status_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Device_Status_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Device_Status_2_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Disk_Space_Avail__WiVI__KB; /// Min: 0 Max: 4294967295 Units: KB
    DWORD Disk_Space_Avail__WiVI__KB_raw;
    double Power_Supply_Voltage; /// Min: 0 Max: 255.99609375 Units: V
    WORD Power_Supply_Voltage_raw;
    double Temperature__C_; /// Min: 0 Max: 255.99609375 Units: deg C
    WORD Temperature__C__raw;
} DB_neoVI_Device_Status_2_neoVI;


void DB_neoVI_Device_Status_2_neoVI_Init(DB_neoVI_Device_Status_2_neoVI * pMsg);
int DB_neoVI_Device_Status_2_neoVI_Transmit(DB_neoVI_Device_Status_2_neoVI * pMsg);
int DB_neoVI_Device_Status_2_neoVI_Transmit_raw(DB_neoVI_Device_Status_2_neoVI * pMsg);
int DB_neoVI_Device_Status_2_neoVI_UpdateBytesFromSignals(DB_neoVI_Device_Status_2_neoVI * pMsg);
int DB_neoVI_Device_Status_2_neoVI_UpdateBytesFromRawSignals(DB_neoVI_Device_Status_2_neoVI * pMsg);
#define DB_neoVI_Device_Status_2_neoVI_Disk_Space_Avail__WiVI__KB_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_2_neoVI_Index, 0, dPhysicalValue);
#define DB_neoVI_Device_Status_2_neoVI_Power_Supply_Voltage_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_2_neoVI_Index, 1, dPhysicalValue);
#define DB_neoVI_Device_Status_2_neoVI_Temperature__C__PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_2_neoVI_Index, 2, dPhysicalValue);
#define DB_neoVI_Device_Status_2_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Device_Status_2_neoVI_Index, 0)
#define DB_neoVI_Device_Status_2_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Device_Status_2_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Trace_Logger_Status_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double State; /// Min: 0 Max: 8 Units: 
    BYTE State_raw;
    double Debug_Level; /// Min: 0 Max: 3 Units: 
    BYTE Debug_Level_raw;
    double IP_MSB_; /// Min: 0 Max: 255 Units: 
    BYTE IP_MSB__raw;
    double IP; /// Min: 0 Max: 255 Units: 
    BYTE IP_raw;
    double IP_sig4; /// Min: 0 Max: 255 Units: 
    BYTE IP_sig4_raw;
    double IP_LSB_; /// Min: 0 Max: 255 Units: 
    BYTE IP_LSB__raw;
    double Port; /// Min: 0 Max: 65535 Units: 
    WORD Port_raw;
} DB_Trace_Logger_Status_neoVI;

#pragma warning(disable : 4005)
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Direct_Connect 1
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Connecting 2
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Reconnecting 3
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Connected 4
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Set_Debug_Level 5
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Closing 6
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Closed 7
#define DB_Trace_Logger_Status_neoVI_$_State_$$_Timestamp 8
#pragma warning(default : 4005)

void DB_Trace_Logger_Status_neoVI_Init(DB_Trace_Logger_Status_neoVI * pMsg);
int DB_Trace_Logger_Status_neoVI_Transmit(DB_Trace_Logger_Status_neoVI * pMsg);
int DB_Trace_Logger_Status_neoVI_Transmit_raw(DB_Trace_Logger_Status_neoVI * pMsg);
int DB_Trace_Logger_Status_neoVI_UpdateBytesFromSignals(DB_Trace_Logger_Status_neoVI * pMsg);
int DB_Trace_Logger_Status_neoVI_UpdateBytesFromRawSignals(DB_Trace_Logger_Status_neoVI * pMsg);
#define DB_Trace_Logger_Status_neoVI_State_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trace_Logger_Status_neoVI_Index, 0, dPhysicalValue);
#define DB_Trace_Logger_Status_neoVI_Debug_Level_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trace_Logger_Status_neoVI_Index, 1, dPhysicalValue);
#define DB_Trace_Logger_Status_neoVI_IP_MSB__PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trace_Logger_Status_neoVI_Index, 2, dPhysicalValue);
#define DB_Trace_Logger_Status_neoVI_IP_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trace_Logger_Status_neoVI_Index, 3, dPhysicalValue);
#define DB_Trace_Logger_Status_neoVI_IP_sig4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trace_Logger_Status_neoVI_Index, 4, dPhysicalValue);
#define DB_Trace_Logger_Status_neoVI_IP_LSB__PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trace_Logger_Status_neoVI_Index, 5, dPhysicalValue);
#define DB_Trace_Logger_Status_neoVI_Port_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trace_Logger_Status_neoVI_Index, 6, dPhysicalValue);
#define DB_Trace_Logger_Status_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Trace_Logger_Status_neoVI_Index, 0)
#define DB_Trace_Logger_Status_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Trace_Logger_Status_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Trigger_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Logger_triggered; /// Min: 0 Max: 2 Units: 
    BYTE Logger_triggered_raw;
    double Pre_trigger_size; /// Min: 0 Max: 4294967295 Units: 
    DWORD Pre_trigger_size_raw;
    double Collection_index; /// Min: 0 Max: 255 Units: 
    BYTE Collection_index_raw;
} DB_Trigger_neoVI;

#pragma warning(disable : 4005)
#define DB_Trigger_neoVI_$_Logger_triggered_$$_NO_TRG 0
#define DB_Trigger_neoVI_$_Logger_triggered_$$_TRG_msg_ 1
#define DB_Trigger_neoVI_$_Logger_triggered_$$_TRG_ms_ 2
#pragma warning(default : 4005)

void DB_Trigger_neoVI_Init(DB_Trigger_neoVI * pMsg);
int DB_Trigger_neoVI_Transmit(DB_Trigger_neoVI * pMsg);
int DB_Trigger_neoVI_Transmit_raw(DB_Trigger_neoVI * pMsg);
int DB_Trigger_neoVI_UpdateBytesFromSignals(DB_Trigger_neoVI * pMsg);
int DB_Trigger_neoVI_UpdateBytesFromRawSignals(DB_Trigger_neoVI * pMsg);
#define DB_Trigger_neoVI_Logger_triggered_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trigger_neoVI_Index, 0, dPhysicalValue);
#define DB_Trigger_neoVI_Pre_trigger_size_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trigger_neoVI_Index, 1, dPhysicalValue);
#define DB_Trigger_neoVI_Collection_index_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Trigger_neoVI_Index, 2, dPhysicalValue);
#define DB_Trigger_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Trigger_neoVI_Index, 0)
#define DB_Trigger_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Trigger_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Ethernet_Status_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Link_Status; /// Min: 0 Max: 1 Units: 
    BYTE Link_Status_raw;
    double Link_Speed; /// Min: 0 Max: 5 Units: 
    BYTE Link_Speed_raw;
    double Link_Duplex; /// Min: 0 Max: 1 Units: 
    BYTE Link_Duplex_raw;
} DB_Ethernet_Status_neoVI;

#pragma warning(disable : 4005)
#define DB_Ethernet_Status_neoVI_$_Link_Status_$$_Link_Down 0
#define DB_Ethernet_Status_neoVI_$_Link_Status_$$_Link_Up 1
#define DB_Ethernet_Status_neoVI_$_Link_Speed_$$_10Mbps 0
#define DB_Ethernet_Status_neoVI_$_Link_Speed_$$_100Mbps 1
#define DB_Ethernet_Status_neoVI_$_Link_Speed_$$_1000Mbps 2
#define DB_Ethernet_Status_neoVI_$_Link_Speed_$$_2_5Gbps 3
#define DB_Ethernet_Status_neoVI_$_Link_Speed_$$_5Gbps 4
#define DB_Ethernet_Status_neoVI_$_Link_Speed_$$_10Gbps 5
#define DB_Ethernet_Status_neoVI_$_Link_Duplex_$$_Half_Duplex 0
#define DB_Ethernet_Status_neoVI_$_Link_Duplex_$$_Full_Duplex 1
#pragma warning(default : 4005)

void DB_Ethernet_Status_neoVI_Init(DB_Ethernet_Status_neoVI * pMsg);
int DB_Ethernet_Status_neoVI_Transmit(DB_Ethernet_Status_neoVI * pMsg);
int DB_Ethernet_Status_neoVI_Transmit_raw(DB_Ethernet_Status_neoVI * pMsg);
int DB_Ethernet_Status_neoVI_UpdateBytesFromSignals(DB_Ethernet_Status_neoVI * pMsg);
int DB_Ethernet_Status_neoVI_UpdateBytesFromRawSignals(DB_Ethernet_Status_neoVI * pMsg);
#define DB_Ethernet_Status_neoVI_Link_Status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_Status_neoVI_Index, 0, dPhysicalValue);
#define DB_Ethernet_Status_neoVI_Link_Speed_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_Status_neoVI_Index, 1, dPhysicalValue);
#define DB_Ethernet_Status_neoVI_Link_Duplex_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Ethernet_Status_neoVI_Index, 2, dPhysicalValue);
#define DB_Ethernet_Status_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Ethernet_Status_neoVI_Index, 0)
#define DB_Ethernet_Status_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Ethernet_Status_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_OP__BR__Ethernet___Link_status_changed_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Network; /// Min: 0 Max: 11 Units: 
    BYTE Network_raw;
    double Link_Status; /// Min: 0 Max: 1 Units: 
    BYTE Link_Status_raw;
} DB_OP__BR__Ethernet___Link_status_changed_neoVI;

#pragma warning(disable : 4005)
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH1 0
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH2 1
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH3 2
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH4 3
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$________________OP_ETH5 4
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH6 5
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH7 6
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH8 7
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$________________OP_ETH9 8
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH10 9
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH11 10
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Network_$$_OP_ETH12 11
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Link_Status_$$_Down 0
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_$_Link_Status_$$_Up 1
#pragma warning(default : 4005)

void DB_OP__BR__Ethernet___Link_status_changed_neoVI_Init(DB_OP__BR__Ethernet___Link_status_changed_neoVI * pMsg);
int DB_OP__BR__Ethernet___Link_status_changed_neoVI_Transmit(DB_OP__BR__Ethernet___Link_status_changed_neoVI * pMsg);
int DB_OP__BR__Ethernet___Link_status_changed_neoVI_Transmit_raw(DB_OP__BR__Ethernet___Link_status_changed_neoVI * pMsg);
int DB_OP__BR__Ethernet___Link_status_changed_neoVI_UpdateBytesFromSignals(DB_OP__BR__Ethernet___Link_status_changed_neoVI * pMsg);
int DB_OP__BR__Ethernet___Link_status_changed_neoVI_UpdateBytesFromRawSignals(DB_OP__BR__Ethernet___Link_status_changed_neoVI * pMsg);
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_Network_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_OP__BR__Ethernet___Link_status_changed_neoVI_Index, 0, dPhysicalValue);
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_Link_Status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_OP__BR__Ethernet___Link_status_changed_neoVI_Index, 1, dPhysicalValue);
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_OP__BR__Ethernet___Link_status_changed_neoVI_Index, 0)
#define DB_OP__BR__Ethernet___Link_status_changed_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_OP__BR__Ethernet___Link_status_changed_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Period; /// Min: 0 Max: 4294967295 Units: us
    DWORD Period_raw;
    double Pulse_Width; /// Min: 0 Max: 4294967295 Units: us
    DWORD Pulse_Width_raw;
} DB_FIRE2_Report_Message_PWM_IN_1__neoVI;


void DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Init(DB_FIRE2_Report_Message_PWM_IN_1__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Transmit(DB_FIRE2_Report_Message_PWM_IN_1__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Transmit_raw(DB_FIRE2_Report_Message_PWM_IN_1__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_1__neoVI_UpdateBytesFromSignals(DB_FIRE2_Report_Message_PWM_IN_1__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_1__neoVI_UpdateBytesFromRawSignals(DB_FIRE2_Report_Message_PWM_IN_1__neoVI * pMsg);
#define DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Period_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Index, 0, dPhysicalValue);
#define DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Pulse_Width_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Index, 1, dPhysicalValue);
#define DB_FIRE2_Report_Message_PWM_IN_1__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Index, 0)
#define DB_FIRE2_Report_Message_PWM_IN_1__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_FIRE2_Report_Message_PWM_IN_1__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Period; /// Min: 0 Max: 4294967295 Units: us
    DWORD Period_raw;
    double Pulse_Width; /// Min: 0 Max: 4294967295 Units: us
    DWORD Pulse_Width_raw;
} DB_FIRE2_Report_Message_PWM_IN_2__neoVI;


void DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Init(DB_FIRE2_Report_Message_PWM_IN_2__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Transmit(DB_FIRE2_Report_Message_PWM_IN_2__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Transmit_raw(DB_FIRE2_Report_Message_PWM_IN_2__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_2__neoVI_UpdateBytesFromSignals(DB_FIRE2_Report_Message_PWM_IN_2__neoVI * pMsg);
int DB_FIRE2_Report_Message_PWM_IN_2__neoVI_UpdateBytesFromRawSignals(DB_FIRE2_Report_Message_PWM_IN_2__neoVI * pMsg);
#define DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Period_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Index, 0, dPhysicalValue);
#define DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Pulse_Width_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Index, 1, dPhysicalValue);
#define DB_FIRE2_Report_Message_PWM_IN_2__neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Index, 0)
#define DB_FIRE2_Report_Message_PWM_IN_2__neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_FIRE2_Report_Message_PWM_IN_2__neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_Hardware_Latency_Test_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Latency__us_; /// Min: 0 Max: 18446744073709551615 Units: us
    uint64 Latency__us__raw;
} DB_Hardware_Latency_Test_neoVI;


void DB_Hardware_Latency_Test_neoVI_Init(DB_Hardware_Latency_Test_neoVI * pMsg);
int DB_Hardware_Latency_Test_neoVI_Transmit(DB_Hardware_Latency_Test_neoVI * pMsg);
int DB_Hardware_Latency_Test_neoVI_Transmit_raw(DB_Hardware_Latency_Test_neoVI * pMsg);
int DB_Hardware_Latency_Test_neoVI_UpdateBytesFromSignals(DB_Hardware_Latency_Test_neoVI * pMsg);
int DB_Hardware_Latency_Test_neoVI_UpdateBytesFromRawSignals(DB_Hardware_Latency_Test_neoVI * pMsg);
#define DB_Hardware_Latency_Test_neoVI_Latency__us__PhysicalToRaw(dPhysicalValue) \
    (uint64 )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_Hardware_Latency_Test_neoVI_Index, 0, dPhysicalValue);
#define DB_Hardware_Latency_Test_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_Hardware_Latency_Test_neoVI_Index, 0)
#define DB_Hardware_Latency_Test_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_Hardware_Latency_Test_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_MIC_neoVI_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Button_Pressed; /// Min: 0 Max: 1 Units: 
    BYTE Button_Pressed_raw;
} DB_neoVI_MIC_neoVI;


void DB_neoVI_MIC_neoVI_Init(DB_neoVI_MIC_neoVI * pMsg);
int DB_neoVI_MIC_neoVI_Transmit(DB_neoVI_MIC_neoVI * pMsg);
int DB_neoVI_MIC_neoVI_Transmit_raw(DB_neoVI_MIC_neoVI * pMsg);
int DB_neoVI_MIC_neoVI_UpdateBytesFromSignals(DB_neoVI_MIC_neoVI * pMsg);
int DB_neoVI_MIC_neoVI_UpdateBytesFromRawSignals(DB_neoVI_MIC_neoVI * pMsg);
#define DB_neoVI_MIC_neoVI_Button_Pressed_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_MIC_neoVI_Index, 0, dPhysicalValue);
#define DB_neoVI_MIC_neoVI_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_MIC_neoVI_Index, 0)
#define DB_neoVI_MIC_neoVI_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_MIC_neoVI_Index, 1, name, outDoubleValuePtr)
extern int DB_neoVI_Device_Status_neoVI_db49_Index;
typedef struct {
    GenericLongMessage MessageData; /// Diagnostic Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Bus_Voltage__V_; /// Min: 0 Max: 0 Units: V
    DWORD Bus_Voltage__V__raw;
    double HID_Temperature__C_; /// Min: 0 Max: 0 Units: deg C
    DWORD HID_Temperature__C__raw;
    double MCHIP_Temperature__C_; /// Min: 0 Max: 0 Units: deg C
    DWORD MCHIP_Temperature__C__raw;
    double ZCHIP_Temperature__C_; /// Min: 0 Max: 0 Units: deg C
    DWORD ZCHIP_Temperature__C__raw;
} DB_neoVI_Device_Status_neoVI_db49;


void DB_neoVI_Device_Status_neoVI_db49_Init(DB_neoVI_Device_Status_neoVI_db49 * pMsg);
int DB_neoVI_Device_Status_neoVI_db49_Transmit(DB_neoVI_Device_Status_neoVI_db49 * pMsg);
int DB_neoVI_Device_Status_neoVI_db49_Transmit_raw(DB_neoVI_Device_Status_neoVI_db49 * pMsg);
int DB_neoVI_Device_Status_neoVI_db49_UpdateBytesFromSignals(DB_neoVI_Device_Status_neoVI_db49 * pMsg);
int DB_neoVI_Device_Status_neoVI_db49_UpdateBytesFromRawSignals(DB_neoVI_Device_Status_neoVI_db49 * pMsg);
#define DB_neoVI_Device_Status_neoVI_db49_Bus_Voltage__V__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_db49_Index, 0, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_db49_HID_Temperature__C__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_db49_Index, 1, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_db49_MCHIP_Temperature__C__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_db49_Index, 2, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_db49_ZCHIP_Temperature__C__PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_neoVI_Device_Status_neoVI_db49_Index, 3, dPhysicalValue);
#define DB_neoVI_Device_Status_neoVI_db49_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_neoVI_Device_Status_neoVI_db49_Index, 0)
#define DB_neoVI_Device_Status_neoVI_db49_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_neoVI_Device_Status_neoVI_db49_Index, 1, name, outDoubleValuePtr)
extern int DB_EPS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_EPS1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_EPS1_raw;
    double EPS_InterferDetd; /// Min: 0 Max: 1 Units: 
    BYTE EPS_InterferDetd_raw;
    double EPS_InterferDetdValid; /// Min: 0 Max: 1 Units: 
    BYTE EPS_InterferDetdValid_raw;
    double EPS_AvailSts; /// Min: 0 Max: 3 Units: 
    BYTE EPS_AvailSts_raw;
    double RollingCounter_EPS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_EPS1_raw;
    double EPS_ConsumedCurrValue; /// Min: 0 Max: 127 Units: A
    BYTE EPS_ConsumedCurrValue_raw;
    double EPS_PowerSplyVolt; /// Min: 6 Max: 18.7 Units: Volts
    BYTE EPS_PowerSplyVolt_raw;
    double EPS_TrqSnsrSts; /// Min: 0 Max: 1 Units: 
    BYTE EPS_TrqSnsrSts_raw;
    double EPS_DrvInputTrqValue; /// Min: -22.78 Max: 22.96 Units: Nm
    BYTE EPS_DrvInputTrqValue_raw;
    double EPS_FailSts; /// Min: 0 Max: 1 Units: 
    BYTE EPS_FailSts_raw;
    double EPS_SteerMod; /// Min: 0 Max: 7 Units: 
    BYTE EPS_SteerMod_raw;
} DB_EPS1_HS_CAN;

#define DB_EPS1_HS_CAN_SendType 0
#define DB_EPS1_HS_CAN_SendRate 20
#define DB_EPS1_HS_CAN_SendRateFast 0
#define DB_EPS1_HS_CAN_NumRepetitions 0
#define DB_EPS1_HS_CAN_$_CheckSum_EPS1_SendType 0
#pragma warning(disable : 4005)
#define DB_EPS1_HS_CAN_$_EPS_InterferDetd_$$__False_ 0
#define DB_EPS1_HS_CAN_$_EPS_InterferDetd_$$__True_ 1
#define DB_EPS1_HS_CAN_$_EPS_InterferDetd_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_InterferDetdValid_$$__Invalid_ 0
#define DB_EPS1_HS_CAN_$_EPS_InterferDetdValid_$$__Valid_ 1
#define DB_EPS1_HS_CAN_$_EPS_InterferDetdValid_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_AvailSts_$$__Temporary_inhibit_ 0
#define DB_EPS1_HS_CAN_$_EPS_AvailSts_$$__Available_for_control_ 1
#define DB_EPS1_HS_CAN_$_EPS_AvailSts_$$__Active_ 2
#define DB_EPS1_HS_CAN_$_EPS_AvailSts_$$__Permanently_failed_ 3
#define DB_EPS1_HS_CAN_$_EPS_AvailSts_SendType 0
#define DB_EPS1_HS_CAN_$_RollingCounter_EPS1_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_ConsumedCurrValue_$$__Valid_ 0
#define DB_EPS1_HS_CAN_$_EPS_ConsumedCurrValue_$$__Invalid_ 255
#define DB_EPS1_HS_CAN_$_EPS_ConsumedCurrValue_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_PowerSplyVolt_$$__valid_ 0
#define DB_EPS1_HS_CAN_$_EPS_PowerSplyVolt_$$__Invalid_ 255
#define DB_EPS1_HS_CAN_$_EPS_PowerSplyVolt_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_TrqSnsrSts_$$__Normal_ 0
#define DB_EPS1_HS_CAN_$_EPS_TrqSnsrSts_$$__Abnormal_ 1
#define DB_EPS1_HS_CAN_$_EPS_TrqSnsrSts_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_DrvInputTrqValue_$$__Valid_Clockwise_rotation_is_____and_anti_Clockwise_rotation_is______ 0
#define DB_EPS1_HS_CAN_$_EPS_DrvInputTrqValue_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_FailSts_$$__No_fault_ 0
#define DB_EPS1_HS_CAN_$_EPS_FailSts_$$__Fault_ 1
#define DB_EPS1_HS_CAN_$_EPS_FailSts_SendType 0
#define DB_EPS1_HS_CAN_$_EPS_SteerMod_$$__Comfort_Mode_ 0
#define DB_EPS1_HS_CAN_$_EPS_SteerMod_$$__sport_mode__ 1
#define DB_EPS1_HS_CAN_$_EPS_SteerMod_$$__Handiness_Mode_ 2
#define DB_EPS1_HS_CAN_$_EPS_SteerMod_$$__Reserved_ 3
#define DB_EPS1_HS_CAN_$_EPS_SteerMod_SendType 0
#pragma warning(default : 4005)

void DB_EPS1_HS_CAN_Init(DB_EPS1_HS_CAN * pMsg);
int DB_EPS1_HS_CAN_Transmit(DB_EPS1_HS_CAN * pMsg);
int DB_EPS1_HS_CAN_Transmit_raw(DB_EPS1_HS_CAN * pMsg);
int DB_EPS1_HS_CAN_UpdateBytesFromSignals(DB_EPS1_HS_CAN * pMsg);
int DB_EPS1_HS_CAN_UpdateBytesFromRawSignals(DB_EPS1_HS_CAN * pMsg);
#define DB_EPS1_HS_CAN_CheckSum_EPS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_InterferDetd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_InterferDetdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_AvailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_EPS1_HS_CAN_RollingCounter_EPS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_ConsumedCurrValue_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_PowerSplyVolt_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_TrqSnsrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_DrvInputTrqValue_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_FailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_EPS1_HS_CAN_EPS_SteerMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPS1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_EPS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_EPS1_HS_CAN_Index, 0)
#define DB_EPS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_EPS1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ABM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABM1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABM1_raw;
    double RollingCounter_ABM1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABM1_raw;
    double SecLeftSBR; /// Min: 0 Max: 1 Units: 
    BYTE SecLeftSBR_raw;
    double AirBagFailCmd; /// Min: 0 Max: 1 Units: 
    BYTE AirBagFailCmd_raw;
    double SecMiddleSBR; /// Min: 0 Max: 1 Units: 
    BYTE SecMiddleSBR_raw;
    double DriverSBR; /// Min: 0 Max: 1 Units: 
    BYTE DriverSBR_raw;
    double SecRightSBR; /// Min: 0 Max: 1 Units: 
    BYTE SecRightSBR_raw;
    double PassSBR; /// Min: 0 Max: 1 Units: 
    BYTE PassSBR_raw;
    double PassSBR_Visual; /// Min: 0 Max: 3 Units: 
    BYTE PassSBR_Visual_raw;
    double DrvSBR_Visual; /// Min: 0 Max: 3 Units: 
    BYTE DrvSBR_Visual_raw;
} DB_ABM1_HS_CAN;

#define DB_ABM1_HS_CAN_SendType 1
#define DB_ABM1_HS_CAN_SendRate 500
#define DB_ABM1_HS_CAN_SendRateFast 0
#define DB_ABM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ABM1_HS_CAN_$_CheckSum_ABM1_$$__Nmin_ 0
#define DB_ABM1_HS_CAN_$_CheckSum_ABM1_$$__Nmax_ 255
#define DB_ABM1_HS_CAN_$_CheckSum_ABM1_SendType 0
#define DB_ABM1_HS_CAN_$_RollingCounter_ABM1_$$__Nmin_ 0
#define DB_ABM1_HS_CAN_$_RollingCounter_ABM1_$$__Nmax_ 15
#define DB_ABM1_HS_CAN_$_RollingCounter_ABM1_SendType 0
#define DB_ABM1_HS_CAN_$_SecLeftSBR_$$__No_reminder_ 0
#define DB_ABM1_HS_CAN_$_SecLeftSBR_$$__Reminder_ 1
#define DB_ABM1_HS_CAN_$_SecLeftSBR_SendType 0
#define DB_ABM1_HS_CAN_$_AirBagFailCmd_$$__Lamp_off_ 0
#define DB_ABM1_HS_CAN_$_AirBagFailCmd_$$__Lamp_on_ 1
#define DB_ABM1_HS_CAN_$_AirBagFailCmd_SendType 0
#define DB_ABM1_HS_CAN_$_SecMiddleSBR_$$__No_reminder_ 0
#define DB_ABM1_HS_CAN_$_SecMiddleSBR_$$__Reminder_ 1
#define DB_ABM1_HS_CAN_$_SecMiddleSBR_SendType 0
#define DB_ABM1_HS_CAN_$_DriverSBR_$$__No_reminder_ 0
#define DB_ABM1_HS_CAN_$_DriverSBR_$$__Reminder_ 1
#define DB_ABM1_HS_CAN_$_DriverSBR_SendType 0
#define DB_ABM1_HS_CAN_$_SecRightSBR_$$__No_reminder_ 0
#define DB_ABM1_HS_CAN_$_SecRightSBR_$$__Reminder_ 1
#define DB_ABM1_HS_CAN_$_SecRightSBR_SendType 0
#define DB_ABM1_HS_CAN_$_PassSBR_$$__No_reminder_ 0
#define DB_ABM1_HS_CAN_$_PassSBR_$$__Reminder_ 1
#define DB_ABM1_HS_CAN_$_PassSBR_SendType 0
#define DB_ABM1_HS_CAN_$_PassSBR_Visual_$$__Lamp_off_ 0
#define DB_ABM1_HS_CAN_$_PassSBR_Visual_$$__Lamp_on_ 1
#define DB_ABM1_HS_CAN_$_PassSBR_Visual_$$__Reserved_ 2
#define DB_ABM1_HS_CAN_$_PassSBR_Visual_$$__Lamp__blink_ 3
#define DB_ABM1_HS_CAN_$_PassSBR_Visual_SendType 0
#define DB_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Lamp_off_ 0
#define DB_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Lamp_on_ 1
#define DB_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Reserved_ 2
#define DB_ABM1_HS_CAN_$_DrvSBR_Visual_$$__Lamp__blink_ 3
#define DB_ABM1_HS_CAN_$_DrvSBR_Visual_SendType 0
#pragma warning(default : 4005)

void DB_ABM1_HS_CAN_Init(DB_ABM1_HS_CAN * pMsg);
int DB_ABM1_HS_CAN_Transmit(DB_ABM1_HS_CAN * pMsg);
int DB_ABM1_HS_CAN_Transmit_raw(DB_ABM1_HS_CAN * pMsg);
int DB_ABM1_HS_CAN_UpdateBytesFromSignals(DB_ABM1_HS_CAN * pMsg);
int DB_ABM1_HS_CAN_UpdateBytesFromRawSignals(DB_ABM1_HS_CAN * pMsg);
#define DB_ABM1_HS_CAN_CheckSum_ABM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ABM1_HS_CAN_RollingCounter_ABM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ABM1_HS_CAN_SecLeftSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ABM1_HS_CAN_AirBagFailCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ABM1_HS_CAN_SecMiddleSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ABM1_HS_CAN_DriverSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ABM1_HS_CAN_SecRightSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ABM1_HS_CAN_PassSBR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ABM1_HS_CAN_PassSBR_Visual_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_ABM1_HS_CAN_DrvSBR_Visual_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_ABM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ABM1_HS_CAN_Index, 0)
#define DB_ABM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ABM1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ABM2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABM2; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABM2_raw;
    double LongitudeAcc; /// Min: -21.592 Max: 21.592 Units: m/s^2
    WORD LongitudeAcc_raw;
    double LateralAcce; /// Min: -21.592 Max: 21.592 Units: m/s^2
    WORD LateralAcce_raw;
    double VehDynYawRate; /// Min: -2.093 Max: 2.093 Units: rad/s
    WORD VehDynYawRate_raw;
    double LongitudeAccValid; /// Min: 0 Max: 1 Units: 
    BYTE LongitudeAccValid_raw;
    double LateralAcceValid; /// Min: 0 Max: 1 Units: 
    BYTE LateralAcceValid_raw;
    double VehDynYawRateValid; /// Min: 0 Max: 1 Units: 
    BYTE VehDynYawRateValid_raw;
    double RollingCounter_ABM2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABM2_raw;
} DB_ABM2_HS_CAN;

#define DB_ABM2_HS_CAN_SendType 0
#define DB_ABM2_HS_CAN_SendRate 20
#define DB_ABM2_HS_CAN_SendRateFast 0
#define DB_ABM2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ABM2_HS_CAN_$_CheckSum_ABM2_$$__Nmin_ 0
#define DB_ABM2_HS_CAN_$_CheckSum_ABM2_$$__Nmax_ 255
#define DB_ABM2_HS_CAN_$_CheckSum_ABM2_SendType 0
#define DB_ABM2_HS_CAN_$_LongitudeAcc_$$__Valid_Value_ 0
#define DB_ABM2_HS_CAN_$_LongitudeAcc_$$__Reserved_ 44067
#define DB_ABM2_HS_CAN_$_LongitudeAcc_SendType 0
#define DB_ABM2_HS_CAN_$_LateralAcce_$$__Valid_Value_ 0
#define DB_ABM2_HS_CAN_$_LateralAcce_$$__Reserved_ 44067
#define DB_ABM2_HS_CAN_$_LateralAcce_SendType 0
#define DB_ABM2_HS_CAN_$_VehDynYawRate_$$__Valid_Value_ 0
#define DB_ABM2_HS_CAN_$_VehDynYawRate_$$__Reserved_ 17442
#define DB_ABM2_HS_CAN_$_VehDynYawRate_SendType 0
#define DB_ABM2_HS_CAN_$_LongitudeAccValid_$$__Invalid_ 0
#define DB_ABM2_HS_CAN_$_LongitudeAccValid_$$__Valid_ 1
#define DB_ABM2_HS_CAN_$_LongitudeAccValid_SendType 0
#define DB_ABM2_HS_CAN_$_LateralAcceValid_$$__Invalid_ 0
#define DB_ABM2_HS_CAN_$_LateralAcceValid_$$__Valid_ 1
#define DB_ABM2_HS_CAN_$_LateralAcceValid_SendType 0
#define DB_ABM2_HS_CAN_$_VehDynYawRateValid_$$__Invalid_ 0
#define DB_ABM2_HS_CAN_$_VehDynYawRateValid_$$__Valid_ 1
#define DB_ABM2_HS_CAN_$_VehDynYawRateValid_SendType 0
#define DB_ABM2_HS_CAN_$_RollingCounter_ABM2_$$__Nmin_ 0
#define DB_ABM2_HS_CAN_$_RollingCounter_ABM2_$$__Nmax_ 15
#define DB_ABM2_HS_CAN_$_RollingCounter_ABM2_SendType 0
#pragma warning(default : 4005)

void DB_ABM2_HS_CAN_Init(DB_ABM2_HS_CAN * pMsg);
int DB_ABM2_HS_CAN_Transmit(DB_ABM2_HS_CAN * pMsg);
int DB_ABM2_HS_CAN_Transmit_raw(DB_ABM2_HS_CAN * pMsg);
int DB_ABM2_HS_CAN_UpdateBytesFromSignals(DB_ABM2_HS_CAN * pMsg);
int DB_ABM2_HS_CAN_UpdateBytesFromRawSignals(DB_ABM2_HS_CAN * pMsg);
#define DB_ABM2_HS_CAN_CheckSum_ABM2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ABM2_HS_CAN_LongitudeAcc_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ABM2_HS_CAN_LateralAcce_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ABM2_HS_CAN_VehDynYawRate_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ABM2_HS_CAN_LongitudeAccValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ABM2_HS_CAN_LateralAcceValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ABM2_HS_CAN_VehDynYawRateValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ABM2_HS_CAN_RollingCounter_ABM2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABM2_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ABM2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ABM2_HS_CAN_Index, 0)
#define DB_ABM2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ABM2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ABS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS1_raw;
    double FLWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE FLWheelDriveDirection_raw;
    double FLWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE FLWheelSpdValid_raw;
    double FLWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD FLWheelSpd_raw;
    double FRWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE FRWheelDriveDirection_raw;
    double FRWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE FRWheelSpdValid_raw;
    double FRWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD FRWheelSpd_raw;
    double RollingCounter_ABS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS1_raw;
} DB_ABS1_HS_CAN;

#define DB_ABS1_HS_CAN_SendType 0
#define DB_ABS1_HS_CAN_SendRate 20
#define DB_ABS1_HS_CAN_SendRateFast 0
#define DB_ABS1_HS_CAN_NumRepetitions 0
#define DB_ABS1_HS_CAN_$_CheckSum_ABS1_SendType 0
#pragma warning(disable : 4005)
#define DB_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Invalid_ 0
#define DB_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Forward_ 1
#define DB_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Backward_ 2
#define DB_ABS1_HS_CAN_$_FLWheelDriveDirection_$$__Stop_ 3
#define DB_ABS1_HS_CAN_$_FLWheelDriveDirection_SendType 0
#define DB_ABS1_HS_CAN_$_FLWheelSpdValid_$$__Invalid_ 0
#define DB_ABS1_HS_CAN_$_FLWheelSpdValid_$$__Valid_ 1
#define DB_ABS1_HS_CAN_$_FLWheelSpdValid_SendType 0
#define DB_ABS1_HS_CAN_$_FLWheelSpd_$$__Valid_ 0
#define DB_ABS1_HS_CAN_$_FLWheelSpd_$$__Reserved_ 5334
#define DB_ABS1_HS_CAN_$_FLWheelSpd_SendType 0
#define DB_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Invalid_ 0
#define DB_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Forward_ 1
#define DB_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Backward_ 2
#define DB_ABS1_HS_CAN_$_FRWheelDriveDirection_$$__Stop_ 3
#define DB_ABS1_HS_CAN_$_FRWheelDriveDirection_SendType 0
#define DB_ABS1_HS_CAN_$_FRWheelSpdValid_$$__Invalid_ 0
#define DB_ABS1_HS_CAN_$_FRWheelSpdValid_$$__Valid_ 1
#define DB_ABS1_HS_CAN_$_FRWheelSpdValid_SendType 0
#define DB_ABS1_HS_CAN_$_FRWheelSpd_$$__Valid_ 0
#define DB_ABS1_HS_CAN_$_FRWheelSpd_$$__Reserved_ 5334
#define DB_ABS1_HS_CAN_$_FRWheelSpd_SendType 0
#define DB_ABS1_HS_CAN_$_RollingCounter_ABS1_SendType 0
#pragma warning(default : 4005)

void DB_ABS1_HS_CAN_Init(DB_ABS1_HS_CAN * pMsg);
int DB_ABS1_HS_CAN_Transmit(DB_ABS1_HS_CAN * pMsg);
int DB_ABS1_HS_CAN_Transmit_raw(DB_ABS1_HS_CAN * pMsg);
int DB_ABS1_HS_CAN_UpdateBytesFromSignals(DB_ABS1_HS_CAN * pMsg);
int DB_ABS1_HS_CAN_UpdateBytesFromRawSignals(DB_ABS1_HS_CAN * pMsg);
#define DB_ABS1_HS_CAN_CheckSum_ABS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ABS1_HS_CAN_FLWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ABS1_HS_CAN_FLWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ABS1_HS_CAN_FLWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ABS1_HS_CAN_FRWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ABS1_HS_CAN_FRWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ABS1_HS_CAN_FRWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ABS1_HS_CAN_RollingCounter_ABS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ABS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ABS1_HS_CAN_Index, 0)
#define DB_ABS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ABS1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ABS2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS2; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS2_raw;
    double RLWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE RLWheelDriveDirection_raw;
    double RLWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE RLWheelSpdValid_raw;
    double RLWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD RLWheelSpd_raw;
    double RRWheelDriveDirection; /// Min: 0 Max: 3 Units: 
    BYTE RRWheelDriveDirection_raw;
    double RRWheelSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE RRWheelSpdValid_raw;
    double RRWheelSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD RRWheelSpd_raw;
    double RollingCounter_ABS2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS2_raw;
} DB_ABS2_HS_CAN;

#define DB_ABS2_HS_CAN_SendType 0
#define DB_ABS2_HS_CAN_SendRate 20
#define DB_ABS2_HS_CAN_SendRateFast 0
#define DB_ABS2_HS_CAN_NumRepetitions 0
#define DB_ABS2_HS_CAN_$_CheckSum_ABS2_SendType 0
#pragma warning(disable : 4005)
#define DB_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Invalid_ 0
#define DB_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Forward_ 1
#define DB_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Backward_ 2
#define DB_ABS2_HS_CAN_$_RLWheelDriveDirection_$$__Stop_ 3
#define DB_ABS2_HS_CAN_$_RLWheelDriveDirection_SendType 0
#define DB_ABS2_HS_CAN_$_RLWheelSpdValid_$$__Invalid_ 0
#define DB_ABS2_HS_CAN_$_RLWheelSpdValid_$$__Valid_ 1
#define DB_ABS2_HS_CAN_$_RLWheelSpdValid_SendType 0
#define DB_ABS2_HS_CAN_$_RLWheelSpd_$$__Valid_ 0
#define DB_ABS2_HS_CAN_$_RLWheelSpd_$$__Reserved_ 5334
#define DB_ABS2_HS_CAN_$_RLWheelSpd_SendType 0
#define DB_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Invalid_ 0
#define DB_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Forward_ 1
#define DB_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Backward_ 2
#define DB_ABS2_HS_CAN_$_RRWheelDriveDirection_$$__Stop_ 3
#define DB_ABS2_HS_CAN_$_RRWheelDriveDirection_SendType 0
#define DB_ABS2_HS_CAN_$_RRWheelSpdValid_$$__Invalid_ 0
#define DB_ABS2_HS_CAN_$_RRWheelSpdValid_$$__Valid_ 1
#define DB_ABS2_HS_CAN_$_RRWheelSpdValid_SendType 0
#define DB_ABS2_HS_CAN_$_RRWheelSpd_$$__Valid_ 0
#define DB_ABS2_HS_CAN_$_RRWheelSpd_$$__Reserved_ 5334
#define DB_ABS2_HS_CAN_$_RRWheelSpd_SendType 0
#define DB_ABS2_HS_CAN_$_RollingCounter_ABS2_SendType 0
#pragma warning(default : 4005)

void DB_ABS2_HS_CAN_Init(DB_ABS2_HS_CAN * pMsg);
int DB_ABS2_HS_CAN_Transmit(DB_ABS2_HS_CAN * pMsg);
int DB_ABS2_HS_CAN_Transmit_raw(DB_ABS2_HS_CAN * pMsg);
int DB_ABS2_HS_CAN_UpdateBytesFromSignals(DB_ABS2_HS_CAN * pMsg);
int DB_ABS2_HS_CAN_UpdateBytesFromRawSignals(DB_ABS2_HS_CAN * pMsg);
#define DB_ABS2_HS_CAN_CheckSum_ABS2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ABS2_HS_CAN_RLWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ABS2_HS_CAN_RLWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ABS2_HS_CAN_RLWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ABS2_HS_CAN_RRWheelDriveDirection_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ABS2_HS_CAN_RRWheelSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ABS2_HS_CAN_RRWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ABS2_HS_CAN_RollingCounter_ABS2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS2_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ABS2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ABS2_HS_CAN_Index, 0)
#define DB_ABS2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ABS2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ABS3_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS3; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS3_raw;
    double ABSFailSts; /// Min: 0 Max: 1 Units: 
    BYTE ABSFailSts_raw;
    double EBDFailSts; /// Min: 0 Max: 1 Units: 
    BYTE EBDFailSts_raw;
    double VehicleSpdValid; /// Min: 0 Max: 1 Units: 
    BYTE VehicleSpdValid_raw;
    double VehicleSpd; /// Min: 0 Max: 299.98125 Units: km/h
    WORD VehicleSpd_raw;
    double ABSCtrlActive; /// Min: 0 Max: 1 Units: 
    BYTE ABSCtrlActive_raw;
    double ABSActive; /// Min: 0 Max: 1 Units: 
    BYTE ABSActive_raw;
    double VehicleODOInfoSts; /// Min: 0 Max: 1 Units: 
    BYTE VehicleODOInfoSts_raw;
    double VehicleODOInfo; /// Min: 0 Max: 999 Units: m
    WORD VehicleODOInfo_raw;
    double RollingCounter_ABS3; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS3_raw;
} DB_ABS3_HS_CAN;

#define DB_ABS3_HS_CAN_SendType 0
#define DB_ABS3_HS_CAN_SendRate 20
#define DB_ABS3_HS_CAN_SendRateFast 0
#define DB_ABS3_HS_CAN_NumRepetitions 0
#define DB_ABS3_HS_CAN_$_CheckSum_ABS3_SendType 0
#pragma warning(disable : 4005)
#define DB_ABS3_HS_CAN_$_ABSFailSts_$$__No_failure_ 0
#define DB_ABS3_HS_CAN_$_ABSFailSts_$$__Failure_ 1
#define DB_ABS3_HS_CAN_$_ABSFailSts_SendType 0
#define DB_ABS3_HS_CAN_$_EBDFailSts_$$__No_failure_ 0
#define DB_ABS3_HS_CAN_$_EBDFailSts_$$__Failure_ 1
#define DB_ABS3_HS_CAN_$_EBDFailSts_SendType 0
#define DB_ABS3_HS_CAN_$_VehicleSpdValid_$$__Invalid_ 0
#define DB_ABS3_HS_CAN_$_VehicleSpdValid_$$__Valid_ 1
#define DB_ABS3_HS_CAN_$_VehicleSpdValid_SendType 0
#define DB_ABS3_HS_CAN_$_VehicleSpd_$$__Valid_ 0
#define DB_ABS3_HS_CAN_$_VehicleSpd_$$__Reserved_ 5334
#define DB_ABS3_HS_CAN_$_VehicleSpd_SendType 0
#define DB_ABS3_HS_CAN_$_ABSCtrlActive_$$__Not_active_ 0
#define DB_ABS3_HS_CAN_$_ABSCtrlActive_$$__Active_ 1
#define DB_ABS3_HS_CAN_$_ABSCtrlActive_SendType 0
#define DB_ABS3_HS_CAN_$_ABSActive_$$__Not_active_ 0
#define DB_ABS3_HS_CAN_$_ABSActive_$$__Active_ 1
#define DB_ABS3_HS_CAN_$_ABSActive_SendType 0
#define DB_ABS3_HS_CAN_$_VehicleODOInfoSts_$$__Valid_ 0
#define DB_ABS3_HS_CAN_$_VehicleODOInfoSts_$$__Invalid_ 1
#define DB_ABS3_HS_CAN_$_VehicleODOInfoSts_SendType 0
#define DB_ABS3_HS_CAN_$_VehicleODOInfo_$$__Valid_ 0
#define DB_ABS3_HS_CAN_$_VehicleODOInfo_$$__Reserved_ 1000
#define DB_ABS3_HS_CAN_$_VehicleODOInfo_SendType 0
#define DB_ABS3_HS_CAN_$_RollingCounter_ABS3_SendType 0
#pragma warning(default : 4005)

void DB_ABS3_HS_CAN_Init(DB_ABS3_HS_CAN * pMsg);
int DB_ABS3_HS_CAN_Transmit(DB_ABS3_HS_CAN * pMsg);
int DB_ABS3_HS_CAN_Transmit_raw(DB_ABS3_HS_CAN * pMsg);
int DB_ABS3_HS_CAN_UpdateBytesFromSignals(DB_ABS3_HS_CAN * pMsg);
int DB_ABS3_HS_CAN_UpdateBytesFromRawSignals(DB_ABS3_HS_CAN * pMsg);
#define DB_ABS3_HS_CAN_CheckSum_ABS3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ABS3_HS_CAN_ABSFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ABS3_HS_CAN_EBDFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ABS3_HS_CAN_VehicleSpdValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ABS3_HS_CAN_VehicleSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ABS3_HS_CAN_ABSCtrlActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ABS3_HS_CAN_ABSActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ABS3_HS_CAN_VehicleODOInfoSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ABS3_HS_CAN_VehicleODOInfo_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 8, dPhysicalValue);
#define DB_ABS3_HS_CAN_RollingCounter_ABS3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS3_HS_CAN_Index, 9, dPhysicalValue);
#define DB_ABS3_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ABS3_HS_CAN_Index, 0)
#define DB_ABS3_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ABS3_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ABS4_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ABS4; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ABS4_raw;
    double WssFLEdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssFLEdgesSum_raw;
    double WssFREdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssFREdgesSum_raw;
    double WssRREdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssRREdgesSum_raw;
    double WssRLEdgesSum; /// Min: 0 Max: 255 Units: 
    BYTE WssRLEdgesSum_raw;
    double WssFLEdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssFLEdgesSumvalid_raw;
    double WssFREdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssFREdgesSumvalid_raw;
    double WssRLEdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssRLEdgesSumvalid_raw;
    double WssRREdgesSumvalid; /// Min: 0 Max: 1 Units: 
    BYTE WssRREdgesSumvalid_raw;
    double RollingCounter_ABS4; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ABS4_raw;
} DB_ABS4_HS_CAN;

#define DB_ABS4_HS_CAN_SendType 0
#define DB_ABS4_HS_CAN_SendRate 10
#define DB_ABS4_HS_CAN_SendRateFast 0
#define DB_ABS4_HS_CAN_NumRepetitions 0
#define DB_ABS4_HS_CAN_$_CheckSum_ABS4_SendType 0
#define DB_ABS4_HS_CAN_$_WssFLEdgesSum_SendType 0
#define DB_ABS4_HS_CAN_$_WssFREdgesSum_SendType 0
#define DB_ABS4_HS_CAN_$_WssRREdgesSum_SendType 0
#define DB_ABS4_HS_CAN_$_WssRLEdgesSum_SendType 0
#pragma warning(disable : 4005)
#define DB_ABS4_HS_CAN_$_WssFLEdgesSumvalid_$$__Valid_ 0
#define DB_ABS4_HS_CAN_$_WssFLEdgesSumvalid_$$__Invalid_ 1
#define DB_ABS4_HS_CAN_$_WssFLEdgesSumvalid_SendType 0
#define DB_ABS4_HS_CAN_$_WssFREdgesSumvalid_$$__Valid_ 0
#define DB_ABS4_HS_CAN_$_WssFREdgesSumvalid_$$__Invalid_ 1
#define DB_ABS4_HS_CAN_$_WssFREdgesSumvalid_SendType 0
#define DB_ABS4_HS_CAN_$_WssRLEdgesSumvalid_$$__Valid_ 0
#define DB_ABS4_HS_CAN_$_WssRLEdgesSumvalid_$$__Invalid_ 1
#define DB_ABS4_HS_CAN_$_WssRLEdgesSumvalid_SendType 0
#define DB_ABS4_HS_CAN_$_WssRREdgesSumvalid_$$__Valid_ 0
#define DB_ABS4_HS_CAN_$_WssRREdgesSumvalid_$$__Invalid_ 1
#define DB_ABS4_HS_CAN_$_WssRREdgesSumvalid_SendType 0
#define DB_ABS4_HS_CAN_$_RollingCounter_ABS4_SendType 0
#pragma warning(default : 4005)

void DB_ABS4_HS_CAN_Init(DB_ABS4_HS_CAN * pMsg);
int DB_ABS4_HS_CAN_Transmit(DB_ABS4_HS_CAN * pMsg);
int DB_ABS4_HS_CAN_Transmit_raw(DB_ABS4_HS_CAN * pMsg);
int DB_ABS4_HS_CAN_UpdateBytesFromSignals(DB_ABS4_HS_CAN * pMsg);
int DB_ABS4_HS_CAN_UpdateBytesFromRawSignals(DB_ABS4_HS_CAN * pMsg);
#define DB_ABS4_HS_CAN_CheckSum_ABS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssFLEdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssFREdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssRREdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssRLEdgesSum_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssFLEdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssFREdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssRLEdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ABS4_HS_CAN_WssRREdgesSumvalid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 8, dPhysicalValue);
#define DB_ABS4_HS_CAN_RollingCounter_ABS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ABS4_HS_CAN_Index, 9, dPhysicalValue);
#define DB_ABS4_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ABS4_HS_CAN_Index, 0)
#define DB_ABS4_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ABS4_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_AC2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ACAmbtTemp; /// Min: -40 Max: 86.5 Units: �C
    BYTE ACAmbtTemp_raw;
} DB_AC2_HS_CAN;

#define DB_AC2_HS_CAN_SendType 0
#define DB_AC2_HS_CAN_SendRate 100
#define DB_AC2_HS_CAN_SendRateFast 0
#define DB_AC2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_AC2_HS_CAN_$_ACAmbtTemp_$$__Valid_value_ 0
#define DB_AC2_HS_CAN_$_ACAmbtTemp_$$__Init_ 254
#define DB_AC2_HS_CAN_$_ACAmbtTemp_$$__Failure_ 255
#define DB_AC2_HS_CAN_$_ACAmbtTemp_SendType 0
#pragma warning(default : 4005)

void DB_AC2_HS_CAN_Init(DB_AC2_HS_CAN * pMsg);
int DB_AC2_HS_CAN_Transmit(DB_AC2_HS_CAN * pMsg);
int DB_AC2_HS_CAN_Transmit_raw(DB_AC2_HS_CAN * pMsg);
int DB_AC2_HS_CAN_UpdateBytesFromSignals(DB_AC2_HS_CAN * pMsg);
int DB_AC2_HS_CAN_UpdateBytesFromRawSignals(DB_AC2_HS_CAN * pMsg);
#define DB_AC2_HS_CAN_ACAmbtTemp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AC2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_AC2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_AC2_HS_CAN_Index, 0)
#define DB_AC2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_AC2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_BCM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double PosLmpOutputSts; /// Min: 0 Max: 1 Units: 
    BYTE PosLmpOutputSts_raw;
    double IPBackgroundLightCmd; /// Min: 0 Max: 1 Units: 
    BYTE IPBackgroundLightCmd_raw;
    double FrontFogLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE FrontFogLmpSts_raw;
    double RearFogLmpSts; /// Min: 0 Max: 1 Units: 
    BYTE RearFogLmpSts_raw;
    double HighBeamSts; /// Min: 0 Max: 1 Units: 
    BYTE HighBeamSts_raw;
    double LowBeamSts; /// Min: 0 Max: 1 Units: 
    BYTE LowBeamSts_raw;
    double LeftTurnLampSts; /// Min: 0 Max: 1 Units: 
    BYTE LeftTurnLampSts_raw;
    double RightTurnLampSts; /// Min: 0 Max: 1 Units: 
    BYTE RightTurnLampSts_raw;
    double BrakeLmpFailSts; /// Min: 0 Max: 1 Units: 
    BYTE BrakeLmpFailSts_raw;
    double TrunkSts; /// Min: 0 Max: 1 Units: 
    BYTE TrunkSts_raw;
    double DriverDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE DriverDoorSts_raw;
    double RLDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE RLDoorSts_raw;
    double PassengerDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE PassengerDoorSts_raw;
    double RRDoorSts; /// Min: 0 Max: 1 Units: 
    BYTE RRDoorSts_raw;
    double WindShieldWiperActSts; /// Min: 0 Max: 1 Units: 
    BYTE WindShieldWiperActSts_raw;
    double BrakePedSts; /// Min: 0 Max: 1 Units: 
    BYTE BrakePedSts_raw;
    double BrakePedFailSts; /// Min: 0 Max: 1 Units: 
    BYTE BrakePedFailSts_raw;
    double BackgroundLightLvl; /// Min: 0 Max: 255 Units: 
    BYTE BackgroundLightLvl_raw;
    double RearFogLmpFailSts; /// Min: 0 Max: 1 Units: 
    BYTE RearFogLmpFailSts_raw;
    double DDDWarning; /// Min: 0 Max: 3 Units: 
    BYTE DDDWarning_raw;
    double HoodSts; /// Min: 0 Max: 1 Units: 
    BYTE HoodSts_raw;
    double LeftTurnSWSts; /// Min: 0 Max: 1 Units: 
    BYTE LeftTurnSWSts_raw;
    double RightTurnSWSts; /// Min: 0 Max: 1 Units: 
    BYTE RightTurnSWSts_raw;
    double RLSFailSts; /// Min: 0 Max: 1 Units: 
    BYTE RLSFailSts_raw;
    double PosnLightReq; /// Min: 0 Max: 1 Units: 
    BYTE PosnLightReq_raw;
    double ParkLampSts; /// Min: 0 Max: 1 Units: 
    BYTE ParkLampSts_raw;
} DB_BCM1_HS_CAN;

#define DB_BCM1_HS_CAN_SendType 0
#define DB_BCM1_HS_CAN_SendRate 50
#define DB_BCM1_HS_CAN_SendRateFast 0
#define DB_BCM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_BCM1_HS_CAN_$_PosLmpOutputSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_PosLmpOutputSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_PosLmpOutputSts_SendType 0
#define DB_BCM1_HS_CAN_$_IPBackgroundLightCmd_$$__Backlight_OFF_ 0
#define DB_BCM1_HS_CAN_$_IPBackgroundLightCmd_$$__Backlight_ON_ 1
#define DB_BCM1_HS_CAN_$_IPBackgroundLightCmd_SendType 0
#define DB_BCM1_HS_CAN_$_FrontFogLmpSts_$$__Off__ 0
#define DB_BCM1_HS_CAN_$_FrontFogLmpSts_$$__On__ 1
#define DB_BCM1_HS_CAN_$_FrontFogLmpSts_$$__Reserved_ 2
#define DB_BCM1_HS_CAN_$_FrontFogLmpSts_$$__Not_available_ 3
#define DB_BCM1_HS_CAN_$_FrontFogLmpSts_SendType 0
#define DB_BCM1_HS_CAN_$_RearFogLmpSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_RearFogLmpSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_RearFogLmpSts_SendType 0
#define DB_BCM1_HS_CAN_$_HighBeamSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_HighBeamSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_HighBeamSts_SendType 0
#define DB_BCM1_HS_CAN_$_LowBeamSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_LowBeamSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_LowBeamSts_SendType 0
#define DB_BCM1_HS_CAN_$_LeftTurnLampSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_LeftTurnLampSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_LeftTurnLampSts_SendType 0
#define DB_BCM1_HS_CAN_$_RightTurnLampSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_RightTurnLampSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_RightTurnLampSts_SendType 0
#define DB_BCM1_HS_CAN_$_BrakeLmpFailSts_$$__No_failure_ 0
#define DB_BCM1_HS_CAN_$_BrakeLmpFailSts_$$__Failure_ 1
#define DB_BCM1_HS_CAN_$_BrakeLmpFailSts_SendType 0
#define DB_BCM1_HS_CAN_$_TrunkSts_$$__Closed_ 0
#define DB_BCM1_HS_CAN_$_TrunkSts_$$__Open_ 1
#define DB_BCM1_HS_CAN_$_TrunkSts_SendType 0
#define DB_BCM1_HS_CAN_$_DriverDoorSts_$$__Closed_ 0
#define DB_BCM1_HS_CAN_$_DriverDoorSts_$$__Open_ 1
#define DB_BCM1_HS_CAN_$_DriverDoorSts_SendType 0
#define DB_BCM1_HS_CAN_$_RLDoorSts_$$__Closed_ 0
#define DB_BCM1_HS_CAN_$_RLDoorSts_$$__Open_ 1
#define DB_BCM1_HS_CAN_$_RLDoorSts_SendType 0
#define DB_BCM1_HS_CAN_$_PassengerDoorSts_$$__Closed_ 0
#define DB_BCM1_HS_CAN_$_PassengerDoorSts_$$__Open_ 1
#define DB_BCM1_HS_CAN_$_PassengerDoorSts_SendType 0
#define DB_BCM1_HS_CAN_$_RRDoorSts_$$__Closed_ 0
#define DB_BCM1_HS_CAN_$_RRDoorSts_$$__Open_ 1
#define DB_BCM1_HS_CAN_$_RRDoorSts_SendType 0
#define DB_BCM1_HS_CAN_$_WindShieldWiperActSts_$$__No_active_ 0
#define DB_BCM1_HS_CAN_$_WindShieldWiperActSts_$$__Active_ 1
#define DB_BCM1_HS_CAN_$_WindShieldWiperActSts_SendType 0
#define DB_BCM1_HS_CAN_$_BrakePedSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_BrakePedSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_BrakePedSts_SendType 0
#define DB_BCM1_HS_CAN_$_BrakePedFailSts_$$__No_failure_ 0
#define DB_BCM1_HS_CAN_$_BrakePedFailSts_$$__Failure_ 1
#define DB_BCM1_HS_CAN_$_BrakePedFailSts_SendType 0
#define DB_BCM1_HS_CAN_$_BackgroundLightLvl_$$__Valid_Value_ 0
#define DB_BCM1_HS_CAN_$_BackgroundLightLvl_SendType 0
#define DB_BCM1_HS_CAN_$_RearFogLmpFailSts_$$__No_failure_ 0
#define DB_BCM1_HS_CAN_$_RearFogLmpFailSts_$$__Failure_ 1
#define DB_BCM1_HS_CAN_$_RearFogLmpFailSts_SendType 0
#define DB_BCM1_HS_CAN_$_DDDWarning_$$__No_warning_ 0
#define DB_BCM1_HS_CAN_$_DDDWarning_$$__Warning_1_ 1
#define DB_BCM1_HS_CAN_$_DDDWarning_$$__Warning_2_ 2
#define DB_BCM1_HS_CAN_$_DDDWarning_$$__Not_available_ 3
#define DB_BCM1_HS_CAN_$_DDDWarning_SendType 0
#define DB_BCM1_HS_CAN_$_HoodSts_$$__Closed_ 0
#define DB_BCM1_HS_CAN_$_HoodSts_$$__Open_ 1
#define DB_BCM1_HS_CAN_$_HoodSts_SendType 0
#define DB_BCM1_HS_CAN_$_LeftTurnSWSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_LeftTurnSWSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_LeftTurnSWSts_SendType 0
#define DB_BCM1_HS_CAN_$_RightTurnSWSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_RightTurnSWSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_RightTurnSWSts_SendType 0
#define DB_BCM1_HS_CAN_$_RLSFailSts_$$__No_failure_ 0
#define DB_BCM1_HS_CAN_$_RLSFailSts_$$__Failure_ 1
#define DB_BCM1_HS_CAN_$_RLSFailSts_SendType 0
#define DB_BCM1_HS_CAN_$_PosnLightReq_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_PosnLightReq_$$__On_ 1
#define DB_BCM1_HS_CAN_$_PosnLightReq_SendType 0
#define DB_BCM1_HS_CAN_$_ParkLampSts_$$__Off_ 0
#define DB_BCM1_HS_CAN_$_ParkLampSts_$$__On_ 1
#define DB_BCM1_HS_CAN_$_ParkLampSts_SendType 0
#pragma warning(default : 4005)

void DB_BCM1_HS_CAN_Init(DB_BCM1_HS_CAN * pMsg);
int DB_BCM1_HS_CAN_Transmit(DB_BCM1_HS_CAN * pMsg);
int DB_BCM1_HS_CAN_Transmit_raw(DB_BCM1_HS_CAN * pMsg);
int DB_BCM1_HS_CAN_UpdateBytesFromSignals(DB_BCM1_HS_CAN * pMsg);
int DB_BCM1_HS_CAN_UpdateBytesFromRawSignals(DB_BCM1_HS_CAN * pMsg);
#define DB_BCM1_HS_CAN_PosLmpOutputSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_BCM1_HS_CAN_IPBackgroundLightCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_BCM1_HS_CAN_FrontFogLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_BCM1_HS_CAN_RearFogLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_BCM1_HS_CAN_HighBeamSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_BCM1_HS_CAN_LowBeamSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_BCM1_HS_CAN_LeftTurnLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_BCM1_HS_CAN_RightTurnLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_BCM1_HS_CAN_BrakeLmpFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_BCM1_HS_CAN_TrunkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_BCM1_HS_CAN_DriverDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_BCM1_HS_CAN_RLDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 11, dPhysicalValue);
#define DB_BCM1_HS_CAN_PassengerDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 12, dPhysicalValue);
#define DB_BCM1_HS_CAN_RRDoorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 13, dPhysicalValue);
#define DB_BCM1_HS_CAN_WindShieldWiperActSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 14, dPhysicalValue);
#define DB_BCM1_HS_CAN_BrakePedSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 15, dPhysicalValue);
#define DB_BCM1_HS_CAN_BrakePedFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 16, dPhysicalValue);
#define DB_BCM1_HS_CAN_BackgroundLightLvl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 17, dPhysicalValue);
#define DB_BCM1_HS_CAN_RearFogLmpFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 18, dPhysicalValue);
#define DB_BCM1_HS_CAN_DDDWarning_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 19, dPhysicalValue);
#define DB_BCM1_HS_CAN_HoodSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 20, dPhysicalValue);
#define DB_BCM1_HS_CAN_LeftTurnSWSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 21, dPhysicalValue);
#define DB_BCM1_HS_CAN_RightTurnSWSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 22, dPhysicalValue);
#define DB_BCM1_HS_CAN_RLSFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 23, dPhysicalValue);
#define DB_BCM1_HS_CAN_PosnLightReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 24, dPhysicalValue);
#define DB_BCM1_HS_CAN_ParkLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM1_HS_CAN_Index, 25, dPhysicalValue);
#define DB_BCM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_BCM1_HS_CAN_Index, 0)
#define DB_BCM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_BCM1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_BCM8_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RemoteModeSts; /// Min: 0 Max: 1 Units: 
    BYTE RemoteModeSts_raw;
    double PASWorkCmd; /// Min: 0 Max: 1 Units: 
    BYTE PASWorkCmd_raw;
    double WiperSwitchSts; /// Min: 0 Max: 7 Units: 
    BYTE WiperSwitchSts_raw;
    double WiprReq; /// Min: 0 Max: 7 Units: 
    BYTE WiprReq_raw;
    double ECO_4L_Warn; /// Min: 0 Max: 7 Units: 
    BYTE ECO_4L_Warn_raw;
    double RSDS_Left_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Left_LED_status_raw;
    double RSDS_Right_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Right_LED_status_raw;
    double Fold_UnfoldSts; /// Min: 0 Max: 1 Units: 
    BYTE Fold_UnfoldSts_raw;
} DB_BCM8_HS_CAN;

#define DB_BCM8_HS_CAN_SendType 0
#define DB_BCM8_HS_CAN_SendRate 100
#define DB_BCM8_HS_CAN_SendRateFast 0
#define DB_BCM8_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_BCM8_HS_CAN_$_RemoteModeSts_$$__Normal_mode_ 0
#define DB_BCM8_HS_CAN_$_RemoteModeSts_$$__Remote_mode_ 1
#define DB_BCM8_HS_CAN_$_RemoteModeSts_SendType 0
#define DB_BCM8_HS_CAN_$_PASWorkCmd_$$__OFF_ 0
#define DB_BCM8_HS_CAN_$_PASWorkCmd_$$__ON_ 1
#define DB_BCM8_HS_CAN_$_PASWorkCmd_SendType 0
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wiper_Off_ 0
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wiper_Auto_ 1
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_$$__Low_Speed_ 2
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_$$__High_Speed_ 3
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wiper_Wash_ 4
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_$$__Wash_in_Auto_Mode_ 5
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_$$__reserved_ 7
#define DB_BCM8_HS_CAN_$_WiperSwitchSts_SendType 0
#define DB_BCM8_HS_CAN_$_WiprReq_$$__Wiper_Off_ 0
#define DB_BCM8_HS_CAN_$_WiprReq_$$__Wiper_action_once_ 1
#define DB_BCM8_HS_CAN_$_WiprReq_$$__Speed1__Lo__ 2
#define DB_BCM8_HS_CAN_$_WiprReq_$$__Speed2__Hi__ 3
#define DB_BCM8_HS_CAN_$_WiprReq_$$__Reserved_ 4
#define DB_BCM8_HS_CAN_$_WiprReq_$$__Invalid_ 7
#define DB_BCM8_HS_CAN_$_WiprReq_SendType 0
#define DB_BCM8_HS_CAN_$_ECO_4L_Warn_$$__No_Warn_ 0
#define DB_BCM8_HS_CAN_$_ECO_4L_Warn_$$__Warn_ 1
#define DB_BCM8_HS_CAN_$_ECO_4L_Warn_$$__Reserved_ 2
#define DB_BCM8_HS_CAN_$_ECO_4L_Warn_SendType 0
#define DB_BCM8_HS_CAN_$_RSDS_Left_LED_status_$$__No_Error_ 0
#define DB_BCM8_HS_CAN_$_RSDS_Left_LED_status_$$__Error_ 1
#define DB_BCM8_HS_CAN_$_RSDS_Left_LED_status_SendType 0
#define DB_BCM8_HS_CAN_$_RSDS_Right_LED_status_$$__No_Error_ 0
#define DB_BCM8_HS_CAN_$_RSDS_Right_LED_status_$$__Error_ 1
#define DB_BCM8_HS_CAN_$_RSDS_Right_LED_status_SendType 0
#define DB_BCM8_HS_CAN_$_Fold_UnfoldSts_$$__Unfold_ 0
#define DB_BCM8_HS_CAN_$_Fold_UnfoldSts_$$__Fold_ 1
#define DB_BCM8_HS_CAN_$_Fold_UnfoldSts_SendType 0
#pragma warning(default : 4005)

void DB_BCM8_HS_CAN_Init(DB_BCM8_HS_CAN * pMsg);
int DB_BCM8_HS_CAN_Transmit(DB_BCM8_HS_CAN * pMsg);
int DB_BCM8_HS_CAN_Transmit_raw(DB_BCM8_HS_CAN * pMsg);
int DB_BCM8_HS_CAN_UpdateBytesFromSignals(DB_BCM8_HS_CAN * pMsg);
int DB_BCM8_HS_CAN_UpdateBytesFromRawSignals(DB_BCM8_HS_CAN * pMsg);
#define DB_BCM8_HS_CAN_RemoteModeSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 0, dPhysicalValue);
#define DB_BCM8_HS_CAN_PASWorkCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 1, dPhysicalValue);
#define DB_BCM8_HS_CAN_WiperSwitchSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 2, dPhysicalValue);
#define DB_BCM8_HS_CAN_WiprReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 3, dPhysicalValue);
#define DB_BCM8_HS_CAN_ECO_4L_Warn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 4, dPhysicalValue);
#define DB_BCM8_HS_CAN_RSDS_Left_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 5, dPhysicalValue);
#define DB_BCM8_HS_CAN_RSDS_Right_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 6, dPhysicalValue);
#define DB_BCM8_HS_CAN_Fold_UnfoldSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_BCM8_HS_CAN_Index, 7, dPhysicalValue);
#define DB_BCM8_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_BCM8_HS_CAN_Index, 0)
#define DB_BCM8_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_BCM8_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_DCT5_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_DCT5; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_DCT5_raw;
    double CurrentGearValid; /// Min: 0 Max: 1 Units: 
    BYTE CurrentGearValid_raw;
    double SHIFT_IN_PROGRESS; /// Min: 0 Max: 1 Units: 
    BYTE SHIFT_IN_PROGRESS_raw;
    double TargetGearValid; /// Min: 0 Max: 1 Units: 
    BYTE TargetGearValid_raw;
    double ShiftInPrgValid; /// Min: 0 Max: 1 Units: 
    BYTE ShiftInPrgValid_raw;
    double TARGET_GEAR; /// Min: 0 Max: 15 Units: 
    BYTE TARGET_GEAR_raw;
    double CURRENT_GEAR; /// Min: 0 Max: 15 Units: 
    BYTE CURRENT_GEAR_raw;
    double TGS_LEVER; /// Min: 0 Max: 15 Units: 
    BYTE TGS_LEVER_raw;
    double TCU_APS_Available; /// Min: 0 Max: 1 Units: 
    BYTE TCU_APS_Available_raw;
    double RollingCounter_DCT5; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_DCT5_raw;
} DB_DCT5_HS_CAN;

#define DB_DCT5_HS_CAN_SendType 0
#define DB_DCT5_HS_CAN_SendRate 20
#define DB_DCT5_HS_CAN_SendRateFast 0
#define DB_DCT5_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_DCT5_HS_CAN_$_CheckSum_DCT5_$$__Valid_values_ 0
#define DB_DCT5_HS_CAN_$_CheckSum_DCT5_SendType 0
#define DB_DCT5_HS_CAN_$_CurrentGearValid_$$__Invalid__ 0
#define DB_DCT5_HS_CAN_$_CurrentGearValid_$$__Valid_ 1
#define DB_DCT5_HS_CAN_$_CurrentGearValid_SendType 0
#define DB_DCT5_HS_CAN_$_SHIFT_IN_PROGRESS_$$__Gear_Shift_NOT_in_progress__ 0
#define DB_DCT5_HS_CAN_$_SHIFT_IN_PROGRESS_$$__Gear_Shif_is_in_progress_ 1
#define DB_DCT5_HS_CAN_$_SHIFT_IN_PROGRESS_SendType 0
#define DB_DCT5_HS_CAN_$_TargetGearValid_$$__Invalid__ 0
#define DB_DCT5_HS_CAN_$_TargetGearValid_$$__Valid_ 1
#define DB_DCT5_HS_CAN_$_TargetGearValid_SendType 0
#define DB_DCT5_HS_CAN_$_ShiftInPrgValid_$$__Invalid__ 0
#define DB_DCT5_HS_CAN_$_ShiftInPrgValid_$$__Valid_ 1
#define DB_DCT5_HS_CAN_$_ShiftInPrgValid_SendType 0
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__N__or__P___ 0
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__1__ 1
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__2__ 2
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__3__ 3
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__4__ 4
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__5__ 5
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__6__ 6
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__7__ 7
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Target_gear__R__ 8
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_$$__Reserved_ 9
#define DB_DCT5_HS_CAN_$_TARGET_GEAR_SendType 0
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__N__or__P__ 0
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__1__ 1
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__2__ 2
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__3__ 3
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__4__ 4
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__5__ 5
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__6__ 6
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__7__ 7
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Current_gear__R__ 8
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_$$__Reserved_ 9
#define DB_DCT5_HS_CAN_$_CURRENT_GEAR_SendType 0
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__P__ 0
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 1
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 2
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 3
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 4
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__D__ 5
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__N__ 6
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__R__ 7
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Select_lever_in_position__M__ 8
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Reserved_ 9
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Intermediate_position_ 14
#define DB_DCT5_HS_CAN_$_TGS_LEVER_$$__Invalid__ 15
#define DB_DCT5_HS_CAN_$_TGS_LEVER_SendType 0
#define DB_DCT5_HS_CAN_$_TCU_APS_Available_$$__Available_ 0
#define DB_DCT5_HS_CAN_$_TCU_APS_Available_$$__Not_Available_ 1
#define DB_DCT5_HS_CAN_$_TCU_APS_Available_SendType 0
#define DB_DCT5_HS_CAN_$_RollingCounter_DCT5_$$__Valid_values_ 0
#define DB_DCT5_HS_CAN_$_RollingCounter_DCT5_SendType 0
#pragma warning(default : 4005)

void DB_DCT5_HS_CAN_Init(DB_DCT5_HS_CAN * pMsg);
int DB_DCT5_HS_CAN_Transmit(DB_DCT5_HS_CAN * pMsg);
int DB_DCT5_HS_CAN_Transmit_raw(DB_DCT5_HS_CAN * pMsg);
int DB_DCT5_HS_CAN_UpdateBytesFromSignals(DB_DCT5_HS_CAN * pMsg);
int DB_DCT5_HS_CAN_UpdateBytesFromRawSignals(DB_DCT5_HS_CAN * pMsg);
#define DB_DCT5_HS_CAN_CheckSum_DCT5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 0, dPhysicalValue);
#define DB_DCT5_HS_CAN_CurrentGearValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 1, dPhysicalValue);
#define DB_DCT5_HS_CAN_SHIFT_IN_PROGRESS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 2, dPhysicalValue);
#define DB_DCT5_HS_CAN_TargetGearValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 3, dPhysicalValue);
#define DB_DCT5_HS_CAN_ShiftInPrgValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 4, dPhysicalValue);
#define DB_DCT5_HS_CAN_TARGET_GEAR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 5, dPhysicalValue);
#define DB_DCT5_HS_CAN_CURRENT_GEAR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 6, dPhysicalValue);
#define DB_DCT5_HS_CAN_TGS_LEVER_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 7, dPhysicalValue);
#define DB_DCT5_HS_CAN_TCU_APS_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 8, dPhysicalValue);
#define DB_DCT5_HS_CAN_RollingCounter_DCT5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DCT5_HS_CAN_Index, 9, dPhysicalValue);
#define DB_DCT5_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_DCT5_HS_CAN_Index, 0)
#define DB_DCT5_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_DCT5_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_DDCM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RSDS_Left_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Left_LED_status_raw;
} DB_DDCM1_HS_CAN;

#define DB_DDCM1_HS_CAN_SendType 0
#define DB_DDCM1_HS_CAN_SendRate 100
#define DB_DDCM1_HS_CAN_SendRateFast 0
#define DB_DDCM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_DDCM1_HS_CAN_$_RSDS_Left_LED_status_$$__no_error_ 0
#define DB_DDCM1_HS_CAN_$_RSDS_Left_LED_status_$$__error_ 1
#define DB_DDCM1_HS_CAN_$_RSDS_Left_LED_status_SendType 0
#pragma warning(default : 4005)

void DB_DDCM1_HS_CAN_Init(DB_DDCM1_HS_CAN * pMsg);
int DB_DDCM1_HS_CAN_Transmit(DB_DDCM1_HS_CAN * pMsg);
int DB_DDCM1_HS_CAN_Transmit_raw(DB_DDCM1_HS_CAN * pMsg);
int DB_DDCM1_HS_CAN_UpdateBytesFromSignals(DB_DDCM1_HS_CAN * pMsg);
int DB_DDCM1_HS_CAN_UpdateBytesFromRawSignals(DB_DDCM1_HS_CAN * pMsg);
#define DB_DDCM1_HS_CAN_RSDS_Left_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_DDCM1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_DDCM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_DDCM1_HS_CAN_Index, 0)
#define DB_DDCM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_DDCM1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ECM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double EMS_AuthenResult; /// Min: 0 Max: 3 Units: 
    BYTE EMS_AuthenResult_raw;
    double BrakePedalStatus_G; /// Min: 0 Max: 3 Units: 
    BYTE BrakePedalStatus_G_raw;
    double Start_Stop_Sts_G; /// Min: 0 Max: 7 Units: 
    BYTE Start_Stop_Sts_G_raw;
    double EngSpd; /// Min: 0 Max: 8191.875 Units: rpm
    WORD EngSpd_raw;
    double EngSpdValidity; /// Min: 0 Max: 2 Units: 
    BYTE EngSpdValidity_raw;
    double Checksum_ECM1; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_ECM1_raw;
    double RollingCounter_ECM1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ECM1_raw;
} DB_ECM1_HS_CAN;

#define DB_ECM1_HS_CAN_SendType 0
#define DB_ECM1_HS_CAN_SendRate 10
#define DB_ECM1_HS_CAN_SendRateFast 0
#define DB_ECM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Nothing___ 0
#define DB_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Authentication_authentication_failure_ 1
#define DB_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Authentication_success___ 2
#define DB_ECM1_HS_CAN_$_EMS_AuthenResult_$$__Reserved_ 3
#define DB_ECM1_HS_CAN_$_EMS_AuthenResult_SendType 0
#define DB_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Not_pressed_ 0
#define DB_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Pressed_ 1
#define DB_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Reserved_ 2
#define DB_ECM1_HS_CAN_$_BrakePedalStatus_G_$$__Error_ 3
#define DB_ECM1_HS_CAN_$_BrakePedalStatus_G_SendType 0
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__non_start_stop_mode___ 0
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_standby___ 1
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_Stopped_ 2
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Starter_restart______ 3
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_restart____ 4
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_Operation_ 5
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Engine_auto_stopping___ 6
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Invalid_ 7
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_$$__Reserved_ 8
#define DB_ECM1_HS_CAN_$_Start_Stop_Sts_G_SendType 0
#define DB_ECM1_HS_CAN_$_EngSpd_$$__Valid_ 0
#define DB_ECM1_HS_CAN_$_EngSpd_SendType 0
#define DB_ECM1_HS_CAN_$_EngSpdValidity_$$__Invalid_ 0
#define DB_ECM1_HS_CAN_$_EngSpdValidity_$$__Valid_ 1
#define DB_ECM1_HS_CAN_$_EngSpdValidity_$$__Init_value_ 2
#define DB_ECM1_HS_CAN_$_EngSpdValidity_$$__Reserved_ 3
#define DB_ECM1_HS_CAN_$_EngSpdValidity_SendType 0
#define DB_ECM1_HS_CAN_$_Checksum_ECM1_$$__Valid_ 0
#define DB_ECM1_HS_CAN_$_Checksum_ECM1_SendType 0
#define DB_ECM1_HS_CAN_$_RollingCounter_ECM1_$$__Valid_ 0
#define DB_ECM1_HS_CAN_$_RollingCounter_ECM1_SendType 0
#pragma warning(default : 4005)

void DB_ECM1_HS_CAN_Init(DB_ECM1_HS_CAN * pMsg);
int DB_ECM1_HS_CAN_Transmit(DB_ECM1_HS_CAN * pMsg);
int DB_ECM1_HS_CAN_Transmit_raw(DB_ECM1_HS_CAN * pMsg);
int DB_ECM1_HS_CAN_UpdateBytesFromSignals(DB_ECM1_HS_CAN * pMsg);
int DB_ECM1_HS_CAN_UpdateBytesFromRawSignals(DB_ECM1_HS_CAN * pMsg);
#define DB_ECM1_HS_CAN_EMS_AuthenResult_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ECM1_HS_CAN_BrakePedalStatus_G_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ECM1_HS_CAN_Start_Stop_Sts_G_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ECM1_HS_CAN_EngSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ECM1_HS_CAN_EngSpdValidity_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ECM1_HS_CAN_Checksum_ECM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ECM1_HS_CAN_RollingCounter_ECM1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ECM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ECM1_HS_CAN_Index, 0)
#define DB_ECM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ECM1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ECM2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FuelConsumption; /// Min: 0 Max: 131070 Units: �l
    WORD FuelConsumption_raw;
    double AccPedalPos; /// Min: 0 Max: 100.3935 Units: %
    BYTE AccPedalPos_raw;
    double TgtCruiseVehSpd; /// Min: 0 Max: 255 Units: km/h
    BYTE TgtCruiseVehSpd_raw;
    double CruiseCtrlSts; /// Min: 0 Max: 2 Units: 
    BYTE CruiseCtrlSts_raw;
    double MILSts; /// Min: 0 Max: 1 Units: 
    BYTE MILSts_raw;
    double EngState; /// Min: 0 Max: 3 Units: 
    BYTE EngState_raw;
    double AccPedPosValidity; /// Min: 0 Max: 2 Units: 
    BYTE AccPedPosValidity_raw;
    double EngineSVSSignal; /// Min: 0 Max: 1 Units: 
    BYTE EngineSVSSignal_raw;
} DB_ECM2_HS_CAN;

#define DB_ECM2_HS_CAN_SendType 0
#define DB_ECM2_HS_CAN_SendRate 20
#define DB_ECM2_HS_CAN_SendRateFast 0
#define DB_ECM2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ECM2_HS_CAN_$_FuelConsumption_$$__Valid_ 0
#define DB_ECM2_HS_CAN_$_FuelConsumption_SendType 0
#define DB_ECM2_HS_CAN_$_AccPedalPos_$$__Valid_ 0
#define DB_ECM2_HS_CAN_$_AccPedalPos_SendType 0
#define DB_ECM2_HS_CAN_$_TgtCruiseVehSpd_$$__Valid_ 0
#define DB_ECM2_HS_CAN_$_TgtCruiseVehSpd_SendType 0
#define DB_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Inactive___ 0
#define DB_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Active__ 1
#define DB_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Standby_ 2
#define DB_ECM2_HS_CAN_$_CruiseCtrlSts_$$__Reserved_ 3
#define DB_ECM2_HS_CAN_$_CruiseCtrlSts_SendType 0
#define DB_ECM2_HS_CAN_$_MILSts_$$__Off_ 0
#define DB_ECM2_HS_CAN_$_MILSts_$$__On_ 1
#define DB_ECM2_HS_CAN_$_MILSts_SendType 0
#define DB_ECM2_HS_CAN_$_EngState_$$__Stopped_ 0
#define DB_ECM2_HS_CAN_$_EngState_$$__Cranking_ 1
#define DB_ECM2_HS_CAN_$_EngState_$$__Running_ 2
#define DB_ECM2_HS_CAN_$_EngState_$$__DFCO__ 3
#define DB_ECM2_HS_CAN_$_EngState_$$__Stalling___ 3
#define DB_ECM2_HS_CAN_$_EngState_SendType 0
#define DB_ECM2_HS_CAN_$_AccPedPosValidity_$$__Invalid_ 0
#define DB_ECM2_HS_CAN_$_AccPedPosValidity_$$__Valid_ 1
#define DB_ECM2_HS_CAN_$_AccPedPosValidity_$$__Init_value_ 2
#define DB_ECM2_HS_CAN_$_AccPedPosValidity_$$__Reserved_only_used_by___ 3
#define DB_ECM2_HS_CAN_$_AccPedPosValidity_SendType 0
#define DB_ECM2_HS_CAN_$_EngineSVSSignal_$$__SVS_off_ 0
#define DB_ECM2_HS_CAN_$_EngineSVSSignal_$$__SVS_on_ 1
#define DB_ECM2_HS_CAN_$_EngineSVSSignal_SendType 0
#pragma warning(default : 4005)

void DB_ECM2_HS_CAN_Init(DB_ECM2_HS_CAN * pMsg);
int DB_ECM2_HS_CAN_Transmit(DB_ECM2_HS_CAN * pMsg);
int DB_ECM2_HS_CAN_Transmit_raw(DB_ECM2_HS_CAN * pMsg);
int DB_ECM2_HS_CAN_UpdateBytesFromSignals(DB_ECM2_HS_CAN * pMsg);
int DB_ECM2_HS_CAN_UpdateBytesFromRawSignals(DB_ECM2_HS_CAN * pMsg);
#define DB_ECM2_HS_CAN_FuelConsumption_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ECM2_HS_CAN_AccPedalPos_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ECM2_HS_CAN_TgtCruiseVehSpd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ECM2_HS_CAN_CruiseCtrlSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ECM2_HS_CAN_MILSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ECM2_HS_CAN_EngState_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ECM2_HS_CAN_AccPedPosValidity_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ECM2_HS_CAN_EngineSVSSignal_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM2_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ECM2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ECM2_HS_CAN_Index, 0)
#define DB_ECM2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ECM2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ECM3_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double MaxEngTorqNorm; /// Min: 0 Max: 510 Units: Nm
    BYTE MaxEngTorqNorm_raw;
    double BaroPressure; /// Min: 0 Max: 149.86 Units: kPa
    BYTE BaroPressure_raw;
    double EngCoolantTemp; /// Min: -48 Max: 143.25 Units: �C
    BYTE EngCoolantTemp_raw;
    double EngCoolantTempWrn; /// Min: 0 Max: 1 Units: 
    BYTE EngCoolantTempWrn_raw;
    double EngCoolTmpValidity; /// Min: 0 Max: 2 Units: 
    BYTE EngCoolTmpValidity_raw;
    double SS_Screen_tip; /// Min: 0 Max: 1 Units: 
    BYTE SS_Screen_tip_raw;
    double GeneratorWrnLampSts; /// Min: 0 Max: 1 Units: 
    BYTE GeneratorWrnLampSts_raw;
    double SS_Enable_Lamp; /// Min: 0 Max: 1 Units: 
    BYTE SS_Enable_Lamp_raw;
    double SS_Fault_Lamp; /// Min: 0 Max: 1 Units: 
    BYTE SS_Fault_Lamp_raw;
    double GPF_Warning; /// Min: 0 Max: 3 Units: 
    BYTE GPF_Warning_raw;
} DB_ECM3_HS_CAN;

#define DB_ECM3_HS_CAN_SendType 0
#define DB_ECM3_HS_CAN_SendRate 100
#define DB_ECM3_HS_CAN_SendRateFast 0
#define DB_ECM3_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ECM3_HS_CAN_$_MaxEngTorqNorm_$$__Valid_value_ 0
#define DB_ECM3_HS_CAN_$_MaxEngTorqNorm_SendType 0
#define DB_ECM3_HS_CAN_$_BaroPressure_$$__Valid_value_ 0
#define DB_ECM3_HS_CAN_$_BaroPressure_$$__Invalid_value_ 255
#define DB_ECM3_HS_CAN_$_BaroPressure_SendType 0
#define DB_ECM3_HS_CAN_$_EngCoolantTemp_$$__Valid_value_ 0
#define DB_ECM3_HS_CAN_$_EngCoolantTemp_SendType 0
#define DB_ECM3_HS_CAN_$_EngCoolantTempWrn_$$__No_ 0
#define DB_ECM3_HS_CAN_$_EngCoolantTempWrn_$$__Yes_ 1
#define DB_ECM3_HS_CAN_$_EngCoolantTempWrn_SendType 0
#define DB_ECM3_HS_CAN_$_EngCoolTmpValidity_$$__Invalid_ 0
#define DB_ECM3_HS_CAN_$_EngCoolTmpValidity_$$__Valid_ 1
#define DB_ECM3_HS_CAN_$_EngCoolTmpValidity_$$__Init_value_ 2
#define DB_ECM3_HS_CAN_$_EngCoolTmpValidity_SendType 0
#define DB_ECM3_HS_CAN_$_SS_Screen_tip_$$__no_screen_tip_ 0
#define DB_ECM3_HS_CAN_$_SS_Screen_tip_$$__screen_tip_ 1
#define DB_ECM3_HS_CAN_$_SS_Screen_tip_SendType 0
#define DB_ECM3_HS_CAN_$_GeneratorWrnLampSts_$$__Off_ 0
#define DB_ECM3_HS_CAN_$_GeneratorWrnLampSts_$$__On_ 1
#define DB_ECM3_HS_CAN_$_GeneratorWrnLampSts_SendType 0
#define DB_ECM3_HS_CAN_$_SS_Enable_Lamp_$$__Lamp_off__ 0
#define DB_ECM3_HS_CAN_$_SS_Enable_Lamp_$$__Lamp_on_ 1
#define DB_ECM3_HS_CAN_$_SS_Enable_Lamp_SendType 0
#define DB_ECM3_HS_CAN_$_SS_Fault_Lamp_$$__Lamp_off__ 0
#define DB_ECM3_HS_CAN_$_SS_Fault_Lamp_$$__Lamp_on_ 1
#define DB_ECM3_HS_CAN_$_SS_Fault_Lamp_SendType 0
#define DB_ECM3_HS_CAN_$_GPF_Warning_$$__No_Warning_ 0
#define DB_ECM3_HS_CAN_$_GPF_Warning_$$__GPF_is_regenerating_ 1
#define DB_ECM3_HS_CAN_$_GPF_Warning_$$__GPF_need_to_regenerate_ 2
#define DB_ECM3_HS_CAN_$_GPF_Warning_$$__Reserved_ 3
#define DB_ECM3_HS_CAN_$_GPF_Warning_SendType 0
#pragma warning(default : 4005)

void DB_ECM3_HS_CAN_Init(DB_ECM3_HS_CAN * pMsg);
int DB_ECM3_HS_CAN_Transmit(DB_ECM3_HS_CAN * pMsg);
int DB_ECM3_HS_CAN_Transmit_raw(DB_ECM3_HS_CAN * pMsg);
int DB_ECM3_HS_CAN_UpdateBytesFromSignals(DB_ECM3_HS_CAN * pMsg);
int DB_ECM3_HS_CAN_UpdateBytesFromRawSignals(DB_ECM3_HS_CAN * pMsg);
#define DB_ECM3_HS_CAN_MaxEngTorqNorm_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ECM3_HS_CAN_BaroPressure_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ECM3_HS_CAN_EngCoolantTemp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ECM3_HS_CAN_EngCoolantTempWrn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ECM3_HS_CAN_EngCoolTmpValidity_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ECM3_HS_CAN_SS_Screen_tip_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ECM3_HS_CAN_GeneratorWrnLampSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ECM3_HS_CAN_SS_Enable_Lamp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ECM3_HS_CAN_SS_Fault_Lamp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 8, dPhysicalValue);
#define DB_ECM3_HS_CAN_GPF_Warning_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM3_HS_CAN_Index, 9, dPhysicalValue);
#define DB_ECM3_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ECM3_HS_CAN_Index, 0)
#define DB_ECM3_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ECM3_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ECM4_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_ECM4; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_ECM4_raw;
    double NetEngTrq_G; /// Min: -100 Max: 99.99666120000001 Units: %
    WORD NetEngTrq_G_raw;
    double DriverEngTqReq_G; /// Min: -100 Max: 99.999713 Units: %
    WORD DriverEngTqReq_G_raw;
    double DriverEngTqReqValid_G; /// Min: 0 Max: 1 Units: 
    BYTE DriverEngTqReqValid_G_raw;
    double RollingCounter_ECM4; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ECM4_raw;
} DB_ECM4_HS_CAN;

#define DB_ECM4_HS_CAN_SendType 0
#define DB_ECM4_HS_CAN_SendRate 10
#define DB_ECM4_HS_CAN_SendRateFast 0
#define DB_ECM4_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ECM4_HS_CAN_$_Checksum_ECM4_$$__Valid__ 0
#define DB_ECM4_HS_CAN_$_Checksum_ECM4_SendType 0
#define DB_ECM4_HS_CAN_$_NetEngTrq_G_$$__Valid_ 0
#define DB_ECM4_HS_CAN_$_NetEngTrq_G_$$__Invalid_ 65535
#define DB_ECM4_HS_CAN_$_NetEngTrq_G_SendType 0
#define DB_ECM4_HS_CAN_$_DriverEngTqReq_G_$$__Valid_ 0
#define DB_ECM4_HS_CAN_$_DriverEngTqReq_G_SendType 0
#define DB_ECM4_HS_CAN_$_DriverEngTqReqValid_G_$$__Invalid_ 0
#define DB_ECM4_HS_CAN_$_DriverEngTqReqValid_G_$$__Valid_ 1
#define DB_ECM4_HS_CAN_$_DriverEngTqReqValid_G_SendType 0
#define DB_ECM4_HS_CAN_$_RollingCounter_ECM4_$$__Valid__ 0
#define DB_ECM4_HS_CAN_$_RollingCounter_ECM4_SendType 0
#pragma warning(default : 4005)

void DB_ECM4_HS_CAN_Init(DB_ECM4_HS_CAN * pMsg);
int DB_ECM4_HS_CAN_Transmit(DB_ECM4_HS_CAN * pMsg);
int DB_ECM4_HS_CAN_Transmit_raw(DB_ECM4_HS_CAN * pMsg);
int DB_ECM4_HS_CAN_UpdateBytesFromSignals(DB_ECM4_HS_CAN * pMsg);
int DB_ECM4_HS_CAN_UpdateBytesFromRawSignals(DB_ECM4_HS_CAN * pMsg);
#define DB_ECM4_HS_CAN_Checksum_ECM4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM4_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ECM4_HS_CAN_NetEngTrq_G_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM4_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ECM4_HS_CAN_DriverEngTqReq_G_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM4_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ECM4_HS_CAN_DriverEngTqReqValid_G_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM4_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ECM4_HS_CAN_RollingCounter_ECM4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM4_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ECM4_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ECM4_HS_CAN_Index, 0)
#define DB_ECM4_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ECM4_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ECM9_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_ECM9; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_ECM9_raw;
    double ECM_interfaceAPS; /// Min: 0 Max: 1 Units: 
    BYTE ECM_interfaceAPS_raw;
    double AccPedalOverride; /// Min: 0 Max: 1 Units: 
    BYTE AccPedalOverride_raw;
    double ECM_ACC_ON_OFFSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_ON_OFFSw_raw;
    double ECM_ACC_CancelSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_CancelSw_raw;
    double ECM_ACC_IncSetSpd_ResuSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_IncSetSpd_ResuSw_raw;
    double ECM_ACC_DecSetSpd_SetSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACC_DecSetSpd_SetSw_raw;
    double ECM_ACCTimeGapSetSw; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACCTimeGapSetSw_raw;
    double ECM_ACCSwErr; /// Min: 0 Max: 1 Units: 
    BYTE ECM_ACCSwErr_raw;
    double AccrPedlPosnDiagc; /// Min: 0 Max: 100.3935 Units: %
    BYTE AccrPedlPosnDiagc_raw;
    double ECMResponseACC; /// Min: 0 Max: 1 Units: 
    BYTE ECMResponseACC_raw;
    double ECMACCInterface; /// Min: 0 Max: 1 Units: 
    BYTE ECMACCInterface_raw;
    double RollingCounter_ECM9; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ECM9_raw;
} DB_ECM9_HS_CAN;

#define DB_ECM9_HS_CAN_SendType 0
#define DB_ECM9_HS_CAN_SendRate 20
#define DB_ECM9_HS_CAN_SendRateFast 0
#define DB_ECM9_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ECM9_HS_CAN_$_Checksum_ECM9_$$__Valid_value_ 0
#define DB_ECM9_HS_CAN_$_Checksum_ECM9_SendType 0
#define DB_ECM9_HS_CAN_$_ECM_interfaceAPS_$$__No_error_ 0
#define DB_ECM9_HS_CAN_$_ECM_interfaceAPS_$$__Error_ 1
#define DB_ECM9_HS_CAN_$_ECM_interfaceAPS_SendType 0
#define DB_ECM9_HS_CAN_$_AccPedalOverride_$$__not_override_ 0
#define DB_ECM9_HS_CAN_$_AccPedalOverride_$$__override_ 1
#define DB_ECM9_HS_CAN_$_AccPedalOverride_SendType 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_ON_OFFSw_$$__No_press_ 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_ON_OFFSw_$$__Pressed_ 1
#define DB_ECM9_HS_CAN_$_ECM_ACC_ON_OFFSw_SendType 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_CancelSw_$$__No_press_ 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_CancelSw_$$__Pressed_ 1
#define DB_ECM9_HS_CAN_$_ECM_ACC_CancelSw_SendType 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_IncSetSpd_ResuSw_$$__No_press_ 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_IncSetSpd_ResuSw_$$__Pressed_ 1
#define DB_ECM9_HS_CAN_$_ECM_ACC_IncSetSpd_ResuSw_SendType 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_DecSetSpd_SetSw_$$__No_press_ 0
#define DB_ECM9_HS_CAN_$_ECM_ACC_DecSetSpd_SetSw_$$__Pressed_ 1
#define DB_ECM9_HS_CAN_$_ECM_ACC_DecSetSpd_SetSw_SendType 0
#define DB_ECM9_HS_CAN_$_ECM_ACCTimeGapSetSw_$$__No_press_ 0
#define DB_ECM9_HS_CAN_$_ECM_ACCTimeGapSetSw_$$__Pressed_ 1
#define DB_ECM9_HS_CAN_$_ECM_ACCTimeGapSetSw_SendType 0
#define DB_ECM9_HS_CAN_$_ECM_ACCSwErr_$$__No_error_ 0
#define DB_ECM9_HS_CAN_$_ECM_ACCSwErr_$$__Error_ 1
#define DB_ECM9_HS_CAN_$_ECM_ACCSwErr_SendType 0
#define DB_ECM9_HS_CAN_$_AccrPedlPosnDiagc_$$__Valid__ 0
#define DB_ECM9_HS_CAN_$_AccrPedlPosnDiagc_SendType 0
#define DB_ECM9_HS_CAN_$_ECMResponseACC_$$__No_response_ 0
#define DB_ECM9_HS_CAN_$_ECMResponseACC_$$__Response_ 1
#define DB_ECM9_HS_CAN_$_ECMResponseACC_SendType 0
#define DB_ECM9_HS_CAN_$_ECMACCInterface_$$__No_response_ 0
#define DB_ECM9_HS_CAN_$_ECMACCInterface_$$__Response_ 1
#define DB_ECM9_HS_CAN_$_ECMACCInterface_SendType 0
#define DB_ECM9_HS_CAN_$_RollingCounter_ECM9_$$__Valid_value_ 0
#define DB_ECM9_HS_CAN_$_RollingCounter_ECM9_SendType 0
#pragma warning(default : 4005)

void DB_ECM9_HS_CAN_Init(DB_ECM9_HS_CAN * pMsg);
int DB_ECM9_HS_CAN_Transmit(DB_ECM9_HS_CAN * pMsg);
int DB_ECM9_HS_CAN_Transmit_raw(DB_ECM9_HS_CAN * pMsg);
int DB_ECM9_HS_CAN_UpdateBytesFromSignals(DB_ECM9_HS_CAN * pMsg);
int DB_ECM9_HS_CAN_UpdateBytesFromRawSignals(DB_ECM9_HS_CAN * pMsg);
#define DB_ECM9_HS_CAN_Checksum_ECM9_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECM_interfaceAPS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ECM9_HS_CAN_AccPedalOverride_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECM_ACC_ON_OFFSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECM_ACC_CancelSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECM_ACC_IncSetSpd_ResuSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECM_ACC_DecSetSpd_SetSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECM_ACCTimeGapSetSw_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECM_ACCSwErr_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 8, dPhysicalValue);
#define DB_ECM9_HS_CAN_AccrPedlPosnDiagc_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 9, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECMResponseACC_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 10, dPhysicalValue);
#define DB_ECM9_HS_CAN_ECMACCInterface_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 11, dPhysicalValue);
#define DB_ECM9_HS_CAN_RollingCounter_ECM9_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ECM9_HS_CAN_Index, 12, dPhysicalValue);
#define DB_ECM9_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ECM9_HS_CAN_Index, 0)
#define DB_ECM9_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ECM9_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_EPB1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_EPB1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_EPB1_raw;
    double PressBrakePedalPointOut; /// Min: 0 Max: 1 Units: N/A
    BYTE PressBrakePedalPointOut_raw;
    double EPB_SwtichPositionValid; /// Min: 0 Max: 1 Units: 
    BYTE EPB_SwtichPositionValid_raw;
    double EPB_SwtichPosition; /// Min: 0 Max: 3 Units: 
    BYTE EPB_SwtichPosition_raw;
    double EPBSts; /// Min: 0 Max: 3 Units: 
    BYTE EPBSts_raw;
    double EPBErrorSts; /// Min: 0 Max: 3 Units: 
    BYTE EPBErrorSts_raw;
    double EPBTXTdisplay; /// Min: 0 Max: 15 Units: N/A
    BYTE EPBTXTdisplay_raw;
    double RollingCounter_EPB1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_EPB1_raw;
} DB_EPB1_HS_CAN;

#define DB_EPB1_HS_CAN_SendType 0
#define DB_EPB1_HS_CAN_SendRate 20
#define DB_EPB1_HS_CAN_SendRateFast 0
#define DB_EPB1_HS_CAN_NumRepetitions 0
#define DB_EPB1_HS_CAN_$_CheckSum_EPB1_SendType 0
#pragma warning(disable : 4005)
#define DB_EPB1_HS_CAN_$_PressBrakePedalPointOut_$$__No_reminder_ 0
#define DB_EPB1_HS_CAN_$_PressBrakePedalPointOut_$$__Pedal_needs_to_be_applied_ 1
#define DB_EPB1_HS_CAN_$_PressBrakePedalPointOut_SendType 0
#define DB_EPB1_HS_CAN_$_EPB_SwtichPositionValid_$$__Not_valid__ 1
#define DB_EPB1_HS_CAN_$_EPB_SwtichPositionValid_$$__Valid__ 0
#define DB_EPB1_HS_CAN_$_EPB_SwtichPositionValid_SendType 0
#define DB_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Neutral_ 0
#define DB_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Release_ 1
#define DB_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Apply_ 2
#define DB_EPB1_HS_CAN_$_EPB_SwtichPosition_$$__Reserved_ 3
#define DB_EPB1_HS_CAN_$_EPB_SwtichPosition_SendType 0
#define DB_EPB1_HS_CAN_$_EPBSts_$$__Released_ 0
#define DB_EPB1_HS_CAN_$_EPBSts_$$__Closed_ 1
#define DB_EPB1_HS_CAN_$_EPBSts_$$__In_progress_ 2
#define DB_EPB1_HS_CAN_$_EPBSts_$$__unknown_ 3
#define DB_EPB1_HS_CAN_$_EPBSts_SendType 0
#define DB_EPB1_HS_CAN_$_EPBErrorSts_$$__Undefined_ 0
#define DB_EPB1_HS_CAN_$_EPBErrorSts_$$__No_Error_ 1
#define DB_EPB1_HS_CAN_$_EPBErrorSts_$$__Error_ 2
#define DB_EPB1_HS_CAN_$_EPBErrorSts_$$__Diagnosis_ 3
#define DB_EPB1_HS_CAN_$_EPBErrorSts_SendType 0
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__No_display_ 0
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Gradient_too_high_ 1
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Park_brake_force_not_enough_ 2
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Park_brake_system_overheated_ 3
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Remind_driver_to_apply_safety_belt_ 4
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Park_brake_maintenance_mode_ 5
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Roller_bench_mode_ 6
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_$$__Reserved_ 7
#define DB_EPB1_HS_CAN_$_EPBTXTdisplay_SendType 0
#define DB_EPB1_HS_CAN_$_RollingCounter_EPB1_SendType 0
#pragma warning(default : 4005)

void DB_EPB1_HS_CAN_Init(DB_EPB1_HS_CAN * pMsg);
int DB_EPB1_HS_CAN_Transmit(DB_EPB1_HS_CAN * pMsg);
int DB_EPB1_HS_CAN_Transmit_raw(DB_EPB1_HS_CAN * pMsg);
int DB_EPB1_HS_CAN_UpdateBytesFromSignals(DB_EPB1_HS_CAN * pMsg);
int DB_EPB1_HS_CAN_UpdateBytesFromRawSignals(DB_EPB1_HS_CAN * pMsg);
#define DB_EPB1_HS_CAN_CheckSum_EPB1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_EPB1_HS_CAN_PressBrakePedalPointOut_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_EPB1_HS_CAN_EPB_SwtichPositionValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_EPB1_HS_CAN_EPB_SwtichPosition_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_EPB1_HS_CAN_EPBSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_EPB1_HS_CAN_EPBErrorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_EPB1_HS_CAN_EPBTXTdisplay_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_EPB1_HS_CAN_RollingCounter_EPB1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_EPB1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_EPB1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_EPB1_HS_CAN_Index, 0)
#define DB_EPB1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_EPB1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ESP1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ESP1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ESP1_raw;
    double ESPFailSts; /// Min: 0 Max: 1 Units: 
    BYTE ESPFailSts_raw;
    double ESPBrakeLightCtrl; /// Min: 0 Max: 1 Units: 
    BYTE ESPBrakeLightCtrl_raw;
    double ESPActiveInfoLamp; /// Min: 0 Max: 1 Units: 
    BYTE ESPActiveInfoLamp_raw;
    double EspFuncOffSts; /// Min: 0 Max: 1 Units: 
    BYTE EspFuncOffSts_raw;
    double EPBRedLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE EPBRedLmpSts_raw;
    double BTCActive; /// Min: 0 Max: 1 Units: 
    BYTE BTCActive_raw;
    double PTCActive; /// Min: 0 Max: 1 Units: 
    BYTE PTCActive_raw;
    double MSRActive; /// Min: 0 Max: 1 Units: 
    BYTE MSRActive_raw;
    double VDCActive; /// Min: 0 Max: 1 Units: 
    BYTE VDCActive_raw;
    double VDCDeactivated; /// Min: 0 Max: 1 Units: 
    BYTE VDCDeactivated_raw;
    double VDCFail; /// Min: 0 Max: 1 Units: 
    BYTE VDCFail_raw;
    double ESP_MasterCylindBrakePressValid; /// Min: 0 Max: 1 Units: 
    BYTE ESP_MasterCylindBrakePressValid_raw;
    double ESP_MasterCylindBrakePress; /// Min: -42.5 Max: 425 Units: bar
    WORD ESP_MasterCylindBrakePress_raw;
    double RollingCounter_ESP1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ESP1_raw;
} DB_ESP1_HS_CAN;

#define DB_ESP1_HS_CAN_SendType 0
#define DB_ESP1_HS_CAN_SendRate 20
#define DB_ESP1_HS_CAN_SendRateFast 0
#define DB_ESP1_HS_CAN_NumRepetitions 0
#define DB_ESP1_HS_CAN_$_CheckSum_ESP1_SendType 0
#pragma warning(disable : 4005)
#define DB_ESP1_HS_CAN_$_ESPFailSts_$$__No_failure_ 0
#define DB_ESP1_HS_CAN_$_ESPFailSts_$$__Failure_ 1
#define DB_ESP1_HS_CAN_$_ESPFailSts_SendType 0
#define DB_ESP1_HS_CAN_$_ESPBrakeLightCtrl_$$__Brake_light_off_ 0
#define DB_ESP1_HS_CAN_$_ESPBrakeLightCtrl_$$__Brake_light_on_ 1
#define DB_ESP1_HS_CAN_$_ESPBrakeLightCtrl_SendType 0
#define DB_ESP1_HS_CAN_$_ESPActiveInfoLamp_$$__Not_active_ 0
#define DB_ESP1_HS_CAN_$_ESPActiveInfoLamp_$$__Active_ 1
#define DB_ESP1_HS_CAN_$_ESPActiveInfoLamp_SendType 0
#define DB_ESP1_HS_CAN_$_EspFuncOffSts_$$__Available_On_ 0
#define DB_ESP1_HS_CAN_$_EspFuncOffSts_$$__Unavailable_Off_ 1
#define DB_ESP1_HS_CAN_$_EspFuncOffSts_SendType 0
#define DB_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Lamp_off_ 1
#define DB_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Lamp_on_ 1
#define DB_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Lamp_flash_ 2
#define DB_ESP1_HS_CAN_$_EPBRedLmpSts_$$__Reserved_ 3
#define DB_ESP1_HS_CAN_$_EPBRedLmpSts_SendType 0
#define DB_ESP1_HS_CAN_$_BTCActive_$$__Not_active_ 0
#define DB_ESP1_HS_CAN_$_BTCActive_$$__Active_ 1
#define DB_ESP1_HS_CAN_$_BTCActive_SendType 0
#define DB_ESP1_HS_CAN_$_PTCActive_$$__Not_active_ 0
#define DB_ESP1_HS_CAN_$_PTCActive_$$__Active_ 1
#define DB_ESP1_HS_CAN_$_PTCActive_SendType 0
#define DB_ESP1_HS_CAN_$_MSRActive_$$__Not_active_ 0
#define DB_ESP1_HS_CAN_$_MSRActive_$$__Active_ 1
#define DB_ESP1_HS_CAN_$_MSRActive_SendType 0
#define DB_ESP1_HS_CAN_$_VDCActive_$$__Not_active_ 0
#define DB_ESP1_HS_CAN_$_VDCActive_$$__Active_ 1
#define DB_ESP1_HS_CAN_$_VDCActive_SendType 0
#define DB_ESP1_HS_CAN_$_VDCDeactivated_$$__Not_deactivated_ 0
#define DB_ESP1_HS_CAN_$_VDCDeactivated_$$__Deactivated_ 1
#define DB_ESP1_HS_CAN_$_VDCDeactivated_SendType 0
#define DB_ESP1_HS_CAN_$_VDCFail_$$__No_error_ 0
#define DB_ESP1_HS_CAN_$_VDCFail_$$__Error_ 1
#define DB_ESP1_HS_CAN_$_VDCFail_SendType 0
#define DB_ESP1_HS_CAN_$_ESP_MasterCylindBrakePressValid_$$__Valid_ 0
#define DB_ESP1_HS_CAN_$_ESP_MasterCylindBrakePressValid_$$__Invalid_ 1
#define DB_ESP1_HS_CAN_$_ESP_MasterCylindBrakePressValid_SendType 0
#define DB_ESP1_HS_CAN_$_ESP_MasterCylindBrakePress_$$__Valid_value_ 0
#define DB_ESP1_HS_CAN_$_ESP_MasterCylindBrakePress_$$__Reserved_ 14961
#define DB_ESP1_HS_CAN_$_ESP_MasterCylindBrakePress_SendType 0
#define DB_ESP1_HS_CAN_$_RollingCounter_ESP1_SendType 0
#pragma warning(default : 4005)

void DB_ESP1_HS_CAN_Init(DB_ESP1_HS_CAN * pMsg);
int DB_ESP1_HS_CAN_Transmit(DB_ESP1_HS_CAN * pMsg);
int DB_ESP1_HS_CAN_Transmit_raw(DB_ESP1_HS_CAN * pMsg);
int DB_ESP1_HS_CAN_UpdateBytesFromSignals(DB_ESP1_HS_CAN * pMsg);
int DB_ESP1_HS_CAN_UpdateBytesFromRawSignals(DB_ESP1_HS_CAN * pMsg);
#define DB_ESP1_HS_CAN_CheckSum_ESP1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ESP1_HS_CAN_ESPFailSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ESP1_HS_CAN_ESPBrakeLightCtrl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ESP1_HS_CAN_ESPActiveInfoLamp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ESP1_HS_CAN_EspFuncOffSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ESP1_HS_CAN_EPBRedLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ESP1_HS_CAN_BTCActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ESP1_HS_CAN_PTCActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ESP1_HS_CAN_MSRActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_ESP1_HS_CAN_VDCActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_ESP1_HS_CAN_VDCDeactivated_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_ESP1_HS_CAN_VDCFail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 11, dPhysicalValue);
#define DB_ESP1_HS_CAN_ESP_MasterCylindBrakePressValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 12, dPhysicalValue);
#define DB_ESP1_HS_CAN_ESP_MasterCylindBrakePress_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 13, dPhysicalValue);
#define DB_ESP1_HS_CAN_RollingCounter_ESP1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP1_HS_CAN_Index, 14, dPhysicalValue);
#define DB_ESP1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ESP1_HS_CAN_Index, 0)
#define DB_ESP1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ESP1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ESP2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ESP2; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ESP2_raw;
    double VehicleStandstill; /// Min: 0 Max: 3 Units: 
    BYTE VehicleStandstill_raw;
    double NoBrakeForce; /// Min: 0 Max: 1 Units: 
    BYTE NoBrakeForce_raw;
    double BrakeDiskOverHeat; /// Min: 0 Max: 1 Units: 
    BYTE BrakeDiskOverHeat_raw;
    double ABAactive; /// Min: 0 Max: 1 Units: 
    BYTE ABAactive_raw;
    double ABAavailable; /// Min: 0 Max: 1 Units: 
    BYTE ABAavailable_raw;
    double ABPActive; /// Min: 0 Max: 1 Units: 
    BYTE ABPActive_raw;
    double ABPAvailable; /// Min: 0 Max: 1 Units: 
    BYTE ABPAvailable_raw;
    double AEBAvailable; /// Min: 0 Max: 1 Units: 
    BYTE AEBAvailable_raw;
    double AEBBAActive; /// Min: 0 Max: 1 Units: 
    BYTE AEBBAActive_raw;
    double AEBIBActive; /// Min: 0 Max: 1 Units: 
    BYTE AEBIBActive_raw;
    double AWBactive; /// Min: 0 Max: 1 Units: 
    BYTE AWBactive_raw;
    double AWBavailable; /// Min: 0 Max: 1 Units: 
    BYTE AWBavailable_raw;
    double CDD_Available; /// Min: 0 Max: 1 Units: 
    BYTE CDD_Available_raw;
    double CDD_Active; /// Min: 0 Max: 1 Units: 
    BYTE CDD_Active_raw;
    double HDCControl; /// Min: 0 Max: 2 Units: 
    BYTE HDCControl_raw;
    double HDCFault; /// Min: 0 Max: 3 Units: 
    BYTE HDCFault_raw;
    double CDPActive; /// Min: 0 Max: 1 Units: 
    BYTE CDPActive_raw;
    double AVHSts; /// Min: 0 Max: 2 Units: 
    BYTE AVHSts_raw;
    double AVHerrorSts; /// Min: 0 Max: 3 Units: 
    BYTE AVHerrorSts_raw;
    double DrivingModeReq_ESP; /// Min: 0 Max: 15 Units: 
    BYTE DrivingModeReq_ESP_raw;
    double DrivingModeDis; /// Min: 0 Max: 15 Units: 
    BYTE DrivingModeDis_raw;
    double RollingCounter_ESP2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ESP2_raw;
    double CTABrakeAvailable; /// Min: 0 Max: 1 Units: 
    BYTE CTABrakeAvailable_raw;
} DB_ESP2_HS_CAN;

#define DB_ESP2_HS_CAN_SendType 0
#define DB_ESP2_HS_CAN_SendRate 20
#define DB_ESP2_HS_CAN_SendRateFast 0
#define DB_ESP2_HS_CAN_NumRepetitions 0
#define DB_ESP2_HS_CAN_$_CheckSum_ESP2_SendType 0
#pragma warning(disable : 4005)
#define DB_ESP2_HS_CAN_$_VehicleStandstill_$$__Not_standstill_ 0
#define DB_ESP2_HS_CAN_$_VehicleStandstill_$$__Standstill_ 1
#define DB_ESP2_HS_CAN_$_VehicleStandstill_$$__Invalid__short_unavailability__maX_3s__ 2
#define DB_ESP2_HS_CAN_$_VehicleStandstill_$$__Reserved_ 3
#define DB_ESP2_HS_CAN_$_VehicleStandstill_SendType 0
#define DB_ESP2_HS_CAN_$_NoBrakeForce_$$__EXist_brake_force_ 0
#define DB_ESP2_HS_CAN_$_NoBrakeForce_$$__No_brake_force_ 1
#define DB_ESP2_HS_CAN_$_NoBrakeForce_SendType 0
#define DB_ESP2_HS_CAN_$_BrakeDiskOverHeat_$$__Not_high_ 0
#define DB_ESP2_HS_CAN_$_BrakeDiskOverHeat_$$__Temp_too_high_ 1
#define DB_ESP2_HS_CAN_$_BrakeDiskOverHeat_SendType 0
#define DB_ESP2_HS_CAN_$_ABAactive_$$__Not_active_ 0
#define DB_ESP2_HS_CAN_$_ABAactive_$$__Active_ 1
#define DB_ESP2_HS_CAN_$_ABAactive_SendType 0
#define DB_ESP2_HS_CAN_$_ABAavailable_$$__Unusable_ 0
#define DB_ESP2_HS_CAN_$_ABAavailable_$$__Usable_ 1
#define DB_ESP2_HS_CAN_$_ABAavailable_SendType 0
#define DB_ESP2_HS_CAN_$_ABPActive_$$__Not_active_ 0
#define DB_ESP2_HS_CAN_$_ABPActive_$$__Active_ 1
#define DB_ESP2_HS_CAN_$_ABPActive_SendType 0
#define DB_ESP2_HS_CAN_$_ABPAvailable_$$__Unusable_ 0
#define DB_ESP2_HS_CAN_$_ABPAvailable_$$__Usable_ 1
#define DB_ESP2_HS_CAN_$_ABPAvailable_SendType 0
#define DB_ESP2_HS_CAN_$_AEBAvailable_$$__Unusable_ 0
#define DB_ESP2_HS_CAN_$_AEBAvailable_$$__Usable_ 1
#define DB_ESP2_HS_CAN_$_AEBAvailable_SendType 0
#define DB_ESP2_HS_CAN_$_AEBBAActive_$$__Not_active_ 0
#define DB_ESP2_HS_CAN_$_AEBBAActive_$$__Active_ 1
#define DB_ESP2_HS_CAN_$_AEBBAActive_SendType 0
#define DB_ESP2_HS_CAN_$_AEBIBActive_$$__Not_active_ 0
#define DB_ESP2_HS_CAN_$_AEBIBActive_$$__Active_ 1
#define DB_ESP2_HS_CAN_$_AEBIBActive_SendType 0
#define DB_ESP2_HS_CAN_$_AWBactive_$$__Not_active_ 0
#define DB_ESP2_HS_CAN_$_AWBactive_$$__Active_ 1
#define DB_ESP2_HS_CAN_$_AWBactive_SendType 0
#define DB_ESP2_HS_CAN_$_AWBavailable_$$__Unusable_ 0
#define DB_ESP2_HS_CAN_$_AWBavailable_$$__Usable_ 1
#define DB_ESP2_HS_CAN_$_AWBavailable_SendType 0
#define DB_ESP2_HS_CAN_$_CDD_Available_$$__Not_available_ 0
#define DB_ESP2_HS_CAN_$_CDD_Available_$$__Available_ 1
#define DB_ESP2_HS_CAN_$_CDD_Available_SendType 0
#define DB_ESP2_HS_CAN_$_CDD_Active_$$__Not_active_ 0
#define DB_ESP2_HS_CAN_$_CDD_Active_$$__Active_ 1
#define DB_ESP2_HS_CAN_$_CDD_Active_SendType 0
#define DB_ESP2_HS_CAN_$_HDCControl_$$__OFF_ 0
#define DB_ESP2_HS_CAN_$_HDCControl_$$__On_active_braking_ 1
#define DB_ESP2_HS_CAN_$_HDCControl_$$__On_not_active_braking_ 2
#define DB_ESP2_HS_CAN_$_HDCControl_SendType 0
#define DB_ESP2_HS_CAN_$_HDCFault_$$__No_failure_ 0
#define DB_ESP2_HS_CAN_$_HDCFault_$$__Failure_ 1
#define DB_ESP2_HS_CAN_$_HDCFault_$$__Unusable_ 2
#define DB_ESP2_HS_CAN_$_HDCFault_$$__Reserved_ 3
#define DB_ESP2_HS_CAN_$_HDCFault_SendType 0
#define DB_ESP2_HS_CAN_$_CDPActive_$$__Not_active_ 0
#define DB_ESP2_HS_CAN_$_CDPActive_$$__Active_ 1
#define DB_ESP2_HS_CAN_$_CDPActive_SendType 0
#define DB_ESP2_HS_CAN_$_AVHSts_$$__Off_ 0
#define DB_ESP2_HS_CAN_$_AVHSts_$$__Standby__ 1
#define DB_ESP2_HS_CAN_$_AVHSts_$$__active_ 2
#define DB_ESP2_HS_CAN_$_AVHSts_SendType 0
#define DB_ESP2_HS_CAN_$_AVHerrorSts_$$__No_failure_ 0
#define DB_ESP2_HS_CAN_$_AVHerrorSts_$$__Failure_ 1
#define DB_ESP2_HS_CAN_$_AVHerrorSts_$$__Unusable_ 2
#define DB_ESP2_HS_CAN_$_AVHerrorSts_$$__Reserved_ 3
#define DB_ESP2_HS_CAN_$_AVHerrorSts_SendType 0
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__NO_Terrain_Control_ 0
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Standard_ 1
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Sport_ 2
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Snow_ 3
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Flat_Mud_ 4
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Deep_Mud_ 5
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Stiff_Sand_ 6
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Soft_Sand_ 7
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Leave_Sand_trap_ 8
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__4L_ 9
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Economic_ 10
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Auto_ 11
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Rock_ 12
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Off_road__ 13
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Sport__ 14
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_$$__Invalid_Value_ 15
#define DB_ESP2_HS_CAN_$_DrivingModeReq_ESP_SendType 0
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Standard_ 0
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Sport_ 1
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Snow_ 2
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Mud_ 3
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Sand_ 4
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Reserved_ 5
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Economic_ 6
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Mode_Unknown_ 7
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Reserved_ 8
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Sport__ 9
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Reserved_ 10
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Failed_ 14
#define DB_ESP2_HS_CAN_$_DrivingModeDis_$$__Invalid_Value_ 15
#define DB_ESP2_HS_CAN_$_DrivingModeDis_SendType 0
#define DB_ESP2_HS_CAN_$_RollingCounter_ESP2_SendType 0
#define DB_ESP2_HS_CAN_$_CTABrakeAvailable_$$__Not_Available_ 0
#define DB_ESP2_HS_CAN_$_CTABrakeAvailable_$$__Available_ 1
#define DB_ESP2_HS_CAN_$_CTABrakeAvailable_SendType 0
#pragma warning(default : 4005)

void DB_ESP2_HS_CAN_Init(DB_ESP2_HS_CAN * pMsg);
int DB_ESP2_HS_CAN_Transmit(DB_ESP2_HS_CAN * pMsg);
int DB_ESP2_HS_CAN_Transmit_raw(DB_ESP2_HS_CAN * pMsg);
int DB_ESP2_HS_CAN_UpdateBytesFromSignals(DB_ESP2_HS_CAN * pMsg);
int DB_ESP2_HS_CAN_UpdateBytesFromRawSignals(DB_ESP2_HS_CAN * pMsg);
#define DB_ESP2_HS_CAN_CheckSum_ESP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ESP2_HS_CAN_VehicleStandstill_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ESP2_HS_CAN_NoBrakeForce_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ESP2_HS_CAN_BrakeDiskOverHeat_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ESP2_HS_CAN_ABAactive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ESP2_HS_CAN_ABAavailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ESP2_HS_CAN_ABPActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 6, dPhysicalValue);
#define DB_ESP2_HS_CAN_ABPAvailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 7, dPhysicalValue);
#define DB_ESP2_HS_CAN_AEBAvailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 8, dPhysicalValue);
#define DB_ESP2_HS_CAN_AEBBAActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 9, dPhysicalValue);
#define DB_ESP2_HS_CAN_AEBIBActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 10, dPhysicalValue);
#define DB_ESP2_HS_CAN_AWBactive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 11, dPhysicalValue);
#define DB_ESP2_HS_CAN_AWBavailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 12, dPhysicalValue);
#define DB_ESP2_HS_CAN_CDD_Available_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 13, dPhysicalValue);
#define DB_ESP2_HS_CAN_CDD_Active_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 14, dPhysicalValue);
#define DB_ESP2_HS_CAN_HDCControl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 15, dPhysicalValue);
#define DB_ESP2_HS_CAN_HDCFault_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 16, dPhysicalValue);
#define DB_ESP2_HS_CAN_CDPActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 17, dPhysicalValue);
#define DB_ESP2_HS_CAN_AVHSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 18, dPhysicalValue);
#define DB_ESP2_HS_CAN_AVHerrorSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 19, dPhysicalValue);
#define DB_ESP2_HS_CAN_DrivingModeReq_ESP_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 20, dPhysicalValue);
#define DB_ESP2_HS_CAN_DrivingModeDis_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 21, dPhysicalValue);
#define DB_ESP2_HS_CAN_RollingCounter_ESP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 22, dPhysicalValue);
#define DB_ESP2_HS_CAN_CTABrakeAvailable_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP2_HS_CAN_Index, 23, dPhysicalValue);
#define DB_ESP2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ESP2_HS_CAN_Index, 0)
#define DB_ESP2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ESP2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_ESP7_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double CheckSum_ESP7; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_ESP7_raw;
    double ESP_MEBBrkAvail; /// Min: 0 Max: 1 Units: 
    BYTE ESP_MEBBrkAvail_raw;
    double LgtCtrlrAvail; /// Min: 0 Max: 1 Units: 
    BYTE LgtCtrlrAvail_raw;
    double LgtCtrlrFailr; /// Min: 0 Max: 1 Units: 
    BYTE LgtCtrlrFailr_raw;
    double LgtCtrlrSts; /// Min: 0 Max: 1 Units: 
    BYTE LgtCtrlrSts_raw;
    double RollingCounter_ESP7; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_ESP7_raw;
} DB_ESP7_HS_CAN;

#define DB_ESP7_HS_CAN_SendType 0
#define DB_ESP7_HS_CAN_SendRate 20
#define DB_ESP7_HS_CAN_SendRateFast 0
#define DB_ESP7_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_ESP7_HS_CAN_$_CheckSum_ESP7_$$__Valid_values_ 0
#define DB_ESP7_HS_CAN_$_CheckSum_ESP7_SendType 0
#define DB_ESP7_HS_CAN_$_ESP_MEBBrkAvail_$$__Not_Available_ 0
#define DB_ESP7_HS_CAN_$_ESP_MEBBrkAvail_$$__Available_ 1
#define DB_ESP7_HS_CAN_$_ESP_MEBBrkAvail_SendType 0
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Not_Available_ 0
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 1
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 2
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 3
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 4
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__AutomaticPark_ 5
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_$$__Reserved_ 6
#define DB_ESP7_HS_CAN_$_LgtCtrlrAvail_SendType 0
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__No_Error_ 0
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Vehicle_Blocked_ 1
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Unexpected_GearPosition_ 2
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Unexpected_EPB_Action_ 3
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Reserved_ 4
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Unexpected_GearIntervention_ 5
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Reserved_ 6
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_$$__Invalid_ 7
#define DB_ESP7_HS_CAN_$_LgtCtrlrFailr_SendType 0
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Off_ 0
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Standby_ 1
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 2
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 3
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Active_AutomaticPark_ 4
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 5
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Reserved_ 6
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_$$__Invalid_ 7
#define DB_ESP7_HS_CAN_$_LgtCtrlrSts_SendType 0
#define DB_ESP7_HS_CAN_$_RollingCounter_ESP7_$$__Valid_value_ 0
#define DB_ESP7_HS_CAN_$_RollingCounter_ESP7_$$__Invalid_value_ 15
#define DB_ESP7_HS_CAN_$_RollingCounter_ESP7_SendType 0
#pragma warning(default : 4005)

void DB_ESP7_HS_CAN_Init(DB_ESP7_HS_CAN * pMsg);
int DB_ESP7_HS_CAN_Transmit(DB_ESP7_HS_CAN * pMsg);
int DB_ESP7_HS_CAN_Transmit_raw(DB_ESP7_HS_CAN * pMsg);
int DB_ESP7_HS_CAN_UpdateBytesFromSignals(DB_ESP7_HS_CAN * pMsg);
int DB_ESP7_HS_CAN_UpdateBytesFromRawSignals(DB_ESP7_HS_CAN * pMsg);
#define DB_ESP7_HS_CAN_CheckSum_ESP7_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP7_HS_CAN_Index, 0, dPhysicalValue);
#define DB_ESP7_HS_CAN_ESP_MEBBrkAvail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP7_HS_CAN_Index, 1, dPhysicalValue);
#define DB_ESP7_HS_CAN_LgtCtrlrAvail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP7_HS_CAN_Index, 2, dPhysicalValue);
#define DB_ESP7_HS_CAN_LgtCtrlrFailr_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP7_HS_CAN_Index, 3, dPhysicalValue);
#define DB_ESP7_HS_CAN_LgtCtrlrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP7_HS_CAN_Index, 4, dPhysicalValue);
#define DB_ESP7_HS_CAN_RollingCounter_ESP7_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_ESP7_HS_CAN_Index, 5, dPhysicalValue);
#define DB_ESP7_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_ESP7_HS_CAN_Index, 0)
#define DB_ESP7_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_ESP7_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_HUT15_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double HUT_APSPrkgModSeln; /// Min: 0 Max: 3 Units: 
    BYTE HUT_APSPrkgModSeln_raw;
    double APSPrkgTypSeln; /// Min: 0 Max: 3 Units: 
    BYTE APSPrkgTypSeln_raw;
    double APSSwtReq_VR; /// Min: 0 Max: 3 Units: 
    BYTE APSSwtReq_VR_raw;
    double SDWSwtSet; /// Min: 0 Max: 1 Units: 
    BYTE SDWSwtSet_raw;
} DB_HUT15_HS_CAN;

#define DB_HUT15_HS_CAN_SendType 2
#define DB_HUT15_HS_CAN_SendRateFast 0
#define DB_HUT15_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__No_Select_ 0
#define DB_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__Select_parking_in_ 1
#define DB_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__Select_parking_out_ 2
#define DB_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_$$__Reserved_ 3
#define DB_HUT15_HS_CAN_$_HUT_APSPrkgModSeln_SendType 1
#define DB_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__No_Select_ 0
#define DB_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__Select_parallel_parking_ 1
#define DB_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__Select_vertical_parking_ 2
#define DB_HUT15_HS_CAN_$_APSPrkgTypSeln_$$__Reserved_ 3
#define DB_HUT15_HS_CAN_$_APSPrkgTypSeln_SendType 1
#define DB_HUT15_HS_CAN_$_APSSwtReq_VR_$$__No_action_ 0
#define DB_HUT15_HS_CAN_$_APSSwtReq_VR_$$__off_ 1
#define DB_HUT15_HS_CAN_$_APSSwtReq_VR_$$__on_ 2
#define DB_HUT15_HS_CAN_$_APSSwtReq_VR_$$__Reserved_ 3
#define DB_HUT15_HS_CAN_$_APSSwtReq_VR_SendType 1
#define DB_HUT15_HS_CAN_$_SDWSwtSet_$$__No_Request_ 0
#define DB_HUT15_HS_CAN_$_SDWSwtSet_$$__Request_ 1
#define DB_HUT15_HS_CAN_$_SDWSwtSet_SendType 1
#pragma warning(default : 4005)

void DB_HUT15_HS_CAN_Init(DB_HUT15_HS_CAN * pMsg);
int DB_HUT15_HS_CAN_Transmit(DB_HUT15_HS_CAN * pMsg);
int DB_HUT15_HS_CAN_Transmit_raw(DB_HUT15_HS_CAN * pMsg);
int DB_HUT15_HS_CAN_UpdateBytesFromSignals(DB_HUT15_HS_CAN * pMsg);
int DB_HUT15_HS_CAN_UpdateBytesFromRawSignals(DB_HUT15_HS_CAN * pMsg);
#define DB_HUT15_HS_CAN_HUT_APSPrkgModSeln_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT15_HS_CAN_Index, 0, dPhysicalValue);
#define DB_HUT15_HS_CAN_APSPrkgTypSeln_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT15_HS_CAN_Index, 1, dPhysicalValue);
#define DB_HUT15_HS_CAN_APSSwtReq_VR_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT15_HS_CAN_Index, 2, dPhysicalValue);
#define DB_HUT15_HS_CAN_SDWSwtSet_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT15_HS_CAN_Index, 3, dPhysicalValue);
#define DB_HUT15_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_HUT15_HS_CAN_Index, 0)
#define DB_HUT15_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_HUT15_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_HUT32_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double ScrnOpSts; /// Min: 0 Max: 3 Units: 
    BYTE ScrnOpSts_raw;
    double XLvl; /// Min: 0 Max: 2047 Units: 
    WORD XLvl_raw;
    double YLvl; /// Min: 0 Max: 2047 Units: 
    WORD YLvl_raw;
    double DetVideoLost; /// Min: 0 Max: 1 Units: 
    BYTE DetVideoLost_raw;
    double CheckSum_HUT32; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_HUT32_raw;
    double PrkgCtrlModReqValid; /// Min: 0 Max: 1 Units: 
    BYTE PrkgCtrlModReqValid_raw;
    double PrkgCtrlModReq; /// Min: 0 Max: 7 Units: 
    BYTE PrkgCtrlModReq_raw;
    double ContnPrkgReqValid; /// Min: 0 Max: 1 Units: 
    BYTE ContnPrkgReqValid_raw;
    double ContnPrkgReq; /// Min: 0 Max: 1 Units: 
    BYTE ContnPrkgReq_raw;
    double RollingCounter_HUT32; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_HUT32_raw;
} DB_HUT32_HS_CAN;

#define DB_HUT32_HS_CAN_SendType 0
#define DB_HUT32_HS_CAN_SendRate 50
#define DB_HUT32_HS_CAN_SendRateFast 0
#define DB_HUT32_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_HUT32_HS_CAN_$_ScrnOpSts_$$__Release_ 0
#define DB_HUT32_HS_CAN_$_ScrnOpSts_$$__Pressed_ 1
#define DB_HUT32_HS_CAN_$_ScrnOpSts_$$__Hold_ 2
#define DB_HUT32_HS_CAN_$_ScrnOpSts_$$__Reserved_ 3
#define DB_HUT32_HS_CAN_$_ScrnOpSts_SendType 0
#define DB_HUT32_HS_CAN_$_XLvl_$$__Valid_value_ 0
#define DB_HUT32_HS_CAN_$_XLvl_$$__Invalid_ 1961
#define DB_HUT32_HS_CAN_$_XLvl_SendType 0
#define DB_HUT32_HS_CAN_$_YLvl_$$__Valid_value_ 0
#define DB_HUT32_HS_CAN_$_YLvl_$$__Invalid_ 721
#define DB_HUT32_HS_CAN_$_YLvl_SendType 0
#define DB_HUT32_HS_CAN_$_DetVideoLost_$$__Nomal_ 0
#define DB_HUT32_HS_CAN_$_DetVideoLost_$$__Video_lost_ 1
#define DB_HUT32_HS_CAN_$_DetVideoLost_SendType 0
#define DB_HUT32_HS_CAN_$_CheckSum_HUT32_$$__Valid_value_ 0
#define DB_HUT32_HS_CAN_$_CheckSum_HUT32_SendType 0
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReqValid_$$__valid_ 0
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReqValid_$$__invalid_ 1
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReqValid_SendType 0
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__No_action_ 0
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__Parking_in_car_ 1
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__Remote_parking_ 2
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReq_$$__Reserved_ 3
#define DB_HUT32_HS_CAN_$_PrkgCtrlModReq_SendType 0
#define DB_HUT32_HS_CAN_$_ContnPrkgReqValid_$$__valid_ 0
#define DB_HUT32_HS_CAN_$_ContnPrkgReqValid_$$__invalid_ 1
#define DB_HUT32_HS_CAN_$_ContnPrkgReqValid_SendType 0
#define DB_HUT32_HS_CAN_$_ContnPrkgReq_$$__0x1_select_continue_parking_ 0
#define DB_HUT32_HS_CAN_$_ContnPrkgReq_$$__cancle_parking_ 2
#define DB_HUT32_HS_CAN_$_ContnPrkgReq_$$__invalid_ 3
#define DB_HUT32_HS_CAN_$_ContnPrkgReq_SendType 0
#define DB_HUT32_HS_CAN_$_RollingCounter_HUT32_$$__Valid_value_ 0
#define DB_HUT32_HS_CAN_$_RollingCounter_HUT32_SendType 0
#pragma warning(default : 4005)

void DB_HUT32_HS_CAN_Init(DB_HUT32_HS_CAN * pMsg);
int DB_HUT32_HS_CAN_Transmit(DB_HUT32_HS_CAN * pMsg);
int DB_HUT32_HS_CAN_Transmit_raw(DB_HUT32_HS_CAN * pMsg);
int DB_HUT32_HS_CAN_UpdateBytesFromSignals(DB_HUT32_HS_CAN * pMsg);
int DB_HUT32_HS_CAN_UpdateBytesFromRawSignals(DB_HUT32_HS_CAN * pMsg);
#define DB_HUT32_HS_CAN_ScrnOpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 0, dPhysicalValue);
#define DB_HUT32_HS_CAN_XLvl_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 1, dPhysicalValue);
#define DB_HUT32_HS_CAN_YLvl_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 2, dPhysicalValue);
#define DB_HUT32_HS_CAN_DetVideoLost_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 3, dPhysicalValue);
#define DB_HUT32_HS_CAN_CheckSum_HUT32_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 4, dPhysicalValue);
#define DB_HUT32_HS_CAN_PrkgCtrlModReqValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 5, dPhysicalValue);
#define DB_HUT32_HS_CAN_PrkgCtrlModReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 6, dPhysicalValue);
#define DB_HUT32_HS_CAN_ContnPrkgReqValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 7, dPhysicalValue);
#define DB_HUT32_HS_CAN_ContnPrkgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 8, dPhysicalValue);
#define DB_HUT32_HS_CAN_RollingCounter_HUT32_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT32_HS_CAN_Index, 9, dPhysicalValue);
#define DB_HUT32_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_HUT32_HS_CAN_Index, 0)
#define DB_HUT32_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_HUT32_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_HUT33_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double PrkInDirChoice; /// Min: 0 Max: 7 Units: 
    BYTE PrkInDirChoice_raw;
    double PathLrngFinshCmd; /// Min: 0 Max: 1 Units: 
    BYTE PathLrngFinshCmd_raw;
    double PathLrngStartCmd; /// Min: 0 Max: 1 Units: 
    BYTE PathLrngStartCmd_raw;
    double SelPrkOutDirReq; /// Min: 0 Max: 7 Units: 
    BYTE SelPrkOutDirReq_raw;
    double StartPrkgPath2Cmd; /// Min: 0 Max: 1 Units: 
    BYTE StartPrkgPath2Cmd_raw;
    double DeletePath2Cmd; /// Min: 0 Max: 1 Units: 
    BYTE DeletePath2Cmd_raw;
    double StartPrkgPath1Cmd; /// Min: 0 Max: 1 Units: 
    BYTE StartPrkgPath1Cmd_raw;
    double DeletePath1Cmd; /// Min: 0 Max: 1 Units: 
    BYTE DeletePath1Cmd_raw;
    double SelPrkgFctnCmd; /// Min: 0 Max: 7 Units: 
    BYTE SelPrkgFctnCmd_raw;
    double ParkMdlCmd; /// Min: 0 Max: 1 Units: 
    BYTE ParkMdlCmd_raw;
    double BackReq_APS; /// Min: 0 Max: 1 Units: 
    BYTE BackReq_APS_raw;
} DB_HUT33_HS_CAN;

#define DB_HUT33_HS_CAN_SendType 2
#define DB_HUT33_HS_CAN_SendRateFast 0
#define DB_HUT33_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_HUT33_HS_CAN_$_PrkInDirChoice_$$__None_ 0
#define DB_HUT33_HS_CAN_$_PrkInDirChoice_$$__Tail_in_ 1
#define DB_HUT33_HS_CAN_$_PrkInDirChoice_$$__Head_in__ 2
#define DB_HUT33_HS_CAN_$_PrkInDirChoice_$$__Reserved_ 3
#define DB_HUT33_HS_CAN_$_PrkInDirChoice_SendType 1
#define DB_HUT33_HS_CAN_$_PathLrngFinshCmd_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_PathLrngFinshCmd_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_PathLrngFinshCmd_SendType 1
#define DB_HUT33_HS_CAN_$_PathLrngStartCmd_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_PathLrngStartCmd_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_PathLrngStartCmd_SendType 1
#define DB_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__No_selection_ 0
#define DB_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_front_vertical_head_out_ 1
#define DB_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_rear_vertical_tail_out_ 2
#define DB_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_left_parallel_left_out__ 3
#define DB_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Park_out_right_parallel_right_out_ 4
#define DB_HUT33_HS_CAN_$_SelPrkOutDirReq_$$__Reserved_ 5
#define DB_HUT33_HS_CAN_$_SelPrkOutDirReq_SendType 1
#define DB_HUT33_HS_CAN_$_StartPrkgPath2Cmd_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_StartPrkgPath2Cmd_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_StartPrkgPath2Cmd_SendType 1
#define DB_HUT33_HS_CAN_$_DeletePath2Cmd_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_DeletePath2Cmd_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_DeletePath2Cmd_SendType 1
#define DB_HUT33_HS_CAN_$_StartPrkgPath1Cmd_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_StartPrkgPath1Cmd_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_StartPrkgPath1Cmd_SendType 1
#define DB_HUT33_HS_CAN_$_DeletePath1Cmd_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_DeletePath1Cmd_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_DeletePath1Cmd_SendType 1
#define DB_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__No_selection_ 0
#define DB_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_APA_parking_ 1
#define DB_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_P2P_parking_ 2
#define DB_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_Explore_Forward_ 3
#define DB_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Select_drive_back_ 4
#define DB_HUT33_HS_CAN_$_SelPrkgFctnCmd_$$__Reserved_ 5
#define DB_HUT33_HS_CAN_$_SelPrkgFctnCmd_SendType 1
#define DB_HUT33_HS_CAN_$_ParkMdlCmd_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_ParkMdlCmd_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_ParkMdlCmd_SendType 1
#define DB_HUT33_HS_CAN_$_BackReq_APS_$$__No_request_ 0
#define DB_HUT33_HS_CAN_$_BackReq_APS_$$__Request_ 1
#define DB_HUT33_HS_CAN_$_BackReq_APS_SendType 1
#pragma warning(default : 4005)

void DB_HUT33_HS_CAN_Init(DB_HUT33_HS_CAN * pMsg);
int DB_HUT33_HS_CAN_Transmit(DB_HUT33_HS_CAN * pMsg);
int DB_HUT33_HS_CAN_Transmit_raw(DB_HUT33_HS_CAN * pMsg);
int DB_HUT33_HS_CAN_UpdateBytesFromSignals(DB_HUT33_HS_CAN * pMsg);
int DB_HUT33_HS_CAN_UpdateBytesFromRawSignals(DB_HUT33_HS_CAN * pMsg);
#define DB_HUT33_HS_CAN_PrkInDirChoice_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 0, dPhysicalValue);
#define DB_HUT33_HS_CAN_PathLrngFinshCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 1, dPhysicalValue);
#define DB_HUT33_HS_CAN_PathLrngStartCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 2, dPhysicalValue);
#define DB_HUT33_HS_CAN_SelPrkOutDirReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 3, dPhysicalValue);
#define DB_HUT33_HS_CAN_StartPrkgPath2Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 4, dPhysicalValue);
#define DB_HUT33_HS_CAN_DeletePath2Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 5, dPhysicalValue);
#define DB_HUT33_HS_CAN_StartPrkgPath1Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 6, dPhysicalValue);
#define DB_HUT33_HS_CAN_DeletePath1Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 7, dPhysicalValue);
#define DB_HUT33_HS_CAN_SelPrkgFctnCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 8, dPhysicalValue);
#define DB_HUT33_HS_CAN_ParkMdlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 9, dPhysicalValue);
#define DB_HUT33_HS_CAN_BackReq_APS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT33_HS_CAN_Index, 10, dPhysicalValue);
#define DB_HUT33_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_HUT33_HS_CAN_Index, 0)
#define DB_HUT33_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_HUT33_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_HUT6_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double LaneCalActvtCmd; /// Min: 0 Max: 1 Units: 
    BYTE LaneCalActvtCmd_raw;
    double MODChgReq; /// Min: 0 Max: 1 Units: 
    BYTE MODChgReq_raw;
    double Radar_DispCmd; /// Min: 0 Max: 1 Units: 
    BYTE Radar_DispCmd_raw;
    double Guid_Ovl_Display_Cmd; /// Min: 0 Max: 1 Units: 
    BYTE Guid_Ovl_Display_Cmd_raw;
    double Sgl_View_Sel; /// Min: 0 Max: 15 Units: 
    BYTE Sgl_View_Sel_raw;
    double SwToFieldCalRstCmd; /// Min: 0 Max: 1 Units: 
    BYTE SwToFieldCalRstCmd_raw;
    double AutoViewChgCmd; /// Min: 0 Max: 1 Units: 
    BYTE AutoViewChgCmd_raw;
    double MdlColrChgCmd; /// Min: 0 Max: 1 Units: 
    BYTE MdlColrChgCmd_raw;
    double CarMdlTrsprcySwtCmd; /// Min: 0 Max: 1 Units: 
    BYTE CarMdlTrsprcySwtCmd_raw;
    double CarMdlDispCmd; /// Min: 0 Max: 1 Units: 
    BYTE CarMdlDispCmd_raw;
    double AutoAVMSwSet_Cmd; /// Min: 0 Max: 1 Units: 
    BYTE AutoAVMSwSet_Cmd_raw;
    double FPAS_AutoModSwt; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_AutoModSwt_raw;
    double MEBSwtSet; /// Min: 0 Max: 1 Units: 
    BYTE MEBSwtSet_raw;
    double WshSoftSwt; /// Min: 0 Max: 1 Units: 
    BYTE WshSoftSwt_raw;
    double View_SoftswitchCmd; /// Min: 0 Max: 1 Units: 
    BYTE View_SoftswitchCmd_raw;
} DB_HUT6_HS_CAN;

#define DB_HUT6_HS_CAN_SendType 2
#define DB_HUT6_HS_CAN_SendRateFast 0
#define DB_HUT6_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_HUT6_HS_CAN_$_LaneCalActvtCmd_$$__Off_ 0
#define DB_HUT6_HS_CAN_$_LaneCalActvtCmd_$$__On_ 1
#define DB_HUT6_HS_CAN_$_LaneCalActvtCmd_SendType 1
#define DB_HUT6_HS_CAN_$_MODChgReq_$$__No_request_ 0
#define DB_HUT6_HS_CAN_$_MODChgReq_$$__Request_ 1
#define DB_HUT6_HS_CAN_$_MODChgReq_SendType 1
#define DB_HUT6_HS_CAN_$_Radar_DispCmd_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_Radar_DispCmd_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_Radar_DispCmd_SendType 1
#define DB_HUT6_HS_CAN_$_Guid_Ovl_Display_Cmd_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_Guid_Ovl_Display_Cmd_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_Guid_Ovl_Display_Cmd_SendType 1
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__No_Commands_ 0
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Front_Button_ 1
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Rear_Button_ 2
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Left_Button__ 3
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Right_Button_ 4
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Left_Front__Button_ 5
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Right_Front_Button_ 6
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Left_Back_Button_ 7
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_2D_Right_Back_Button_ 8
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Touch_return_Button_ 9
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Free_3D_Button__TBD__ 10
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_$$__Reserved_ 11
#define DB_HUT6_HS_CAN_$_Sgl_View_Sel_SendType 1
#define DB_HUT6_HS_CAN_$_SwToFieldCalRstCmd_$$__Off_ 0
#define DB_HUT6_HS_CAN_$_SwToFieldCalRstCmd_$$__On_ 1
#define DB_HUT6_HS_CAN_$_SwToFieldCalRstCmd_SendType 1
#define DB_HUT6_HS_CAN_$_AutoViewChgCmd_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_AutoViewChgCmd_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_AutoViewChgCmd_SendType 1
#define DB_HUT6_HS_CAN_$_MdlColrChgCmd_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_MdlColrChgCmd_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_MdlColrChgCmd_SendType 1
#define DB_HUT6_HS_CAN_$_CarMdlTrsprcySwtCmd_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_CarMdlTrsprcySwtCmd_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_CarMdlTrsprcySwtCmd_SendType 1
#define DB_HUT6_HS_CAN_$_CarMdlDispCmd_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_CarMdlDispCmd_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_CarMdlDispCmd_SendType 1
#define DB_HUT6_HS_CAN_$_AutoAVMSwSet_Cmd_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_AutoAVMSwSet_Cmd_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_AutoAVMSwSet_Cmd_SendType 1
#define DB_HUT6_HS_CAN_$_FPAS_AutoModSwt_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_FPAS_AutoModSwt_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_FPAS_AutoModSwt_SendType 1
#define DB_HUT6_HS_CAN_$_MEBSwtSet_$$__No_Request_ 0
#define DB_HUT6_HS_CAN_$_MEBSwtSet_$$__Request__ 1
#define DB_HUT6_HS_CAN_$_MEBSwtSet_SendType 1
#define DB_HUT6_HS_CAN_$_WshSoftSwt_$$__No_request_ 0
#define DB_HUT6_HS_CAN_$_WshSoftSwt_$$__Request_ 1
#define DB_HUT6_HS_CAN_$_WshSoftSwt_SendType 1
#define DB_HUT6_HS_CAN_$_View_SoftswitchCmd_$$__No_request_ 0
#define DB_HUT6_HS_CAN_$_View_SoftswitchCmd_$$__Request_ 1
#define DB_HUT6_HS_CAN_$_View_SoftswitchCmd_SendType 1
#pragma warning(default : 4005)

void DB_HUT6_HS_CAN_Init(DB_HUT6_HS_CAN * pMsg);
int DB_HUT6_HS_CAN_Transmit(DB_HUT6_HS_CAN * pMsg);
int DB_HUT6_HS_CAN_Transmit_raw(DB_HUT6_HS_CAN * pMsg);
int DB_HUT6_HS_CAN_UpdateBytesFromSignals(DB_HUT6_HS_CAN * pMsg);
int DB_HUT6_HS_CAN_UpdateBytesFromRawSignals(DB_HUT6_HS_CAN * pMsg);
#define DB_HUT6_HS_CAN_LaneCalActvtCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 0, dPhysicalValue);
#define DB_HUT6_HS_CAN_MODChgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 1, dPhysicalValue);
#define DB_HUT6_HS_CAN_Radar_DispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 2, dPhysicalValue);
#define DB_HUT6_HS_CAN_Guid_Ovl_Display_Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 3, dPhysicalValue);
#define DB_HUT6_HS_CAN_Sgl_View_Sel_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 4, dPhysicalValue);
#define DB_HUT6_HS_CAN_SwToFieldCalRstCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 5, dPhysicalValue);
#define DB_HUT6_HS_CAN_AutoViewChgCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 6, dPhysicalValue);
#define DB_HUT6_HS_CAN_MdlColrChgCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 7, dPhysicalValue);
#define DB_HUT6_HS_CAN_CarMdlTrsprcySwtCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 8, dPhysicalValue);
#define DB_HUT6_HS_CAN_CarMdlDispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 9, dPhysicalValue);
#define DB_HUT6_HS_CAN_AutoAVMSwSet_Cmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 10, dPhysicalValue);
#define DB_HUT6_HS_CAN_FPAS_AutoModSwt_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 11, dPhysicalValue);
#define DB_HUT6_HS_CAN_MEBSwtSet_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 12, dPhysicalValue);
#define DB_HUT6_HS_CAN_WshSoftSwt_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 13, dPhysicalValue);
#define DB_HUT6_HS_CAN_View_SoftswitchCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT6_HS_CAN_Index, 14, dPhysicalValue);
#define DB_HUT6_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_HUT6_HS_CAN_Index, 0)
#define DB_HUT6_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_HUT6_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_HUT7_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double TimeSet_Hour; /// Min: 0 Max: 31 Units: 
    BYTE TimeSet_Hour_raw;
    double TimeSet_Minutes; /// Min: 0 Max: 63 Units: 
    BYTE TimeSet_Minutes_raw;
    double TimeSet_Second; /// Min: 0 Max: 63 Units: 
    BYTE TimeSet_Second_raw;
    double TimeSet_Year_Left; /// Min: 0 Max: 15 Units: 
    BYTE TimeSet_Year_Left_raw;
    double TimeSet_Year_Right; /// Min: 0 Max: 15 Units: 
    BYTE TimeSet_Year_Right_raw;
    double TimeSet_Month; /// Min: 0 Max: 15 Units: 
    BYTE TimeSet_Month_raw;
    double TimeSet_Day; /// Min: 0 Max: 31 Units: 
    BYTE TimeSet_Day_raw;
    double TimIndcn; /// Min: 0 Max: 1 Units: 
    BYTE TimIndcn_raw;
    double TimeMod; /// Min: 0 Max: 1 Units: 
    BYTE TimeMod_raw;
} DB_HUT7_HS_CAN;

#define DB_HUT7_HS_CAN_SendType 2
#define DB_HUT7_HS_CAN_SendRateFast 0
#define DB_HUT7_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_HUT7_HS_CAN_$_TimeSet_Hour_$$__Valid_hour_ 0
#define DB_HUT7_HS_CAN_$_TimeSet_Hour_$$__Invalid_ 24
#define DB_HUT7_HS_CAN_$_TimeSet_Hour_SendType 1
#define DB_HUT7_HS_CAN_$_TimeSet_Minutes_$$__Valid_min_ 0
#define DB_HUT7_HS_CAN_$_TimeSet_Minutes_$$__Invalid_ 60
#define DB_HUT7_HS_CAN_$_TimeSet_Minutes_SendType 1
#define DB_HUT7_HS_CAN_$_TimeSet_Second_$$__Valid_second_ 0
#define DB_HUT7_HS_CAN_$_TimeSet_Second_$$__Invalid_ 60
#define DB_HUT7_HS_CAN_$_TimeSet_Second_SendType 1
#define DB_HUT7_HS_CAN_$_TimeSet_Year_Left_$$__Valid_ 0
#define DB_HUT7_HS_CAN_$_TimeSet_Year_Left_$$__Invalid_ 10
#define DB_HUT7_HS_CAN_$_TimeSet_Year_Left_SendType 1
#define DB_HUT7_HS_CAN_$_TimeSet_Year_Right_$$__Valid_year_ 0
#define DB_HUT7_HS_CAN_$_TimeSet_Year_Right_$$__Invalid_ 10
#define DB_HUT7_HS_CAN_$_TimeSet_Year_Right_SendType 1
#define DB_HUT7_HS_CAN_$_TimeSet_Month_$$__Invalid_ 0
#define DB_HUT7_HS_CAN_$_TimeSet_Month_$$__Valid_month_ 1
#define DB_HUT7_HS_CAN_$_TimeSet_Month_$$__Reserved_ 13
#define DB_HUT7_HS_CAN_$_TimeSet_Month_SendType 1
#define DB_HUT7_HS_CAN_$_TimeSet_Day_$$__Invalid_ 0
#define DB_HUT7_HS_CAN_$_TimeSet_Day_$$__Valid_day_ 1
#define DB_HUT7_HS_CAN_$_TimeSet_Day_SendType 1
#define DB_HUT7_HS_CAN_$_TimIndcn_$$__am_ 0
#define DB_HUT7_HS_CAN_$_TimIndcn_$$__pm_ 1
#define DB_HUT7_HS_CAN_$_TimIndcn_SendType 1
#define DB_HUT7_HS_CAN_$_TimeMod_$$__24_ 0
#define DB_HUT7_HS_CAN_$_TimeMod_$$__12_ 1
#define DB_HUT7_HS_CAN_$_TimeMod_SendType 1
#pragma warning(default : 4005)

void DB_HUT7_HS_CAN_Init(DB_HUT7_HS_CAN * pMsg);
int DB_HUT7_HS_CAN_Transmit(DB_HUT7_HS_CAN * pMsg);
int DB_HUT7_HS_CAN_Transmit_raw(DB_HUT7_HS_CAN * pMsg);
int DB_HUT7_HS_CAN_UpdateBytesFromSignals(DB_HUT7_HS_CAN * pMsg);
int DB_HUT7_HS_CAN_UpdateBytesFromRawSignals(DB_HUT7_HS_CAN * pMsg);
#define DB_HUT7_HS_CAN_TimeSet_Hour_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 0, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimeSet_Minutes_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 1, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimeSet_Second_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 2, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimeSet_Year_Left_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 3, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimeSet_Year_Right_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 4, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimeSet_Month_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 5, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimeSet_Day_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 6, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 7, dPhysicalValue);
#define DB_HUT7_HS_CAN_TimeMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HUT7_HS_CAN_Index, 8, dPhysicalValue);
#define DB_HUT7_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_HUT7_HS_CAN_Index, 0)
#define DB_HUT7_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_HUT7_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_PDCM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RSDS_Right_LED_status; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_Right_LED_status_raw;
} DB_PDCM1_HS_CAN;

#define DB_PDCM1_HS_CAN_SendType 0
#define DB_PDCM1_HS_CAN_SendRate 100
#define DB_PDCM1_HS_CAN_SendRateFast 0
#define DB_PDCM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_PDCM1_HS_CAN_$_RSDS_Right_LED_status_$$__no_error_ 0
#define DB_PDCM1_HS_CAN_$_RSDS_Right_LED_status_$$__error_ 1
#define DB_PDCM1_HS_CAN_$_RSDS_Right_LED_status_SendType 0
#pragma warning(default : 4005)

void DB_PDCM1_HS_CAN_Init(DB_PDCM1_HS_CAN * pMsg);
int DB_PDCM1_HS_CAN_Transmit(DB_PDCM1_HS_CAN * pMsg);
int DB_PDCM1_HS_CAN_Transmit_raw(DB_PDCM1_HS_CAN * pMsg);
int DB_PDCM1_HS_CAN_UpdateBytesFromSignals(DB_PDCM1_HS_CAN * pMsg);
int DB_PDCM1_HS_CAN_UpdateBytesFromRawSignals(DB_PDCM1_HS_CAN * pMsg);
#define DB_PDCM1_HS_CAN_RSDS_Right_LED_status_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_PDCM1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_PDCM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_PDCM1_HS_CAN_Index, 0)
#define DB_PDCM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_PDCM1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_PEPS2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double SystemPowerMode; /// Min: 0 Max: 3 Units: 
    BYTE SystemPowerMode_raw;
    double SystemPowerModeValid; /// Min: 0 Max: 1 Units: 
    BYTE SystemPowerModeValid_raw;
    double PEPS_PROStat; /// Min: 0 Max: 7 Units: 
    BYTE PEPS_PROStat_raw;
} DB_PEPS2_HS_CAN;

#define DB_PEPS2_HS_CAN_SendType 0
#define DB_PEPS2_HS_CAN_SendRate 50
#define DB_PEPS2_HS_CAN_SendRateFast 0
#define DB_PEPS2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_PEPS2_HS_CAN_$_SystemPowerMode_$$__OFF_ 0
#define DB_PEPS2_HS_CAN_$_SystemPowerMode_$$__ACC_ 1
#define DB_PEPS2_HS_CAN_$_SystemPowerMode_$$__ON_ 2
#define DB_PEPS2_HS_CAN_$_SystemPowerMode_$$__Crank_ 3
#define DB_PEPS2_HS_CAN_$_SystemPowerMode_SendType 0
#define DB_PEPS2_HS_CAN_$_SystemPowerModeValid_$$__Invalid_ 0
#define DB_PEPS2_HS_CAN_$_SystemPowerModeValid_$$__Valid_ 1
#define DB_PEPS2_HS_CAN_$_SystemPowerModeValid_SendType 0
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC___IGN1___IGN2_are_disconnected_ 0
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC_connected__others_are_disconnected_ 1
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN2_connected__others_are_disconnected_ 2
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC___IGN2_connected__IGN1_disconnected_ 3
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN1_connected__others_are_disconnected_ 4
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN1___ACC_connected__IGN2_disconnected_ 5
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__IGN1___IGN2_connected__ACC_disconnected_ 6
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_$$__ACC___IGN1___IGN2_connected_ 7
#define DB_PEPS2_HS_CAN_$_PEPS_PROStat_SendType 0
#pragma warning(default : 4005)

void DB_PEPS2_HS_CAN_Init(DB_PEPS2_HS_CAN * pMsg);
int DB_PEPS2_HS_CAN_Transmit(DB_PEPS2_HS_CAN * pMsg);
int DB_PEPS2_HS_CAN_Transmit_raw(DB_PEPS2_HS_CAN * pMsg);
int DB_PEPS2_HS_CAN_UpdateBytesFromSignals(DB_PEPS2_HS_CAN * pMsg);
int DB_PEPS2_HS_CAN_UpdateBytesFromRawSignals(DB_PEPS2_HS_CAN * pMsg);
#define DB_PEPS2_HS_CAN_SystemPowerMode_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_PEPS2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_PEPS2_HS_CAN_SystemPowerModeValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_PEPS2_HS_CAN_Index, 1, dPhysicalValue);
#define DB_PEPS2_HS_CAN_PEPS_PROStat_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_PEPS2_HS_CAN_Index, 2, dPhysicalValue);
#define DB_PEPS2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_PEPS2_HS_CAN_Index, 0)
#define DB_PEPS2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_PEPS2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_SAS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_SAS1; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_SAS1_raw;
    double SteerWheelAngle; /// Min: 0 Max: 780 Units: ?
    WORD SteerWheelAngle_raw;
    double SteerWheelAngleSign; /// Min: 0 Max: 1 Units: 
    BYTE SteerWheelAngleSign_raw;
    double SteerWheelSpd; /// Min: 0 Max: 1016 Units: ?s
    WORD SteerWheelSpd_raw;
    double SteerWheelSpdSign; /// Min: 0 Max: 1 Units: 
    BYTE SteerWheelSpdSign_raw;
    double SAS_Generation; /// Min: 0 Max: 254 Units: 
    BYTE SAS_Generation_raw;
    double SAS_Sts; /// Min: 0 Max: 3 Units: 
    BYTE SAS_Sts_raw;
    double RollingCounter_SAS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_SAS1_raw;
} DB_SAS1_HS_CAN;

#define DB_SAS1_HS_CAN_SendType 0
#define DB_SAS1_HS_CAN_SendRate 10
#define DB_SAS1_HS_CAN_SendRateFast 0
#define DB_SAS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_SAS1_HS_CAN_$_Checksum_SAS1_$$__Valid_value_ 0
#define DB_SAS1_HS_CAN_$_Checksum_SAS1_SendType 0
#define DB_SAS1_HS_CAN_$_SteerWheelAngle_$$__Valid_ 0
#define DB_SAS1_HS_CAN_$_SteerWheelAngle_$$__Reserved_ 7801
#define DB_SAS1_HS_CAN_$_SteerWheelAngle_$$__Invalid_ 32767
#define DB_SAS1_HS_CAN_$_SteerWheelAngle_SendType 0
#define DB_SAS1_HS_CAN_$_SteerWheelAngleSign_$$__Left__Positive__ 0
#define DB_SAS1_HS_CAN_$_SteerWheelAngleSign_$$__Right__Negative__ 1
#define DB_SAS1_HS_CAN_$_SteerWheelAngleSign_SendType 0
#define DB_SAS1_HS_CAN_$_SteerWheelSpd_$$__Valid_ 0
#define DB_SAS1_HS_CAN_$_SteerWheelSpd_$$__Reserved_ 10161
#define DB_SAS1_HS_CAN_$_SteerWheelSpd_$$__Invalid_ 32767
#define DB_SAS1_HS_CAN_$_SteerWheelSpd_SendType 0
#define DB_SAS1_HS_CAN_$_SteerWheelSpdSign_$$__Left__Positive__ 0
#define DB_SAS1_HS_CAN_$_SteerWheelSpdSign_$$__Right__Negative__ 1
#define DB_SAS1_HS_CAN_$_SteerWheelSpdSign_SendType 0
#define DB_SAS1_HS_CAN_$_SAS_Generation_$$__Valid_value_ 0
#define DB_SAS1_HS_CAN_$_SAS_Generation_$$__Invalid_value_ 255
#define DB_SAS1_HS_CAN_$_SAS_Generation_SendType 0
#define DB_SAS1_HS_CAN_$_SAS_Sts_$$__SAS_Angle_And_Speed_Correct_ 0
#define DB_SAS1_HS_CAN_$_SAS_Sts_$$__SAS_Not_Calibrated_ 1
#define DB_SAS1_HS_CAN_$_SAS_Sts_$$__Intermittent_Error_Detected_ 2
#define DB_SAS1_HS_CAN_$_SAS_Sts_$$__Permanent_Error_Detected_ 3
#define DB_SAS1_HS_CAN_$_SAS_Sts_SendType 0
#define DB_SAS1_HS_CAN_$_RollingCounter_SAS1_$$__Valid_value_ 0
#define DB_SAS1_HS_CAN_$_RollingCounter_SAS1_SendType 0
#pragma warning(default : 4005)

void DB_SAS1_HS_CAN_Init(DB_SAS1_HS_CAN * pMsg);
int DB_SAS1_HS_CAN_Transmit(DB_SAS1_HS_CAN * pMsg);
int DB_SAS1_HS_CAN_Transmit_raw(DB_SAS1_HS_CAN * pMsg);
int DB_SAS1_HS_CAN_UpdateBytesFromSignals(DB_SAS1_HS_CAN * pMsg);
int DB_SAS1_HS_CAN_UpdateBytesFromRawSignals(DB_SAS1_HS_CAN * pMsg);
#define DB_SAS1_HS_CAN_Checksum_SAS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_SAS1_HS_CAN_SteerWheelAngle_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_SAS1_HS_CAN_SteerWheelAngleSign_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_SAS1_HS_CAN_SteerWheelSpd_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_SAS1_HS_CAN_SteerWheelSpdSign_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_SAS1_HS_CAN_SAS_Generation_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_SAS1_HS_CAN_SAS_Sts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_SAS1_HS_CAN_RollingCounter_SAS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_SAS1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_SAS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_SAS1_HS_CAN_Index, 0)
#define DB_SAS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_SAS1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_APS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_APS1; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_APS1_raw;
    double APS_BrkFctnMod; /// Min: 0 Max: 7 Units: 
    BYTE APS_BrkFctnMod_raw;
    double APS_ESP_TgtGearReq; /// Min: 0 Max: 7 Units: 
    BYTE APS_ESP_TgtGearReq_raw;
    double APS_ReqEPSTgtAngValid; /// Min: 0 Max: 1 Units: 
    BYTE APS_ReqEPSTgtAngValid_raw;
    double APS_ReqCtrlEPS; /// Min: 0 Max: 1 Units: 
    BYTE APS_ReqCtrlEPS_raw;
    double APS_ReqEPSTgtAng; /// Min: -3276.8 Max: 3276.7 Units: deg
    WORD APS_ReqEPSTgtAng_raw;
    double APS_ESP_SpdLimn; /// Min: 0 Max: 25.5 Units: kmh
    BYTE APS_ESP_SpdLimn_raw;
    double APS_ReqCtrlEPSVld; /// Min: 0 Max: 1 Units: 
    BYTE APS_ReqCtrlEPSVld_raw;
    double APS_BrkModSts; /// Min: 0 Max: 7 Units: 
    BYTE APS_BrkModSts_raw;
    double APS_ESP_BrkDistance; /// Min: 0 Max: 4095 Units: cm
    WORD APS_ESP_BrkDistance_raw;
    double APS_BrkCategory; /// Min: 0 Max: 3 Units: 
    BYTE APS_BrkCategory_raw;
    double APS_EPS_WorkSts; /// Min: 0 Max: 3 Units: 
    BYTE APS_EPS_WorkSts_raw;
    double RollingCounter_APS1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_APS1_raw;
} DB_APS1_HS_CAN;

#define DB_APS1_HS_CAN_SendType 0
#define DB_APS1_HS_CAN_SendRate 20
#define DB_APS1_HS_CAN_SendRateFast 0
#define DB_APS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_APS1_HS_CAN_$_Checksum_APS1_$$__Valid_Value_ 0
#define DB_APS1_HS_CAN_$_Checksum_APS1_SendType 0
#define DB_APS1_HS_CAN_$_APS_BrkFctnMod_$$__ParkAssist_NoSignal_ 0
#define DB_APS1_HS_CAN_$_APS_BrkFctnMod_$$__Reserved_ 1
#define DB_APS1_HS_CAN_$_APS_BrkFctnMod_$$__Reserved_ 2
#define DB_APS1_HS_CAN_$_APS_BrkFctnMod_$$__ParkAssist_AutomaticPark_ 3
#define DB_APS1_HS_CAN_$_APS_BrkFctnMod_$$__Reserved_ 4
#define DB_APS1_HS_CAN_$_APS_BrkFctnMod_SendType 0
#define DB_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__No_request_ 0
#define DB_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__P__ 1
#define DB_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__R_ 2
#define DB_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__N_ 3
#define DB_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__D_ 4
#define DB_APS1_HS_CAN_$_APS_ESP_TgtGearReq_$$__Reserved_ 5
#define DB_APS1_HS_CAN_$_APS_ESP_TgtGearReq_SendType 0
#define DB_APS1_HS_CAN_$_APS_ReqEPSTgtAngValid_$$__Invalid_ 0
#define DB_APS1_HS_CAN_$_APS_ReqEPSTgtAngValid_$$__Valid_ 1
#define DB_APS1_HS_CAN_$_APS_ReqEPSTgtAngValid_SendType 0
#define DB_APS1_HS_CAN_$_APS_ReqCtrlEPS_$$__No_request_ 0
#define DB_APS1_HS_CAN_$_APS_ReqCtrlEPS_$$__Request_ 1
#define DB_APS1_HS_CAN_$_APS_ReqCtrlEPS_SendType 0
#define DB_APS1_HS_CAN_$_APS_ReqEPSTgtAng_$$__Valid_value_ 0
#define DB_APS1_HS_CAN_$_APS_ReqEPSTgtAng_SendType 0
#define DB_APS1_HS_CAN_$_APS_ESP_SpdLimn_$$__Valid_Value_ 0
#define DB_APS1_HS_CAN_$_APS_ESP_SpdLimn_SendType 0
#define DB_APS1_HS_CAN_$_APS_ReqCtrlEPSVld_$$__Invalid_ 0
#define DB_APS1_HS_CAN_$_APS_ReqCtrlEPSVld_$$__Valid_ 1
#define DB_APS1_HS_CAN_$_APS_ReqCtrlEPSVld_SendType 0
#define DB_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Int_ 0
#define DB_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Standby_ 1
#define DB_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Active_ 2
#define DB_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_ManeuverFinished_ 3
#define DB_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Suspend__Reserved__ 4
#define DB_APS1_HS_CAN_$_APS_BrkModSts_$$__ParkAssist_Abort_ 5
#define DB_APS1_HS_CAN_$_APS_BrkModSts_$$__Reserved__ 6
#define DB_APS1_HS_CAN_$_APS_BrkModSts_SendType 0
#define DB_APS1_HS_CAN_$_APS_ESP_BrkDistance_$$__Valid_value_ 0
#define DB_APS1_HS_CAN_$_APS_ESP_BrkDistance_SendType 0
#define DB_APS1_HS_CAN_$_APS_BrkCategory_$$__ParkAssist_Idle_ 0
#define DB_APS1_HS_CAN_$_APS_BrkCategory_$$__ParkAssist_Comfort_ 1
#define DB_APS1_HS_CAN_$_APS_BrkCategory_$$__ParkAssist_Emergency_ 2
#define DB_APS1_HS_CAN_$_APS_BrkCategory_$$__Reserved_ 3
#define DB_APS1_HS_CAN_$_APS_BrkCategory_SendType 0
#define DB_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Disable_ 0
#define DB_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Enable_ 1
#define DB_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Active_ 2
#define DB_APS1_HS_CAN_$_APS_EPS_WorkSts_$$__Failed_ 3
#define DB_APS1_HS_CAN_$_APS_EPS_WorkSts_SendType 0
#define DB_APS1_HS_CAN_$_RollingCounter_APS1_$$__Valid_value_ 0
#define DB_APS1_HS_CAN_$_RollingCounter_APS1_$$__Invalid_value_ 15
#define DB_APS1_HS_CAN_$_RollingCounter_APS1_SendType 0
#pragma warning(default : 4005)

void DB_APS1_HS_CAN_Init(DB_APS1_HS_CAN * pMsg);
int DB_APS1_HS_CAN_Transmit(DB_APS1_HS_CAN * pMsg);
int DB_APS1_HS_CAN_Transmit_raw(DB_APS1_HS_CAN * pMsg);
int DB_APS1_HS_CAN_UpdateBytesFromSignals(DB_APS1_HS_CAN * pMsg);
int DB_APS1_HS_CAN_UpdateBytesFromRawSignals(DB_APS1_HS_CAN * pMsg);
#define DB_APS1_HS_CAN_Checksum_APS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_BrkFctnMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_ESP_TgtGearReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_ReqEPSTgtAngValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_ReqCtrlEPS_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_ReqEPSTgtAng_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_ESP_SpdLimn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_ReqCtrlEPSVld_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_BrkModSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_ESP_BrkDistance_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_BrkCategory_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_APS1_HS_CAN_APS_EPS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 11, dPhysicalValue);
#define DB_APS1_HS_CAN_RollingCounter_APS1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS1_HS_CAN_Index, 12, dPhysicalValue);
#define DB_APS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_APS1_HS_CAN_Index, 0)
#define DB_APS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_APS1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_APS3_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FAPA_FRSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_FRSideSnsrFltSts_raw;
    double FAPA_FLSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_FLSideSnsrFltSts_raw;
    double FAPA_RRSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_RRSideSnsrFltSts_raw;
    double FAPA_RLSideSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FAPA_RLSideSnsrFltSts_raw;
    double FAPA_ObjRiSideAr1; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr1_raw;
    double FAPA_ObjRiSideAr2; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr2_raw;
    double FAPA_ObjRiSideAr3; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr3_raw;
    double FAPA_ObjRiSideAr4; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr4_raw;
    double FAPA_ObjRiSideAr5; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjRiSideAr5_raw;
    double FAPA_ObjLeSideAr1; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr1_raw;
    double FAPA_ObjLeSideAr2; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr2_raw;
    double FAPA_ObjLeSideAr3; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr3_raw;
    double FAPA_ObjLeSideAr4; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr4_raw;
    double FAPA_ObjLeSideAr5; /// Min: 0 Max: 15 Units: 
    BYTE FAPA_ObjLeSideAr5_raw;
    double SDW_SoundIndcn; /// Min: 0 Max: 7 Units: 
    BYTE SDW_SoundIndcn_raw;
    double SDWActive; /// Min: 0 Max: 1 Units: 
    BYTE SDWActive_raw;
} DB_APS3_HS_CAN;

#define DB_APS3_HS_CAN_SendType 0
#define DB_APS3_HS_CAN_SendRate 100
#define DB_APS3_HS_CAN_SendRateFast 0
#define DB_APS3_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_APS3_HS_CAN_$_FAPA_FRSideSnsrFltSts_$$__Sensor_normal_ 0
#define DB_APS3_HS_CAN_$_FAPA_FRSideSnsrFltSts_$$__Sensor_fault_ 1
#define DB_APS3_HS_CAN_$_FAPA_FRSideSnsrFltSts_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_FLSideSnsrFltSts_$$__Sensor_normal_ 0
#define DB_APS3_HS_CAN_$_FAPA_FLSideSnsrFltSts_$$__Sensor_fault_ 1
#define DB_APS3_HS_CAN_$_FAPA_FLSideSnsrFltSts_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_RRSideSnsrFltSts_$$__Sensor_normal_ 0
#define DB_APS3_HS_CAN_$_FAPA_RRSideSnsrFltSts_$$__Sensor_fault_ 1
#define DB_APS3_HS_CAN_$_FAPA_RRSideSnsrFltSts_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_RLSideSnsrFltSts_$$__Sensor_normal_ 0
#define DB_APS3_HS_CAN_$_FAPA_RLSideSnsrFltSts_$$__Sensor_fault_ 1
#define DB_APS3_HS_CAN_$_FAPA_RLSideSnsrFltSts_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr1_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr2_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr3_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr4_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjRiSideAr5_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr1_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr2_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr3_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr4_SendType 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$__No_object_ 0
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_1__0_10cm_ 1
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_2__11_20cm_ 2
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_3__21_30cm_ 3
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_4__31_40cm_ 4
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_5__41_50cm_ 5
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$_Zone_6__51_60cm_ 6
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_$$__Reserved_ 7
#define DB_APS3_HS_CAN_$_FAPA_ObjLeSideAr5_SendType 0
#define DB_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_0___No_warning_ 0
#define DB_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_1___Long_beep_ 1
#define DB_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_2___1_5_Hz_ 2
#define DB_APS3_HS_CAN_$_SDW_SoundIndcn_$$__Tone_3___3Hz_ 3
#define DB_APS3_HS_CAN_$_SDW_SoundIndcn_SendType 0
#define DB_APS3_HS_CAN_$_SDWActive_$$__Inactive_ 0
#define DB_APS3_HS_CAN_$_SDWActive_$$__Active_ 1
#define DB_APS3_HS_CAN_$_SDWActive_SendType 0
#pragma warning(default : 4005)

void DB_APS3_HS_CAN_Init(DB_APS3_HS_CAN * pMsg);
int DB_APS3_HS_CAN_Transmit(DB_APS3_HS_CAN * pMsg);
int DB_APS3_HS_CAN_Transmit_raw(DB_APS3_HS_CAN * pMsg);
int DB_APS3_HS_CAN_UpdateBytesFromSignals(DB_APS3_HS_CAN * pMsg);
int DB_APS3_HS_CAN_UpdateBytesFromRawSignals(DB_APS3_HS_CAN * pMsg);
#define DB_APS3_HS_CAN_FAPA_FRSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 0, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_FLSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 1, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_RRSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 2, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_RLSideSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 3, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjRiSideAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 4, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjRiSideAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 5, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjRiSideAr3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 6, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjRiSideAr4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 7, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjRiSideAr5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 8, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjLeSideAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 9, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjLeSideAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 10, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjLeSideAr3_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 11, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjLeSideAr4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 12, dPhysicalValue);
#define DB_APS3_HS_CAN_FAPA_ObjLeSideAr5_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 13, dPhysicalValue);
#define DB_APS3_HS_CAN_SDW_SoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 14, dPhysicalValue);
#define DB_APS3_HS_CAN_SDWActive_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS3_HS_CAN_Index, 15, dPhysicalValue);
#define DB_APS3_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_APS3_HS_CAN_Index, 0)
#define DB_APS3_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_APS3_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_APS4_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_APS4; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_APS4_raw;
    double MEB_BrkgReqValue; /// Min: -10 Max: 2.75 Units: m/s^2
    BYTE MEB_BrkgReqValue_raw;
    double MEB_BrkgReq; /// Min: 0 Max: 1 Units: 
    BYTE MEB_BrkgReq_raw;
    double MEBErrSts; /// Min: 0 Max: 1 Units: 
    BYTE MEBErrSts_raw;
    double HAP_TCU_PrkgModeVald; /// Min: 0 Max: 1 Units: 
    BYTE HAP_TCU_PrkgModeVald_raw;
    double HAP_TCU_PrkgMode; /// Min: 0 Max: 3 Units: 
    BYTE HAP_TCU_PrkgMode_raw;
    double APS_PrkgMod; /// Min: 0 Max: 3 Units: 
    BYTE APS_PrkgMod_raw;
    double APS_WorkSts; /// Min: 0 Max: 7 Units: 
    BYTE APS_WorkSts_raw;
    double APS_ProcBar; /// Min: 0 Max: 127 Units: %
    BYTE APS_ProcBar_raw;
    double APS_SwtSts; /// Min: 0 Max: 1 Units: 
    BYTE APS_SwtSts_raw;
    double APS_SysSoundIndcn; /// Min: 0 Max: 7 Units: 
    BYTE APS_SysSoundIndcn_raw;
    double TurnLightsCmd; /// Min: 0 Max: 3 Units: 
    BYTE TurnLightsCmd_raw;
    double APS_SlotDisp; /// Min: 0 Max: 7 Units: 
    BYTE APS_SlotDisp_raw;
    double APS_PrkgTyp; /// Min: 0 Max: 3 Units: 
    BYTE APS_PrkgTyp_raw;
    double APS_TextDisp; /// Min: 0 Max: 63 Units: 
    BYTE APS_TextDisp_raw;
    double RollingCounter_APS4; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_APS4_raw;
} DB_APS4_HS_CAN;

#define DB_APS4_HS_CAN_SendType 0
#define DB_APS4_HS_CAN_SendRate 20
#define DB_APS4_HS_CAN_SendRateFast 0
#define DB_APS4_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_APS4_HS_CAN_$_Checksum_APS4_$$__Valid_Value_ 0
#define DB_APS4_HS_CAN_$_Checksum_APS4_SendType 0
#define DB_APS4_HS_CAN_$_MEB_BrkgReqValue_$$__Valid_value_ 0
#define DB_APS4_HS_CAN_$_MEB_BrkgReqValue_SendType 0
#define DB_APS4_HS_CAN_$_MEB_BrkgReq_$$__No_Request_ 0
#define DB_APS4_HS_CAN_$_MEB_BrkgReq_$$__Request_ 1
#define DB_APS4_HS_CAN_$_MEB_BrkgReq_SendType 0
#define DB_APS4_HS_CAN_$_MEBErrSts_$$__No_Error_ 0
#define DB_APS4_HS_CAN_$_MEBErrSts_$$__Error_ 1
#define DB_APS4_HS_CAN_$_MEBErrSts_SendType 0
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgModeVald_$$__valid_ 0
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgModeVald_$$__Invalid_ 1
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgModeVald_SendType 0
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__None_ 0
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__Parking_in_car_ 1
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__Remote_Parking_ 2
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgMode_$$__Reserved__ 3
#define DB_APS4_HS_CAN_$_HAP_TCU_PrkgMode_SendType 0
#define DB_APS4_HS_CAN_$_APS_PrkgMod_$$__None_ 0
#define DB_APS4_HS_CAN_$_APS_PrkgMod_$$__Parking_in_ 1
#define DB_APS4_HS_CAN_$_APS_PrkgMod_$$__Parking_out_ 2
#define DB_APS4_HS_CAN_$_APS_PrkgMod_$$__Reserved_ 3
#define DB_APS4_HS_CAN_$_APS_PrkgMod_SendType 0
#define DB_APS4_HS_CAN_$_APS_WorkSts_$$__Disable_ 0
#define DB_APS4_HS_CAN_$_APS_WorkSts_$$__Standby_ 1
#define DB_APS4_HS_CAN_$_APS_WorkSts_$$__Searching_ 2
#define DB_APS4_HS_CAN_$_APS_WorkSts_$$__Guidance_ 3
#define DB_APS4_HS_CAN_$_APS_WorkSts_$$__Failed_ 4
#define DB_APS4_HS_CAN_$_APS_WorkSts_$$__Wait_for_Engine_restart_ 5
#define DB_APS4_HS_CAN_$_APS_WorkSts_$$__Reserved_ 6
#define DB_APS4_HS_CAN_$_APS_WorkSts_SendType 0
#define DB_APS4_HS_CAN_$_APS_ProcBar_$$__0_100_ 0
#define DB_APS4_HS_CAN_$_APS_ProcBar_$$__Reserved_ 101
#define DB_APS4_HS_CAN_$_APS_ProcBar_$$__No_Display_ 127
#define DB_APS4_HS_CAN_$_APS_ProcBar_SendType 0
#define DB_APS4_HS_CAN_$_APS_SwtSts_$$__no_press_ 0
#define DB_APS4_HS_CAN_$_APS_SwtSts_$$__press_ 1
#define DB_APS4_HS_CAN_$_APS_SwtSts_SendType 0
#define DB_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_0___No_Warning_ 0
#define DB_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_1___APS_failed_tone_ 1
#define DB_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_2___APS_successful_tone_ 2
#define DB_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_3___APS_warning_tone_ 3
#define DB_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Tone_4___APS_request_tone_ 4
#define DB_APS4_HS_CAN_$_APS_SysSoundIndcn_$$__Reserved_ 5
#define DB_APS4_HS_CAN_$_APS_SysSoundIndcn_SendType 0
#define DB_APS4_HS_CAN_$_TurnLightsCmd_$$__No_Request_ 0
#define DB_APS4_HS_CAN_$_TurnLightsCmd_$$__LeftLight_On_ 1
#define DB_APS4_HS_CAN_$_TurnLightsCmd_$$__RightLight_On_ 2
#define DB_APS4_HS_CAN_$_TurnLightsCmd_$$__hazardLight_ON_ 3
#define DB_APS4_HS_CAN_$_TurnLightsCmd_SendType 0
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__No_parking_slot_ 0
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__Left_parallel_parking_slot_ 1
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__Left_vertical_parking_slot_ 2
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__Left_T_shape_parking_slot_ 3
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__Right_parallel_parking_slot_ 4
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__Right_vertical_parking_slot_ 5
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__Right_T_shape_parking_slot_ 6
#define DB_APS4_HS_CAN_$_APS_SlotDisp_$$__Reserved_ 7
#define DB_APS4_HS_CAN_$_APS_SlotDisp_SendType 0
#define DB_APS4_HS_CAN_$_APS_PrkgTyp_$$__None_ 0
#define DB_APS4_HS_CAN_$_APS_PrkgTyp_$$__Parallel_parking_ 1
#define DB_APS4_HS_CAN_$_APS_PrkgTyp_$$__Vertical_parking_ 2
#define DB_APS4_HS_CAN_$_APS_PrkgTyp_$$__Reserved_ 3
#define DB_APS4_HS_CAN_$_APS_PrkgTyp_SendType 0
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__No_Request_ 0
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Wrong_gear_position_to_start_parking_ 1
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Turn_D_to_search_for_slot_ 2
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_close_the_trunk_ 3
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_close_the_door_ 4
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_fasten_the_seat_belt_ 5
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_unfold_the_Mirror_ 6
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high_need__23km_h_ 7
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__System_error_Parking_sys_exits_ 8
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__control_unit_error_parking_sys_exits_ 9
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_brake_ 10
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_parking_mode_ 11
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_internal_parking_ 12
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_Slot_and_parking_mode_ 13
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_Slot_and__internal_park_ing_ 14
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_keep_braking_ 15
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Hands_off_the_steering_wheel_ 16
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Release_the_brake_ 17
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Auto_parking_be_ready_to_brake_ 18
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__parking_suspended_close_trunk_ 19
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__parking_suspended_close_door__ 20
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__parking_suspended_fasten_seat_belt_ 21
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Obstacles_Detected_ 22
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__brake_recovered_confirm_to_continue_ 23
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_sys_exits_ 24
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__parking_finished_ 25
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__interfered_by_driver_parking_quited_ 26
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__too_many_parking_times_parking_sys_exits_ 27
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_time_too_long_Parking_sys_exits_ 28
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__EPB_Applied_Parking_sys_exits_ 29
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_Clean_the_Camera_ 30
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Select_the_parking_mode_APA3__ 31
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Searching_the_right_slot_ 32
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Searching_the_left_slot_ 33
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_turn_D_to_search_for_parking_slot_ 34
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high__need__30km_h_ 35
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high_sys_exits_ 36
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Select_parking_type_ 37
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Long_press_switch_2s_to_enter_auto_parking_ 38
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_suspended__Please_release_the_gas_pedal_ 39
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_brake__And_long_press_switch_2s_to_continue_auto_parking_ 40
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_is_not_available_ 41
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_select_the_parking_direction_by_turning_the_turn_switch_ 42
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_brake__And_long_press_switch_2s_to_enter_auto_parking_ 43
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_sys_exits_ 44
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Parking_suspended__fold_the_Mirror_ 45
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 46
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__path_is_smooth_ 48
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_park_out_ 49
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_select_park_out_direction_ 50
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_get_off_the_car_with_keys_to_start_remote_parking_ 51
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_confirm_to_start_parking_ 52
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__please_keep_in_safe_distance_ 53
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__remote_connection_error_parking_sys_exits_ 54
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 55
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_study_begin_please_drive_the_car_ 64
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_ 65
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Confirm_study_finished_ 66
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_Path_too_long_ 67
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_Speed_too_high_ 68
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_com_munication_error_ 69
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_Path_error_ 70
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_learn_time_too_long_ 71
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_studying_failed_caused_by_inter_nal_error_ 72
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 73
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_ 80
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_Succeed_ 81
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_Path_too_short_ 82
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_communication_error_ 83
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_Path_error_ 84
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_Path_error_limit_storage_room_ 85
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_saving_failed_caused_by_internal_error_ 86
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 87
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_drive_to_path_start_point_ 96
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_matche_please_stop_ 97
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Please_select_play_back_mode_ 98
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_communication_error_ 99
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_path_error_ 100
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_long_time_no_action_ 101
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Path_match_failed_caused_by_internal_error_ 102
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 103
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__RDAS_Open__Turn_R_ 112
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__RDAS_running__be_ready_to_brake_ 113
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Near_the_bourn_ 114
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Arrive_at_the_bourn_ 115
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Speed_is_too_high_RDAS_sys_exits_ 116
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__System_error_RDAS_sys_exits_ 117
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__control_unit_error_RDAS_sys_exits_ 118
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__interfered_by_driver_parking_quited_ 119
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_for_RDAS_ 120
#define DB_APS4_HS_CAN_$_APS_TextDisp_$$__Reserved_ 128
#define DB_APS4_HS_CAN_$_APS_TextDisp_SendType 0
#define DB_APS4_HS_CAN_$_RollingCounter_APS4_$$__Valid_value_ 0
#define DB_APS4_HS_CAN_$_RollingCounter_APS4_$$__Invalid_value_ 15
#define DB_APS4_HS_CAN_$_RollingCounter_APS4_SendType 0
#pragma warning(default : 4005)

void DB_APS4_HS_CAN_Init(DB_APS4_HS_CAN * pMsg);
int DB_APS4_HS_CAN_Transmit(DB_APS4_HS_CAN * pMsg);
int DB_APS4_HS_CAN_Transmit_raw(DB_APS4_HS_CAN * pMsg);
int DB_APS4_HS_CAN_UpdateBytesFromSignals(DB_APS4_HS_CAN * pMsg);
int DB_APS4_HS_CAN_UpdateBytesFromRawSignals(DB_APS4_HS_CAN * pMsg);
#define DB_APS4_HS_CAN_Checksum_APS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 0, dPhysicalValue);
#define DB_APS4_HS_CAN_MEB_BrkgReqValue_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 1, dPhysicalValue);
#define DB_APS4_HS_CAN_MEB_BrkgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 2, dPhysicalValue);
#define DB_APS4_HS_CAN_MEBErrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 3, dPhysicalValue);
#define DB_APS4_HS_CAN_HAP_TCU_PrkgModeVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 4, dPhysicalValue);
#define DB_APS4_HS_CAN_HAP_TCU_PrkgMode_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 5, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_PrkgMod_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 6, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 7, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_ProcBar_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 8, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_SwtSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 9, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_SysSoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 10, dPhysicalValue);
#define DB_APS4_HS_CAN_TurnLightsCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 11, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_SlotDisp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 12, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_PrkgTyp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 13, dPhysicalValue);
#define DB_APS4_HS_CAN_APS_TextDisp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 14, dPhysicalValue);
#define DB_APS4_HS_CAN_RollingCounter_APS4_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_APS4_HS_CAN_Index, 15, dPhysicalValue);
#define DB_APS4_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_APS4_HS_CAN_Index, 0)
#define DB_APS4_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_APS4_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_HAP1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RmtPrkgReq; /// Min: 0 Max: 1 Units: 
    BYTE RmtPrkgReq_raw;
    double LParaPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE LParaPrkgOutVald_raw;
    double RParaPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE RParaPrkgOutVald_raw;
    double HeadVertPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE HeadVertPrkgOutVald_raw;
    double TailVertPrkgOutVald; /// Min: 0 Max: 1 Units: 
    BYTE TailVertPrkgOutVald_raw;
    double HAP_SwtDispCtrlCmd; /// Min: 0 Max: 7 Units: 
    BYTE HAP_SwtDispCtrlCmd_raw;
    double PASSwtReq; /// Min: 0 Max: 3 Units: 
    BYTE PASSwtReq_raw;
    double HAP_PrkgModCurrSts; /// Min: 0 Max: 15 Units: 
    BYTE HAP_PrkgModCurrSts_raw;
    double APS_MovgDirc; /// Min: 0 Max: 3 Units: 
    BYTE APS_MovgDirc_raw;
} DB_HAP1_HS_CAN;

#define DB_HAP1_HS_CAN_SendType 0
#define DB_HAP1_HS_CAN_SendRate 20
#define DB_HAP1_HS_CAN_SendRateFast 0
#define DB_HAP1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_HAP1_HS_CAN_$_RmtPrkgReq_$$__No_Request_ 0
#define DB_HAP1_HS_CAN_$_RmtPrkgReq_$$__Request_to_parking_in_ 1
#define DB_HAP1_HS_CAN_$_RmtPrkgReq_SendType 0
#define DB_HAP1_HS_CAN_$_LParaPrkgOutVald_$$__valid_ 0
#define DB_HAP1_HS_CAN_$_LParaPrkgOutVald_$$__Invalid_ 1
#define DB_HAP1_HS_CAN_$_LParaPrkgOutVald_SendType 0
#define DB_HAP1_HS_CAN_$_RParaPrkgOutVald_$$__valid_ 0
#define DB_HAP1_HS_CAN_$_RParaPrkgOutVald_$$__Invalid_ 1
#define DB_HAP1_HS_CAN_$_RParaPrkgOutVald_SendType 0
#define DB_HAP1_HS_CAN_$_HeadVertPrkgOutVald_$$__valid_ 0
#define DB_HAP1_HS_CAN_$_HeadVertPrkgOutVald_$$__Invalid_ 1
#define DB_HAP1_HS_CAN_$_HeadVertPrkgOutVald_SendType 0
#define DB_HAP1_HS_CAN_$_TailVertPrkgOutVald_$$__valid_ 0
#define DB_HAP1_HS_CAN_$_TailVertPrkgOutVald_$$__Invalid_ 1
#define DB_HAP1_HS_CAN_$_TailVertPrkgOutVald_SendType 0
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__no_display_ 0
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__park_out_direction_Select_menu_ 1
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__continue_park_menu_ 2
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__Study_finish_button_ 3
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__RDAS_distance_arrow_ 4
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__RDAS_active_distance_arrow_steering_ 5
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_$$__Reserved_ 6
#define DB_HAP1_HS_CAN_$_HAP_SwtDispCtrlCmd_SendType 0
#define DB_HAP1_HS_CAN_$_PASSwtReq_$$__NO_request_ 0
#define DB_HAP1_HS_CAN_$_PASSwtReq_$$__Request_to_close_ 1
#define DB_HAP1_HS_CAN_$_PASSwtReq_$$__Request_to_open_ 2
#define DB_HAP1_HS_CAN_$_PASSwtReq_$$__Reserved_ 3
#define DB_HAP1_HS_CAN_$_PASSwtReq_SendType 0
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__No_display_ 0
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_parallel_park_in_ 1
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_parallel_park_in_ 2
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_vert_park_in_ 3
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_vert_park_in_ 4
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_Tshape_park_in_ 5
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_Tshape_park_in_ 6
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Left_parallel_park_out_ 7
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Right_parallel_park_out_ 8
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Front_vert_park_out_ 9
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__Rear_vert_park_out_ 10
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_$$__reserved_ 11
#define DB_HAP1_HS_CAN_$_HAP_PrkgModCurrSts_SendType 0
#define DB_HAP1_HS_CAN_$_APS_MovgDirc_$$__No_Display_ 0
#define DB_HAP1_HS_CAN_$_APS_MovgDirc_$$__Moving_forward_ 1
#define DB_HAP1_HS_CAN_$_APS_MovgDirc_$$__Moving_backward_ 2
#define DB_HAP1_HS_CAN_$_APS_MovgDirc_$$__Reserved__ 3
#define DB_HAP1_HS_CAN_$_APS_MovgDirc_SendType 0
#pragma warning(default : 4005)

void DB_HAP1_HS_CAN_Init(DB_HAP1_HS_CAN * pMsg);
int DB_HAP1_HS_CAN_Transmit(DB_HAP1_HS_CAN * pMsg);
int DB_HAP1_HS_CAN_Transmit_raw(DB_HAP1_HS_CAN * pMsg);
int DB_HAP1_HS_CAN_UpdateBytesFromSignals(DB_HAP1_HS_CAN * pMsg);
int DB_HAP1_HS_CAN_UpdateBytesFromRawSignals(DB_HAP1_HS_CAN * pMsg);
#define DB_HAP1_HS_CAN_RmtPrkgReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_HAP1_HS_CAN_LParaPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_HAP1_HS_CAN_RParaPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_HAP1_HS_CAN_HeadVertPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_HAP1_HS_CAN_TailVertPrkgOutVald_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_HAP1_HS_CAN_HAP_SwtDispCtrlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_HAP1_HS_CAN_PASSwtReq_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_HAP1_HS_CAN_HAP_PrkgModCurrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_HAP1_HS_CAN_APS_MovgDirc_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_HAP1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_HAP1_HS_CAN_Index, 0)
#define DB_HAP1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_HAP1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_HAP2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double APA_MenuDispCtrlCmd; /// Min: 0 Max: 15 Units: 
    BYTE APA_MenuDispCtrlCmd_raw;
    double APA_FuncSts; /// Min: 0 Max: 3 Units: 
    BYTE APA_FuncSts_raw;
    double HAP_TextIconDispCtrl; /// Min: 0 Max: 3 Units: 
    BYTE HAP_TextIconDispCtrl_raw;
    double OrvmCtrlCmd; /// Min: 0 Max: 3 Units: 
    BYTE OrvmCtrlCmd_raw;
} DB_HAP2_HS_CAN;

#define DB_HAP2_HS_CAN_SendType 0
#define DB_HAP2_HS_CAN_SendRate 100
#define DB_HAP2_HS_CAN_SendRateFast 0
#define DB_HAP2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__No_Disp_avm_menu_ 0
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_in_indicate_menu_ 1
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_in_mode_select_menu_ 2
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_out_indicate_menu_ 3
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_out_confirm_menu_ 4
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__parking_in_confirm_menu_ 5
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_in_process_ 6
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__remote_park_in_process_ 7
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__park_out_process_ 8
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_$$__Reserved_ 9
#define DB_HAP2_HS_CAN_$_APA_MenuDispCtrlCmd_SendType 0
#define DB_HAP2_HS_CAN_$_APA_FuncSts_$$__APA_Function_standby_ 0
#define DB_HAP2_HS_CAN_$_APA_FuncSts_$$__APA_Function_active_ 1
#define DB_HAP2_HS_CAN_$_APA_FuncSts_$$__APA_Function_disable_ 2
#define DB_HAP2_HS_CAN_$_APA_FuncSts_$$__Reserved_ 3
#define DB_HAP2_HS_CAN_$_APA_FuncSts_SendType 0
#define DB_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__No_display_ 0
#define DB_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__Display_according_to_text_info_ 1
#define DB_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__Display_parking_mode__ 2
#define DB_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_$$__Reserved_ 3
#define DB_HAP2_HS_CAN_$_HAP_TextIconDispCtrl_SendType 0
#define DB_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__NO_request_ 0
#define DB_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__Request_to_Fold_ 1
#define DB_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__Request_to_Unfold_ 2
#define DB_HAP2_HS_CAN_$_OrvmCtrlCmd_$$__Reserved_ 3
#define DB_HAP2_HS_CAN_$_OrvmCtrlCmd_SendType 0
#pragma warning(default : 4005)

void DB_HAP2_HS_CAN_Init(DB_HAP2_HS_CAN * pMsg);
int DB_HAP2_HS_CAN_Transmit(DB_HAP2_HS_CAN * pMsg);
int DB_HAP2_HS_CAN_Transmit_raw(DB_HAP2_HS_CAN * pMsg);
int DB_HAP2_HS_CAN_UpdateBytesFromSignals(DB_HAP2_HS_CAN * pMsg);
int DB_HAP2_HS_CAN_UpdateBytesFromRawSignals(DB_HAP2_HS_CAN * pMsg);
#define DB_HAP2_HS_CAN_APA_MenuDispCtrlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_HAP2_HS_CAN_APA_FuncSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP2_HS_CAN_Index, 1, dPhysicalValue);
#define DB_HAP2_HS_CAN_HAP_TextIconDispCtrl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP2_HS_CAN_Index, 2, dPhysicalValue);
#define DB_HAP2_HS_CAN_OrvmCtrlCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_HAP2_HS_CAN_Index, 3, dPhysicalValue);
#define DB_HAP2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_HAP2_HS_CAN_Index, 0)
#define DB_HAP2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_HAP2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_AVM1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double AutoAVMSwtSet_Sts; /// Min: 0 Max: 1 Units: 
    BYTE AutoAVMSwtSet_Sts_raw;
    double AVM_CurrSts; /// Min: 0 Max: 3 Units: 
    BYTE AVM_CurrSts_raw;
    double GuidOvlSts; /// Min: 0 Max: 3 Units: 
    BYTE GuidOvlSts_raw;
    double FrntCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE FrntCamInpFaild_raw;
    double RearCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE RearCamInpFaild_raw;
    double LeCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE LeCamInpFaild_raw;
    double RiCamInpFaild; /// Min: 0 Max: 1 Units: 
    BYTE RiCamInpFaild_raw;
    double EolNotCmpltd; /// Min: 0 Max: 1 Units: 
    BYTE EolNotCmpltd_raw;
    double OvlOpFaild; /// Min: 0 Max: 1 Units: 
    BYTE OvlOpFaild_raw;
    double LaneCalSts; /// Min: 0 Max: 3 Units: 
    BYTE LaneCalSts_raw;
    double RadarDispSts; /// Min: 0 Max: 3 Units: 
    BYTE RadarDispSts_raw;
    double LaneCalFltSts; /// Min: 0 Max: 7 Units: 
    BYTE LaneCalFltSts_raw;
    double AutoViewChgFctSts; /// Min: 0 Max: 1 Units: 
    BYTE AutoViewChgFctSts_raw;
    double CarMdlTrsprcySts; /// Min: 0 Max: 3 Units: 
    BYTE CarMdlTrsprcySts_raw;
    double CarMdlDispSts; /// Min: 0 Max: 1 Units: 
    BYTE CarMdlDispSts_raw;
    double CurrCalResultSts; /// Min: 0 Max: 1 Units: 
    BYTE CurrCalResultSts_raw;
    double MdlColrSts; /// Min: 0 Max: 15 Units: 
    BYTE MdlColrSts_raw;
    double SigViewIndcn; /// Min: 0 Max: 63 Units: 
    BYTE SigViewIndcn_raw;
    double HAP_DispCmd; /// Min: 0 Max: 1 Units: 
    BYTE HAP_DispCmd_raw;
    double MOD_AlarmSts; /// Min: 0 Max: 1 Units: 
    BYTE MOD_AlarmSts_raw;
    double AVM_3DAngSts; /// Min: 0 Max: 360 Units: deg
    WORD AVM_3DAngSts_raw;
    double MOD_WorkSts; /// Min: 0 Max: 1 Units: 
    BYTE MOD_WorkSts_raw;
    double HAP_Hmi_Index; /// Min: 0 Max: 7 Units: 
    BYTE HAP_Hmi_Index_raw;
    double DVRWorkSts; /// Min: 0 Max: 3 Units: 
    BYTE DVRWorkSts_raw;
} DB_AVM1_HS_CAN;

#define DB_AVM1_HS_CAN_SendType 0
#define DB_AVM1_HS_CAN_SendRate 50
#define DB_AVM1_HS_CAN_SendRateFast 0
#define DB_AVM1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_AVM1_HS_CAN_$_AutoAVMSwtSet_Sts_$$__Close_ 0
#define DB_AVM1_HS_CAN_$_AutoAVMSwtSet_Sts_$$__Open_ 1
#define DB_AVM1_HS_CAN_$_AutoAVMSwtSet_Sts_SendType 0
#define DB_AVM1_HS_CAN_$_AVM_CurrSts_$$__STANDBY_State_OFF__ 0
#define DB_AVM1_HS_CAN_$_AVM_CurrSts_$$__NORMAL_State_ON__ 1
#define DB_AVM1_HS_CAN_$_AVM_CurrSts_$$__AVM_no_video_______ 2
#define DB_AVM1_HS_CAN_$_AVM_CurrSts_$$__Reserved_ 3
#define DB_AVM1_HS_CAN_$_AVM_CurrSts_SendType 0
#define DB_AVM1_HS_CAN_$_GuidOvlSts_$$__Around_View_and_Single_View_ 0
#define DB_AVM1_HS_CAN_$_GuidOvlSts_$$__Only_Around_View__ 1
#define DB_AVM1_HS_CAN_$_GuidOvlSts_$$__Only_Single_View__ 2
#define DB_AVM1_HS_CAN_$_GuidOvlSts_$$__No_Guidance__ 3
#define DB_AVM1_HS_CAN_$_GuidOvlSts_SendType 0
#define DB_AVM1_HS_CAN_$_FrntCamInpFaild_$$__False_ 0
#define DB_AVM1_HS_CAN_$_FrntCamInpFaild_$$__True_ 1
#define DB_AVM1_HS_CAN_$_FrntCamInpFaild_SendType 0
#define DB_AVM1_HS_CAN_$_RearCamInpFaild_$$__False_ 0
#define DB_AVM1_HS_CAN_$_RearCamInpFaild_$$__True_ 1
#define DB_AVM1_HS_CAN_$_RearCamInpFaild_SendType 0
#define DB_AVM1_HS_CAN_$_LeCamInpFaild_$$__False_ 0
#define DB_AVM1_HS_CAN_$_LeCamInpFaild_$$__True_ 1
#define DB_AVM1_HS_CAN_$_LeCamInpFaild_SendType 0
#define DB_AVM1_HS_CAN_$_RiCamInpFaild_$$__False_ 0
#define DB_AVM1_HS_CAN_$_RiCamInpFaild_$$__True_ 1
#define DB_AVM1_HS_CAN_$_RiCamInpFaild_SendType 0
#define DB_AVM1_HS_CAN_$_EolNotCmpltd_$$__False_ 0
#define DB_AVM1_HS_CAN_$_EolNotCmpltd_$$__True_ 1
#define DB_AVM1_HS_CAN_$_EolNotCmpltd_SendType 0
#define DB_AVM1_HS_CAN_$_OvlOpFaild_$$__False_ 0
#define DB_AVM1_HS_CAN_$_OvlOpFaild_$$__True_ 1
#define DB_AVM1_HS_CAN_$_OvlOpFaild_SendType 0
#define DB_AVM1_HS_CAN_$_LaneCalSts_$$__No_Commands_ 0
#define DB_AVM1_HS_CAN_$_LaneCalSts_$$__In_Calibration_process_ 1
#define DB_AVM1_HS_CAN_$_LaneCalSts_$$__Calibration_success_ 2
#define DB_AVM1_HS_CAN_$_LaneCalSts_$$__Calibration_failure_ 3
#define DB_AVM1_HS_CAN_$_LaneCalSts_SendType 0
#define DB_AVM1_HS_CAN_$_RadarDispSts_$$__Both_Around_and_Single_View 0
#define DB_AVM1_HS_CAN_$_RadarDispSts_$$__Only_Around_View 1
#define DB_AVM1_HS_CAN_$_RadarDispSts_$$__Only_Single_View 2
#define DB_AVM1_HS_CAN_$_RadarDispSts_$$__No_Display_ 3
#define DB_AVM1_HS_CAN_$_RadarDispSts_SendType 0
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_$$__No_fault_ 0
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_$$__Front_view_Calibration_abnormal_ 1
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_$$__Rear_view_Calibration_abnormal_ 2
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_$$__left_view_Calibration_abnormal_ 3
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_$$__Right_view_Calibration_abnormal_ 4
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_$$__Calibration_data_storage_failed_ 5
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_$$__Reserved_ 6
#define DB_AVM1_HS_CAN_$_LaneCalFltSts_SendType 0
#define DB_AVM1_HS_CAN_$_AutoViewChgFctSts_$$__Closed_ 0
#define DB_AVM1_HS_CAN_$_AutoViewChgFctSts_$$__Open_ 1
#define DB_AVM1_HS_CAN_$_AutoViewChgFctSts_SendType 0
#define DB_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Opaque_ 0
#define DB_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Translucent_ 1
#define DB_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Completely_transparent_ 2
#define DB_AVM1_HS_CAN_$_CarMdlTrsprcySts_$$__Reserved_ 3
#define DB_AVM1_HS_CAN_$_CarMdlTrsprcySts_SendType 0
#define DB_AVM1_HS_CAN_$_CarMdlDispSts_$$__2D_mode_ 0
#define DB_AVM1_HS_CAN_$_CarMdlDispSts_$$__3D_mode_ 1
#define DB_AVM1_HS_CAN_$_CarMdlDispSts_SendType 0
#define DB_AVM1_HS_CAN_$_CurrCalResultSts_$$__Use_Factory_Calibration_Result_ 0
#define DB_AVM1_HS_CAN_$_CurrCalResultSts_$$__Use_Lane_Calibration_Result_ 1
#define DB_AVM1_HS_CAN_$_CurrCalResultSts_SendType 0
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Silvery_ 0
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Red_ 1
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Gray_ 2
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__White_ 3
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Black_ 4
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Brown_ 5
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Blue_ 6
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Orange_ 7
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Green_ 8
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Gold_ 9
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Purple_ 10
#define DB_AVM1_HS_CAN_$_MdlColrSts_$$__Reserved_ 11
#define DB_AVM1_HS_CAN_$_MdlColrSts_SendType 0
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$_Reversed 25
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__No_Commands_ 0
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_to_Center_View_ 1
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_to_Center_View__ 2
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_to_Center_View_ 3
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_to_Center_View_ 4
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_Front_to_Center_View_ 5
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_Front_to_Center_View_ 6
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_Rear_to_Center_View_ 7
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_Rear_to_Center_View_ 8
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_View_ 9
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_View_ 10
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_View_ 11
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_View_ 12
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Left_Turn_3D_View_ 13
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Right_Turn_3D_View_ 14
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_Overlook_View_ 15
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_Overlook_View_ 16
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_180_Deg_View_ 17
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_180_Deg_View_ 18
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_Wheel_View_ 19
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_Wheel_View_ 20
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Front_Wash_View_ 21
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Rear_Wash_View_ 22
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__Free_3D_View_ 23
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$_Left_and_Right_View 24
#define DB_AVM1_HS_CAN_$_SigViewIndcn_$$__3D_Car_Model_Round_View_ 63
#define DB_AVM1_HS_CAN_$_SigViewIndcn_SendType 0
#define DB_AVM1_HS_CAN_$_HAP_DispCmd_$$__OFF_ 0
#define DB_AVM1_HS_CAN_$_HAP_DispCmd_$$__ON_ 1
#define DB_AVM1_HS_CAN_$_HAP_DispCmd_SendType 0
#define DB_AVM1_HS_CAN_$_MOD_AlarmSts_$$__OFF_ 0
#define DB_AVM1_HS_CAN_$_MOD_AlarmSts_$$__ON_ 1
#define DB_AVM1_HS_CAN_$_MOD_AlarmSts_SendType 0
#define DB_AVM1_HS_CAN_$_AVM_3DAngSts_$$__Not_active__ 0
#define DB_AVM1_HS_CAN_$_AVM_3DAngSts_$$__0_360___ 1
#define DB_AVM1_HS_CAN_$_AVM_3DAngSts_$$__reserved__ 362
#define DB_AVM1_HS_CAN_$_AVM_3DAngSts_$$__invalid_ 511
#define DB_AVM1_HS_CAN_$_AVM_3DAngSts_SendType 0
#define DB_AVM1_HS_CAN_$_MOD_WorkSts_$$__OFF_ 0
#define DB_AVM1_HS_CAN_$_MOD_WorkSts_$$__ON_ 1
#define DB_AVM1_HS_CAN_$_MOD_WorkSts_SendType 0
#define DB_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Reserved_ 0
#define DB_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Main_Screen_ 1
#define DB_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__EOL_Test_ 2
#define DB_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__P2P_Screen_ 3
#define DB_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Assist_Screen_ 4
#define DB_AVM1_HS_CAN_$_HAP_Hmi_Index_$$__Reserved_ 5
#define DB_AVM1_HS_CAN_$_HAP_Hmi_Index_SendType 0
#define DB_AVM1_HS_CAN_$_DVRWorkSts_$$__DVR_STANDBY_ 0
#define DB_AVM1_HS_CAN_$_DVRWorkSts_$$__DVR_ACTIVE_ 1
#define DB_AVM1_HS_CAN_$_DVRWorkSts_$$__DVR_InterFailed_ 2
#define DB_AVM1_HS_CAN_$_DVRWorkSts_$$__DVR_NetFailed_ 3
#define DB_AVM1_HS_CAN_$_DVRWorkSts_SendType 0
#pragma warning(default : 4005)

void DB_AVM1_HS_CAN_Init(DB_AVM1_HS_CAN * pMsg);
int DB_AVM1_HS_CAN_Transmit(DB_AVM1_HS_CAN * pMsg);
int DB_AVM1_HS_CAN_Transmit_raw(DB_AVM1_HS_CAN * pMsg);
int DB_AVM1_HS_CAN_UpdateBytesFromSignals(DB_AVM1_HS_CAN * pMsg);
int DB_AVM1_HS_CAN_UpdateBytesFromRawSignals(DB_AVM1_HS_CAN * pMsg);
#define DB_AVM1_HS_CAN_AutoAVMSwtSet_Sts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_AVM1_HS_CAN_AVM_CurrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_AVM1_HS_CAN_GuidOvlSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_AVM1_HS_CAN_FrntCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_AVM1_HS_CAN_RearCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_AVM1_HS_CAN_LeCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_AVM1_HS_CAN_RiCamInpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_AVM1_HS_CAN_EolNotCmpltd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_AVM1_HS_CAN_OvlOpFaild_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_AVM1_HS_CAN_LaneCalSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_AVM1_HS_CAN_RadarDispSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_AVM1_HS_CAN_LaneCalFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 11, dPhysicalValue);
#define DB_AVM1_HS_CAN_AutoViewChgFctSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 12, dPhysicalValue);
#define DB_AVM1_HS_CAN_CarMdlTrsprcySts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 13, dPhysicalValue);
#define DB_AVM1_HS_CAN_CarMdlDispSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 14, dPhysicalValue);
#define DB_AVM1_HS_CAN_CurrCalResultSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 15, dPhysicalValue);
#define DB_AVM1_HS_CAN_MdlColrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 16, dPhysicalValue);
#define DB_AVM1_HS_CAN_SigViewIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 17, dPhysicalValue);
#define DB_AVM1_HS_CAN_HAP_DispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 18, dPhysicalValue);
#define DB_AVM1_HS_CAN_MOD_AlarmSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 19, dPhysicalValue);
#define DB_AVM1_HS_CAN_AVM_3DAngSts_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 20, dPhysicalValue);
#define DB_AVM1_HS_CAN_MOD_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 21, dPhysicalValue);
#define DB_AVM1_HS_CAN_HAP_Hmi_Index_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 22, dPhysicalValue);
#define DB_AVM1_HS_CAN_DVRWorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_AVM1_HS_CAN_Index, 23, dPhysicalValue);
#define DB_AVM1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_AVM1_HS_CAN_Index, 0)
#define DB_AVM1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_AVM1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_FPAS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double FPAS_FLCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FLCornrSnsrFltSts_raw;
    double FPAS_FLMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FLMiddlSnsrFltSts_raw;
    double FPAS_FRMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FRMiddlSnsrFltSts_raw;
    double FPAS_FRCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_FRCornrSnsrFltSts_raw;
    double FPAS_WorkSts; /// Min: 0 Max: 3 Units: 
    BYTE FPAS_WorkSts_raw;
    double FPAS_SoundIndcn; /// Min: 0 Max: 3 Units: 
    BYTE FPAS_SoundIndcn_raw;
    double FPAS_ObjFLCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLCornrAr1_raw;
    double FPAS_ObjFLCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLCornrAr2_raw;
    double FPAS_ObjFLMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLMidlAr1_raw;
    double FPAS_ObjFLMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFLMidlAr2_raw;
    double FPAS_ObjFRMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRMidlAr1_raw;
    double FPAS_ObjFRMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRMidlAr2_raw;
    double FPAS_ObjFRCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRCornrAr1_raw;
    double FPAS_ObjFRCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE FPAS_ObjFRCornrAr2_raw;
    double FPAS_DispCmd; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_DispCmd_raw;
    double FPAS_AutoStgySts; /// Min: 0 Max: 1 Units: 
    BYTE FPAS_AutoStgySts_raw;
    double FPAS_MEBWorkSts; /// Min: 0 Max: 3 Units: 
    BYTE FPAS_MEBWorkSts_raw;
} DB_FPAS1_HS_CAN;

#define DB_FPAS1_HS_CAN_SendType 0
#define DB_FPAS1_HS_CAN_SendRate 100
#define DB_FPAS1_HS_CAN_SendRateFast 0
#define DB_FPAS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_FPAS1_HS_CAN_$_FPAS_FLCornrSnsrFltSts_$$__Sensor_normal_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_FLCornrSnsrFltSts_$$__Sensor_fault_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_FLCornrSnsrFltSts_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_FLMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_FLMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_FLMiddlSnsrFltSts_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_FRMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_FRMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_FRMiddlSnsrFltSts_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_FRCornrSnsrFltSts_$$__Sensor_normal_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_FRCornrSnsrFltSts_$$__Sensor_fault_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_FRCornrSnsrFltSts_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Disable_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Enable_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Active_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_WorkSts_$$__Failed_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_WorkSts_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_zero__No_warning_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_one__Long_beep_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_two_1_5_Hz_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_SoundIndcn_$$__Tone_three_3Hz_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_SoundIndcn_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_$$__Reserved_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr1_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_$$__Reserved_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLCornrAr2_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_7__61_70cm_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_8__71_80cm_ 8
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_9__81_90cm_ 9
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$_Zone_10__91_100cm_ 10
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_$$__Reserved_ 11
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr1_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_7__61_70cm_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_8__71_80cm_ 8
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_9__81_90cm_ 9
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$_Zone_10__91_100cm_ 10
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_$$__Reserved_ 11
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFLMidlAr2_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_7__61_70cm_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_8__71_80cm_ 8
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_9__81_90cm_ 9
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$_Zone_10__91_100cm_ 10
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_$$__Reserved_ 11
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr1_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_7__61_70cm_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_8__71_80cm_ 8
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_9__81_90cm_ 9
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$_Zone_10__91_100cm_ 10
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_$$__Reserved_ 11
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRMidlAr2_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_$$__Reserved_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr1_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$__No_object_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_1__0_10cm_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_2__11_20cm_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_3__21_30cm_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_4__31_40cm_ 4
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_5__41_50cm_ 5
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$_Zone_6__51_60cm_ 6
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_$$__Reserved_ 7
#define DB_FPAS1_HS_CAN_$_FPAS_ObjFRCornrAr2_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_DispCmd_$$__OFF_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_DispCmd_$$__ON_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_DispCmd_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_AutoStgySts_$$__not_available_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_AutoStgySts_$$__available_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_AutoStgySts_SendType 0
#define DB_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Off_ 0
#define DB_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Enable_ 1
#define DB_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Active_ 2
#define DB_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_$$__Failed_ 3
#define DB_FPAS1_HS_CAN_$_FPAS_MEBWorkSts_SendType 0
#pragma warning(default : 4005)

void DB_FPAS1_HS_CAN_Init(DB_FPAS1_HS_CAN * pMsg);
int DB_FPAS1_HS_CAN_Transmit(DB_FPAS1_HS_CAN * pMsg);
int DB_FPAS1_HS_CAN_Transmit_raw(DB_FPAS1_HS_CAN * pMsg);
int DB_FPAS1_HS_CAN_UpdateBytesFromSignals(DB_FPAS1_HS_CAN * pMsg);
int DB_FPAS1_HS_CAN_UpdateBytesFromRawSignals(DB_FPAS1_HS_CAN * pMsg);
#define DB_FPAS1_HS_CAN_FPAS_FLCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_FLMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_FRMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_FRCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_SoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFLCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFLCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFLMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFLMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFRMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFRMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 11, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFRCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 12, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_ObjFRCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 13, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_DispCmd_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 14, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_AutoStgySts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 15, dPhysicalValue);
#define DB_FPAS1_HS_CAN_FPAS_MEBWorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_FPAS1_HS_CAN_Index, 16, dPhysicalValue);
#define DB_FPAS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_FPAS1_HS_CAN_Index, 0)
#define DB_FPAS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_FPAS1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_RPAS1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RPAS_RLCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RLCornrSnsrFltSts_raw;
    double RPAS_RLMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RLMiddlSnsrFltSts_raw;
    double RPAS_RRMiddlSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RRMiddlSnsrFltSts_raw;
    double RPAS_RRCornrSnsrFltSts; /// Min: 0 Max: 1 Units: 
    BYTE RPAS_RRCornrSnsrFltSts_raw;
    double RPAS_WorkSts; /// Min: 0 Max: 3 Units: 
    BYTE RPAS_WorkSts_raw;
    double RPAS_SoundIndcn; /// Min: 0 Max: 3 Units: 
    BYTE RPAS_SoundIndcn_raw;
    double RPAS_ObjRRCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRCornrAr1_raw;
    double RPAS_ObjRRCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRCornrAr2_raw;
    double RPAS_ObjRRMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRMidlAr1_raw;
    double RPAS_ObjRRMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRRMidlAr2_raw;
    double RPAS_ObjRLMidlAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLMidlAr1_raw;
    double RPAS_ObjRLMidlAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLMidlAr2_raw;
    double RPAS_ObjRLCornrAr1; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLCornrAr1_raw;
    double RPAS_ObjRLCornrAr2; /// Min: 0 Max: 15 Units: 
    BYTE RPAS_ObjRLCornrAr2_raw;
    double RPAS_MEBWorkSts; /// Min: 0 Max: 3 Units: 
    BYTE RPAS_MEBWorkSts_raw;
    double MEB_EnableSts; /// Min: 0 Max: 1 Units: 
    BYTE MEB_EnableSts_raw;
} DB_RPAS1_HS_CAN;

#define DB_RPAS1_HS_CAN_SendType 0
#define DB_RPAS1_HS_CAN_SendRate 100
#define DB_RPAS1_HS_CAN_SendRateFast 0
#define DB_RPAS1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_RPAS1_HS_CAN_$_RPAS_RLCornrSnsrFltSts_$$__Sensor_normal_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_RLCornrSnsrFltSts_$$__Sensor_fault_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_RLCornrSnsrFltSts_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_RLMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_RLMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_RLMiddlSnsrFltSts_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_RRMiddlSnsrFltSts_$$__Sensor_normal_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_RRMiddlSnsrFltSts_$$__Sensor_fault_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_RRMiddlSnsrFltSts_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_RRCornrSnsrFltSts_$$__Sensor_normal_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_RRCornrSnsrFltSts_$$__Sensor_fault_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_RRCornrSnsrFltSts_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Disable_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Enable_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Active_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_WorkSts_$$__Failed_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_WorkSts_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_zero_No_warning_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_one__Long_beep_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_two_1_5_Hz_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_SoundIndcn_$$__Tone_three__3Hz_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_SoundIndcn_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_$$__Reserved_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr1_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_$$__Reserved_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRCornrAr2_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_7__61_70cm_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_8__71_80cm_ 8
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_9__81_90cm_ 9
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_10__91_100cm_ 10
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_11__101_110cm_ 11
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_12__111_120cm_ 12
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_13__121_130cm_ 13
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_14__131_140cm_ 14
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_$$__Object_in_zone_15__141_150cm_ 15
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr1_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_7__61_70cm_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_8__71_80cm_ 8
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_9__81_90cm_ 9
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_10__91_100cm_ 10
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_11__101_110cm_ 11
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_12__111_120cm_ 12
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_13__121_130cm_ 13
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_14__131_140cm_ 14
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_$$__Object_in_zone_15__141_150cm_ 15
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRRMidlAr2_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_7__61_70cm_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_8__71_80cm_ 8
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_9__81_90cm_ 9
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_10__91_100cm_ 10
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_11__101_110cm_ 11
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_12__111_120cm_ 12
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_13__121_130cm_ 13
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_14__131_140cm_ 14
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_$$__Object_in_zone_15__141_150cm_ 15
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr1_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_7__61_70cm_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_8__71_80cm_ 8
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_9__81_90cm_ 9
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_10__91_100cm_ 10
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_11__101_110cm_ 11
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_12__111_120cm_ 12
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_13__121_130cm_ 13
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_14__131_140cm_ 14
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_$$__Object_in_zone_15__141_150cm_ 15
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLMidlAr2_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_$$__Reserved_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr1_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__No_object_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_1__0_10cm_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_2__11_20cm_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_3__21_30cm_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_4__31_40cm_ 4
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_5__41_50cm_ 5
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Object_in_zone_6__51_60cm_ 6
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_$$__Reserved_ 7
#define DB_RPAS1_HS_CAN_$_RPAS_ObjRLCornrAr2_SendType 0
#define DB_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Off_ 0
#define DB_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Enable_ 1
#define DB_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Active_ 2
#define DB_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_$$__Failed_ 3
#define DB_RPAS1_HS_CAN_$_RPAS_MEBWorkSts_SendType 0
#define DB_RPAS1_HS_CAN_$_MEB_EnableSts_$$__Disable_ 0
#define DB_RPAS1_HS_CAN_$_MEB_EnableSts_$$__Enable_ 1
#define DB_RPAS1_HS_CAN_$_MEB_EnableSts_SendType 0
#pragma warning(default : 4005)

void DB_RPAS1_HS_CAN_Init(DB_RPAS1_HS_CAN * pMsg);
int DB_RPAS1_HS_CAN_Transmit(DB_RPAS1_HS_CAN * pMsg);
int DB_RPAS1_HS_CAN_Transmit_raw(DB_RPAS1_HS_CAN * pMsg);
int DB_RPAS1_HS_CAN_UpdateBytesFromSignals(DB_RPAS1_HS_CAN * pMsg);
int DB_RPAS1_HS_CAN_UpdateBytesFromRawSignals(DB_RPAS1_HS_CAN * pMsg);
#define DB_RPAS1_HS_CAN_RPAS_RLCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_RLMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_RRMiddlSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_RRCornrSnsrFltSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_WorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_SoundIndcn_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRRCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRRCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRRMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRRMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRLMidlAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRLMidlAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 11, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRLCornrAr1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 12, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_ObjRLCornrAr2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 13, dPhysicalValue);
#define DB_RPAS1_HS_CAN_RPAS_MEBWorkSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 14, dPhysicalValue);
#define DB_RPAS1_HS_CAN_MEB_EnableSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RPAS1_HS_CAN_Index, 15, dPhysicalValue);
#define DB_RPAS1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_RPAS1_HS_CAN_Index, 0)
#define DB_RPAS1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_RPAS1_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_IP2_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double Checksum_IP2; /// Min: 0 Max: 255 Units: 
    BYTE Checksum_IP2_raw;
    double RollingCounter_IP2; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_IP2_raw;
    double DrvSeatBeltWarnLmpFailrSts; /// Min: 0 Max: 3 Units: 
    BYTE DrvSeatBeltWarnLmpFailrSts_raw;
    double PassSeatBeltWarnLmpFailrSts; /// Min: 0 Max: 3 Units: 
    BYTE PassSeatBeltWarnLmpFailrSts_raw;
    double VehTotDistance; /// Min: 0 Max: 999999 Units: Km
    DWORD VehTotDistance_raw;
    double FuelLvl; /// Min: 0 Max: 200 Units: L
    BYTE FuelLvl_raw;
    double QDashACCFail; /// Min: 0 Max: 1 Units: 
    BYTE QDashACCFail_raw;
    double VehTotDistanceValid; /// Min: 0 Max: 1 Units: 
    BYTE VehTotDistanceValid_raw;
    double FuelLvlLowLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE FuelLvlLowLmpSts_raw;
    double BattChrgLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE BattChrgLmpSts_raw;
    double EngOilPressLowLmpSts; /// Min: 0 Max: 3 Units: 
    BYTE EngOilPressLowLmpSts_raw;
    double ABMWarnLmpFailrSts; /// Min: 0 Max: 3 Units: 
    BYTE ABMWarnLmpFailrSts_raw;
    double VehSpdUnit; /// Min: 0 Max: 1 Units: 
    BYTE VehSpdUnit_raw;
    double IP_Err; /// Min: 0 Max: 1 Units: 
    BYTE IP_Err_raw;
} DB_IP2_HS_CAN;

#define DB_IP2_HS_CAN_SendType 0
#define DB_IP2_HS_CAN_SendRate 50
#define DB_IP2_HS_CAN_SendRateFast 0
#define DB_IP2_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_IP2_HS_CAN_$_Checksum_IP2_$$__valid_value_ 0
#define DB_IP2_HS_CAN_$_Checksum_IP2_SendType 0
#define DB_IP2_HS_CAN_$_RollingCounter_IP2_$$__Valid_value_ 0
#define DB_IP2_HS_CAN_$_RollingCounter_IP2_SendType 0
#define DB_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__No_failure_ 0
#define DB_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__Failure_ 1
#define DB_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__Signal_not_available_ 2
#define DB_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_$$__Reserved_ 3
#define DB_IP2_HS_CAN_$_DrvSeatBeltWarnLmpFailrSts_SendType 0
#define DB_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__No_failure_ 0
#define DB_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__Failure_ 1
#define DB_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__Signal_not_available_ 2
#define DB_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_$$__Reserved_ 3
#define DB_IP2_HS_CAN_$_PassSeatBeltWarnLmpFailrSts_SendType 0
#define DB_IP2_HS_CAN_$_VehTotDistance_$$__0_999999__km_ 0
#define DB_IP2_HS_CAN_$_VehTotDistance_$$__Invalid_ 1000000
#define DB_IP2_HS_CAN_$_VehTotDistance_SendType 0
#define DB_IP2_HS_CAN_$_FuelLvl_$$__Valid_ 0
#define DB_IP2_HS_CAN_$_FuelLvl_$$__Reserved_ 201
#define DB_IP2_HS_CAN_$_FuelLvl_$$__Invalid_Value_ 255
#define DB_IP2_HS_CAN_$_FuelLvl_SendType 0
#define DB_IP2_HS_CAN_$_QDashACCFail_$$__No_error_ 0
#define DB_IP2_HS_CAN_$_QDashACCFail_$$__Error_ 1
#define DB_IP2_HS_CAN_$_QDashACCFail_SendType 0
#define DB_IP2_HS_CAN_$_VehTotDistanceValid_$$__Invalid_ 0
#define DB_IP2_HS_CAN_$_VehTotDistanceValid_$$__Valid_ 1
#define DB_IP2_HS_CAN_$_VehTotDistanceValid_SendType 0
#define DB_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__OFF_ 0
#define DB_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__ON_ 1
#define DB_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__Internal_Error_ 2
#define DB_IP2_HS_CAN_$_FuelLvlLowLmpSts_$$__Reserved_ 3
#define DB_IP2_HS_CAN_$_FuelLvlLowLmpSts_SendType 0
#define DB_IP2_HS_CAN_$_BattChrgLmpSts_$$__OFF_ 0
#define DB_IP2_HS_CAN_$_BattChrgLmpSts_$$__ON_ 1
#define DB_IP2_HS_CAN_$_BattChrgLmpSts_$$__Internal_Error_ 2
#define DB_IP2_HS_CAN_$_BattChrgLmpSts_$$__Reserved_ 3
#define DB_IP2_HS_CAN_$_BattChrgLmpSts_SendType 0
#define DB_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__OFF_ 0
#define DB_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__ON_ 1
#define DB_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__Internal_Error_ 2
#define DB_IP2_HS_CAN_$_EngOilPressLowLmpSts_$$__Reserved_ 3
#define DB_IP2_HS_CAN_$_EngOilPressLowLmpSts_SendType 0
#define DB_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__No_failure_ 0
#define DB_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__Failure_ 1
#define DB_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__Signal_not_available_ 2
#define DB_IP2_HS_CAN_$_ABMWarnLmpFailrSts_$$__Reserved_ 3
#define DB_IP2_HS_CAN_$_ABMWarnLmpFailrSts_SendType 0
#define DB_IP2_HS_CAN_$_VehSpdUnit_$$__kph_ 0
#define DB_IP2_HS_CAN_$_VehSpdUnit_$$__mph_ 1
#define DB_IP2_HS_CAN_$_VehSpdUnit_SendType 0
#define DB_IP2_HS_CAN_$_IP_Err_$$__No_error_ 0
#define DB_IP2_HS_CAN_$_IP_Err_$$__Error_ 1
#define DB_IP2_HS_CAN_$_IP_Err_SendType 0
#pragma warning(default : 4005)

void DB_IP2_HS_CAN_Init(DB_IP2_HS_CAN * pMsg);
int DB_IP2_HS_CAN_Transmit(DB_IP2_HS_CAN * pMsg);
int DB_IP2_HS_CAN_Transmit_raw(DB_IP2_HS_CAN * pMsg);
int DB_IP2_HS_CAN_UpdateBytesFromSignals(DB_IP2_HS_CAN * pMsg);
int DB_IP2_HS_CAN_UpdateBytesFromRawSignals(DB_IP2_HS_CAN * pMsg);
#define DB_IP2_HS_CAN_Checksum_IP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 0, dPhysicalValue);
#define DB_IP2_HS_CAN_RollingCounter_IP2_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 1, dPhysicalValue);
#define DB_IP2_HS_CAN_DrvSeatBeltWarnLmpFailrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 2, dPhysicalValue);
#define DB_IP2_HS_CAN_PassSeatBeltWarnLmpFailrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 3, dPhysicalValue);
#define DB_IP2_HS_CAN_VehTotDistance_PhysicalToRaw(dPhysicalValue) \
    (DWORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 4, dPhysicalValue);
#define DB_IP2_HS_CAN_FuelLvl_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 5, dPhysicalValue);
#define DB_IP2_HS_CAN_QDashACCFail_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 6, dPhysicalValue);
#define DB_IP2_HS_CAN_VehTotDistanceValid_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 7, dPhysicalValue);
#define DB_IP2_HS_CAN_FuelLvlLowLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 8, dPhysicalValue);
#define DB_IP2_HS_CAN_BattChrgLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 9, dPhysicalValue);
#define DB_IP2_HS_CAN_EngOilPressLowLmpSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 10, dPhysicalValue);
#define DB_IP2_HS_CAN_ABMWarnLmpFailrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 11, dPhysicalValue);
#define DB_IP2_HS_CAN_VehSpdUnit_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 12, dPhysicalValue);
#define DB_IP2_HS_CAN_IP_Err_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_IP2_HS_CAN_Index, 13, dPhysicalValue);
#define DB_IP2_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_IP2_HS_CAN_Index, 0)
#define DB_IP2_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_IP2_HS_CAN_Index, 1, name, outDoubleValuePtr)
extern int DB_RSDS_R1_HS_CAN_Index;
typedef struct {
    GenericMessage MessageData; /// Message Data
    MessageStats Statistics; /// Message Statistics
    int iDefaultPeriodMilliseconds; /// Default Message Period
    double RiTarSts; /// Min: 0 Max: 3 Units: 
    BYTE RiTarSts_raw;
    double RiTarRelVel; /// Min: -10 Max: 50 Units:  m/s
    WORD RiTarRelVel_raw;
    double RiTarDst; /// Min: -90 Max: 10 Units:  m
    WORD RiTarDst_raw;
    double CheckSum_RSDS_R1; /// Min: 0 Max: 255 Units: 
    BYTE CheckSum_RSDS_R1_raw;
    double CTA_warningReqRight; /// Min: 0 Max: 3 Units: 
    BYTE CTA_warningReqRight_raw;
    double BSD_LCA_warningReqRight; /// Min: 0 Max: 3 Units: 
    BYTE BSD_LCA_warningReqRight_raw;
    double RollingCounter_RSDS_R1; /// Min: 0 Max: 15 Units: 
    BYTE RollingCounter_RSDS_R1_raw;
    double RCWResp; /// Min: 0 Max: 1 Units: 
    BYTE RCWResp_raw;
    double CTAResp; /// Min: 0 Max: 1 Units: 
    BYTE CTAResp_raw;
    double LCAResp; /// Min: 0 Max: 1 Units: 
    BYTE LCAResp_raw;
    double CTABrkResp; /// Min: 0 Max: 1 Units: 
    BYTE CTABrkResp_raw;
    double DOWResp; /// Min: 0 Max: 1 Units: 
    BYTE DOWResp_raw;
    double RSDS_DOW_ErrSts; /// Min: 0 Max: 3 Units: 
    BYTE RSDS_DOW_ErrSts_raw;
    double RSDS_CTA_Actv; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_CTA_Actv_raw;
    double RSDS_TrailerSts; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_TrailerSts_raw;
    double RSDS_LCA_CTA_RCW_ErrSts; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_LCA_CTA_RCW_ErrSts_raw;
    double RSDS_BliSts; /// Min: 0 Max: 1 Units: 
    BYTE RSDS_BliSts_raw;
} DB_RSDS_R1_HS_CAN;

#define DB_RSDS_R1_HS_CAN_SendType 0
#define DB_RSDS_R1_HS_CAN_SendRate 20
#define DB_RSDS_R1_HS_CAN_SendRateFast 0
#define DB_RSDS_R1_HS_CAN_NumRepetitions 0
#pragma warning(disable : 4005)
#define DB_RSDS_R1_HS_CAN_$_RiTarSts_$$__Target_Invalid_ 0
#define DB_RSDS_R1_HS_CAN_$_RiTarSts_$$__Target_Valid_ 1
#define DB_RSDS_R1_HS_CAN_$_RiTarSts_$$__No_target_ 2
#define DB_RSDS_R1_HS_CAN_$_RiTarSts_$$__Reserved_ 3
#define DB_RSDS_R1_HS_CAN_$_RiTarSts_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RiTarRelVel_$$__Valid_value_ 0
#define DB_RSDS_R1_HS_CAN_$_RiTarRelVel_$$__Reserved_ 965
#define DB_RSDS_R1_HS_CAN_$_RiTarRelVel_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RiTarDst_$$__Valid_value_ 0
#define DB_RSDS_R1_HS_CAN_$_RiTarDst_$$__Reserved_ 1608
#define DB_RSDS_R1_HS_CAN_$_RiTarDst_SendType 0
#define DB_RSDS_R1_HS_CAN_$_CheckSum_RSDS_R1_$$__Nmin_ 0
#define DB_RSDS_R1_HS_CAN_$_CheckSum_RSDS_R1_$$__Nmax_ 255
#define DB_RSDS_R1_HS_CAN_$_CheckSum_RSDS_R1_SendType 0
#define DB_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__No_warning_ 0
#define DB_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__Reserved_ 1
#define DB_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__Warning_level_2_ 2
#define DB_RSDS_R1_HS_CAN_$_CTA_warningReqRight_$$__Reserved_ 3
#define DB_RSDS_R1_HS_CAN_$_CTA_warningReqRight_SendType 0
#define DB_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__No_warning_ 0
#define DB_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__Warning_level_1_ 1
#define DB_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__Warning_level_2_ 2
#define DB_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_$$__Reserved_ 3
#define DB_RSDS_R1_HS_CAN_$_BSD_LCA_warningReqRight_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RollingCounter_RSDS_R1_$$__Nmin_ 0
#define DB_RSDS_R1_HS_CAN_$_RollingCounter_RSDS_R1_$$__Nmax_ 15
#define DB_RSDS_R1_HS_CAN_$_RollingCounter_RSDS_R1_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RCWResp_$$__RCW_OFF_ 0
#define DB_RSDS_R1_HS_CAN_$_RCWResp_$$__RCW_ON_ 1
#define DB_RSDS_R1_HS_CAN_$_RCWResp_SendType 0
#define DB_RSDS_R1_HS_CAN_$_CTAResp_$$__CTA_OFF_ 0
#define DB_RSDS_R1_HS_CAN_$_CTAResp_$$__CTA_ON_ 1
#define DB_RSDS_R1_HS_CAN_$_CTAResp_SendType 0
#define DB_RSDS_R1_HS_CAN_$_LCAResp_$$__LCA_OFF_ 0
#define DB_RSDS_R1_HS_CAN_$_LCAResp_$$__LCA_ON_ 1
#define DB_RSDS_R1_HS_CAN_$_LCAResp_SendType 0
#define DB_RSDS_R1_HS_CAN_$_CTABrkResp_$$__CTA__Brake_OFF_ 0
#define DB_RSDS_R1_HS_CAN_$_CTABrkResp_$$__CTA__Brake__ON_ 1
#define DB_RSDS_R1_HS_CAN_$_CTABrkResp_SendType 0
#define DB_RSDS_R1_HS_CAN_$_DOWResp_$$__OFF_ 0
#define DB_RSDS_R1_HS_CAN_$_DOWResp_$$__ON_ 1
#define DB_RSDS_R1_HS_CAN_$_DOWResp_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__No_Error_ 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__Error_ 1
#define DB_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__Function_Limited_ 2
#define DB_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_$$__Reserved_ 3
#define DB_RSDS_R1_HS_CAN_$_RSDS_DOW_ErrSts_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_CTA_Actv_$$__Not_active_ 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_CTA_Actv_$$__Active_ 1
#define DB_RSDS_R1_HS_CAN_$_RSDS_CTA_Actv_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_TrailerSts_$$__None_ 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_TrailerSts_$$__Trailer_ 1
#define DB_RSDS_R1_HS_CAN_$_RSDS_TrailerSts_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_LCA_CTA_RCW_ErrSts_$$__No_Error_ 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_LCA_CTA_RCW_ErrSts_$$__Error_ 1
#define DB_RSDS_R1_HS_CAN_$_RSDS_LCA_CTA_RCW_ErrSts_SendType 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_BliSts_$$__No_Blindness_ 0
#define DB_RSDS_R1_HS_CAN_$_RSDS_BliSts_$$__Blindness_ 1
#define DB_RSDS_R1_HS_CAN_$_RSDS_BliSts_SendType 0
#pragma warning(default : 4005)

void DB_RSDS_R1_HS_CAN_Init(DB_RSDS_R1_HS_CAN * pMsg);
int DB_RSDS_R1_HS_CAN_Transmit(DB_RSDS_R1_HS_CAN * pMsg);
int DB_RSDS_R1_HS_CAN_Transmit_raw(DB_RSDS_R1_HS_CAN * pMsg);
int DB_RSDS_R1_HS_CAN_UpdateBytesFromSignals(DB_RSDS_R1_HS_CAN * pMsg);
int DB_RSDS_R1_HS_CAN_UpdateBytesFromRawSignals(DB_RSDS_R1_HS_CAN * pMsg);
#define DB_RSDS_R1_HS_CAN_RiTarSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 0, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RiTarRelVel_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 1, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RiTarDst_PhysicalToRaw(dPhysicalValue) \
    (WORD )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 2, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_CheckSum_RSDS_R1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 3, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_CTA_warningReqRight_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 4, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_BSD_LCA_warningReqRight_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 5, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RollingCounter_RSDS_R1_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 6, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RCWResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 7, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_CTAResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 8, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_LCAResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 9, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_CTABrkResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 10, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_DOWResp_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 11, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RSDS_DOW_ErrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 12, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RSDS_CTA_Actv_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 13, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RSDS_TrailerSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 14, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RSDS_LCA_CTA_RCW_ErrSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 15, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_RSDS_BliSts_PhysicalToRaw(dPhysicalValue) \
    (BYTE )CM_SignalPhysicalToRaw(g_uiHandle, 0, DB_RSDS_R1_HS_CAN_Index, 16, dPhysicalValue);
#define DB_RSDS_R1_HS_CAN_ClearStats() \
    CM_GetSetValue(g_uiHandle, CM_GETSET_TX_STATS_CLR, DB_RSDS_R1_HS_CAN_Index, 0)
#define DB_RSDS_R1_HS_CAN_GetDissectedField(name, outDoubleValuePtr) \
    GetMessageDissectedField(DB_RSDS_R1_HS_CAN_Index, 1, name, outDoubleValuePtr)

#endif // VSPY_GENERATED_HEADER
